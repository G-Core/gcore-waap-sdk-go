// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sdk

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ApiPathHttpScheme.
const (
	ApiPathHttpSchemeHTTP  ApiPathHttpScheme = "HTTP"
	ApiPathHttpSchemeHTTPS ApiPathHttpScheme = "HTTPS"
)

// Defines values for ApiPathMethod.
const (
	ApiPathMethodDELETE  ApiPathMethod = "DELETE"
	ApiPathMethodGET     ApiPathMethod = "GET"
	ApiPathMethodHEAD    ApiPathMethod = "HEAD"
	ApiPathMethodOPTIONS ApiPathMethod = "OPTIONS"
	ApiPathMethodPATCH   ApiPathMethod = "PATCH"
	ApiPathMethodPOST    ApiPathMethod = "POST"
	ApiPathMethodPUT     ApiPathMethod = "PUT"
	ApiPathMethodTRACE   ApiPathMethod = "TRACE"
)

// Defines values for ApiPathSource.
const (
	ApiPathSourceAPIDESCRIPTIONFILE ApiPathSource = "API_DESCRIPTION_FILE"
	ApiPathSourceTRAFFICSCAN        ApiPathSource = "TRAFFIC_SCAN"
	ApiPathSourceUSERDEFINED        ApiPathSource = "USER_DEFINED"
)

// Defines values for ApiPathStatus.
const (
	ApiPathStatusCONFIRMEDAPI ApiPathStatus = "CONFIRMED_API"
	ApiPathStatusDELISTEDAPI  ApiPathStatus = "DELISTED_API"
	ApiPathStatusNOTAPI       ApiPathStatus = "NOT_API"
	ApiPathStatusPOTENTIALAPI ApiPathStatus = "POTENTIAL_API"
)

// Defines values for ApiScanType.
const (
	ApiScanTypeAPIDESCRIPTIONFILESCAN ApiScanType = "API_DESCRIPTION_FILE_SCAN"
	ApiScanTypeTRAFFICSCAN            ApiScanType = "TRAFFIC_SCAN"
)

// Defines values for CustomerRuleState.
const (
	CustomerRuleStateDisable CustomerRuleState = "disable"
	CustomerRuleStateEnable  CustomerRuleState = "enable"
)

// Defines values for DdosInfoType.
const (
	DdosInfoTypeIP        DdosInfoType = "IP"
	DdosInfoTypeURL       DdosInfoType = "URL"
	DdosInfoTypeUserAgent DdosInfoType = "User-Agent"
)

// Defines values for DomainStatus.
const (
	DomainStatusActive  DomainStatus = "active"
	DomainStatusBypass  DomainStatus = "bypass"
	DomainStatusLocked  DomainStatus = "locked"
	DomainStatusMonitor DomainStatus = "monitor"
)

// Defines values for DomainUpdateStatus.
const (
	DomainUpdateStatusActive  DomainUpdateStatus = "active"
	DomainUpdateStatusMonitor DomainUpdateStatus = "monitor"
)

// Defines values for HTTPMethod.
const (
	HTTPMethodCONNECT HTTPMethod = "CONNECT"
	HTTPMethodDELETE  HTTPMethod = "DELETE"
	HTTPMethodGET     HTTPMethod = "GET"
	HTTPMethodHEAD    HTTPMethod = "HEAD"
	HTTPMethodOPTIONS HTTPMethod = "OPTIONS"
	HTTPMethodPATCH   HTTPMethod = "PATCH"
	HTTPMethodPOST    HTTPMethod = "POST"
	HTTPMethodPUT     HTTPMethod = "PUT"
	HTTPMethodTRACE   HTTPMethod = "TRACE"
)

// Defines values for HeaderConditionMatchType.
const (
	HeaderConditionMatchTypeContains HeaderConditionMatchType = "Contains"
	HeaderConditionMatchTypeExact    HeaderConditionMatchType = "Exact"
)

// Defines values for InsightSilenceSortBy.
const (
	InsightSilenceSortByAuthor           InsightSilenceSortBy = "author"
	InsightSilenceSortByComment          InsightSilenceSortBy = "comment"
	InsightSilenceSortByExpireAt         InsightSilenceSortBy = "expire_at"
	InsightSilenceSortById               InsightSilenceSortBy = "id"
	InsightSilenceSortByInsightType      InsightSilenceSortBy = "insight_type"
	InsightSilenceSortByMinusAuthor      InsightSilenceSortBy = "-author"
	InsightSilenceSortByMinusComment     InsightSilenceSortBy = "-comment"
	InsightSilenceSortByMinusExpireAt    InsightSilenceSortBy = "-expire_at"
	InsightSilenceSortByMinusId          InsightSilenceSortBy = "-id"
	InsightSilenceSortByMinusInsightType InsightSilenceSortBy = "-insight_type"
)

// Defines values for InsightSortBy.
const (
	InsightSortByFirstSeen             InsightSortBy = "first_seen"
	InsightSortById                    InsightSortBy = "id"
	InsightSortByInsightType           InsightSortBy = "insight_type"
	InsightSortByLastSeen              InsightSortBy = "last_seen"
	InsightSortByLastStatusChange      InsightSortBy = "last_status_change"
	InsightSortByMinusFirstSeen        InsightSortBy = "-first_seen"
	InsightSortByMinusId               InsightSortBy = "-id"
	InsightSortByMinusInsightType      InsightSortBy = "-insight_type"
	InsightSortByMinusLastSeen         InsightSortBy = "-last_seen"
	InsightSortByMinusLastStatusChange InsightSortBy = "-last_status_change"
	InsightSortByMinusStatus           InsightSortBy = "-status"
	InsightSortByStatus                InsightSortBy = "status"
)

// Defines values for InsightStatus.
const (
	InsightStatusACKED  InsightStatus = "ACKED"
	InsightStatusCLOSED InsightStatus = "CLOSED"
	InsightStatusOPEN   InsightStatus = "OPEN"
)

// Defines values for IpInfoRiskScore.
const (
	IpInfoRiskScoreEXTREME       IpInfoRiskScore = "EXTREME"
	IpInfoRiskScoreHIGH          IpInfoRiskScore = "HIGH"
	IpInfoRiskScoreLOW           IpInfoRiskScore = "LOW"
	IpInfoRiskScoreMEDIUM        IpInfoRiskScore = "MEDIUM"
	IpInfoRiskScoreNORISK        IpInfoRiskScore = "NO_RISK"
	IpInfoRiskScoreNOTENOUGHDATA IpInfoRiskScore = "NOT_ENOUGH_DATA"
)

// Defines values for OwnerTypesConditionOwnerTypes.
const (
	OwnerTypesConditionOwnerTypesCOMMERCIAL      OwnerTypesConditionOwnerTypes = "COMMERCIAL"
	OwnerTypesConditionOwnerTypesEDUCATIONAL     OwnerTypesConditionOwnerTypes = "EDUCATIONAL"
	OwnerTypesConditionOwnerTypesGOVERNMENT      OwnerTypesConditionOwnerTypes = "GOVERNMENT"
	OwnerTypesConditionOwnerTypesHOSTINGSERVICES OwnerTypesConditionOwnerTypes = "HOSTING_SERVICES"
	OwnerTypesConditionOwnerTypesISP             OwnerTypesConditionOwnerTypes = "ISP"
	OwnerTypesConditionOwnerTypesMOBILENETWORK   OwnerTypesConditionOwnerTypes = "MOBILE_NETWORK"
	OwnerTypesConditionOwnerTypesNETWORK         OwnerTypesConditionOwnerTypes = "NETWORK"
	OwnerTypesConditionOwnerTypesRESERVED        OwnerTypesConditionOwnerTypes = "RESERVED"
)

// Defines values for PageType.
const (
	PageTypeBlockCsrfHtml          PageType = "block_csrf.html"
	PageTypeBlockHtml              PageType = "block.html"
	PageTypeCaptchaHtml            PageType = "captcha.html"
	PageTypeCookieDisabledHtml     PageType = "cookieDisabled.html"
	PageTypeHandshakeHtml          PageType = "handshake.html"
	PageTypeJavascriptDisabledHtml PageType = "javascriptDisabled.html"
)

// Defines values for PolicyAction.
const (
	PolicyActionAllow     PolicyAction = "Allow"
	PolicyActionBlock     PolicyAction = "Block"
	PolicyActionCaptcha   PolicyAction = "Captcha"
	PolicyActionComposite PolicyAction = "Composite"
	PolicyActionGateway   PolicyAction = "Gateway"
	PolicyActionHandshake PolicyAction = "Handshake"
	PolicyActionMonitor   PolicyAction = "Monitor"
)

// Defines values for RequestDetailsResult.
const (
	RequestDetailsResultBlocked    RequestDetailsResult = "blocked"
	RequestDetailsResultEmpty      RequestDetailsResult = ""
	RequestDetailsResultPassed     RequestDetailsResult = "passed"
	RequestDetailsResultSuppressed RequestDetailsResult = "suppressed"
)

// Defines values for RequestSummaryResult.
const (
	RequestSummaryResultBlocked    RequestSummaryResult = "blocked"
	RequestSummaryResultEmpty      RequestSummaryResult = ""
	RequestSummaryResultPassed     RequestSummaryResult = "passed"
	RequestSummaryResultSuppressed RequestSummaryResult = "suppressed"
)

// Defines values for Resolution.
const (
	ResolutionDaily    Resolution = "daily"
	ResolutionHourly   Resolution = "hourly"
	ResolutionMinutely Resolution = "minutely"
)

// Defines values for ResponseHeaderConditionMatchType.
const (
	ResponseHeaderConditionMatchTypeContains ResponseHeaderConditionMatchType = "Contains"
	ResponseHeaderConditionMatchTypeExact    ResponseHeaderConditionMatchType = "Exact"
)

// Defines values for RuleActionType.
const (
	RuleActionTypeAllow     RuleActionType = "allow"
	RuleActionTypeBlock     RuleActionType = "block"
	RuleActionTypeCaptcha   RuleActionType = "captcha"
	RuleActionTypeHandshake RuleActionType = "handshake"
	RuleActionTypeMonitor   RuleActionType = "monitor"
	RuleActionTypeTag       RuleActionType = "tag"
)

// Defines values for RuleBlockStatusCode.
const (
	RuleBlockStatusCodeN403 RuleBlockStatusCode = 403
	RuleBlockStatusCodeN405 RuleBlockStatusCode = 405
	RuleBlockStatusCodeN418 RuleBlockStatusCode = 418
	RuleBlockStatusCodeN429 RuleBlockStatusCode = 429
)

// Defines values for TaskResultStatus.
const (
	TaskResultStatusFAILURE    TaskResultStatus = "FAILURE"
	TaskResultStatusINPROGRESS TaskResultStatus = "IN_PROGRESS"
	TaskResultStatusSUCCESS    TaskResultStatus = "SUCCESS"
)

// Defines values for TrafficType.
const (
	TrafficTypeAjax              TrafficType = "ajax"
	TrafficTypeApi               TrafficType = "api"
	TrafficTypeCustomBlocked     TrafficType = "custom_blocked"
	TrafficTypeCustomRuleAllowed TrafficType = "custom_rule_allowed"
	TrafficTypeDdos              TrafficType = "ddos"
	TrafficTypeDynamic           TrafficType = "dynamic"
	TrafficTypeErr40x            TrafficType = "err_40x"
	TrafficTypeErr50x            TrafficType = "err_50x"
	TrafficTypeLegit             TrafficType = "legit"
	TrafficTypeLegitRequests     TrafficType = "legit_requests"
	TrafficTypeMonitor           TrafficType = "monitor"
	TrafficTypeMonitored         TrafficType = "monitored"
	TrafficTypeOther             TrafficType = "other"
	TrafficTypePassedToOrigin    TrafficType = "passed_to_origin"
	TrafficTypePolicyAllowed     TrafficType = "policy_allowed"
	TrafficTypePolicyBlocked     TrafficType = "policy_blocked"
	TrafficTypeRedirects         TrafficType = "redirects"
	TrafficTypeSanctioned        TrafficType = "sanctioned"
	TrafficTypeStatic            TrafficType = "static"
	TrafficTypeTimeout           TrafficType = "timeout"
)

// Defines values for UrlConditionMatchType.
const (
	UrlConditionMatchTypeContains UrlConditionMatchType = "Contains"
	UrlConditionMatchTypeExact    UrlConditionMatchType = "Exact"
	UrlConditionMatchTypeRegex    UrlConditionMatchType = "Regex"
)

// Defines values for UserAgentConditionMatchType.
const (
	UserAgentConditionMatchTypeContains UserAgentConditionMatchType = "Contains"
	UserAgentConditionMatchTypeExact    UserAgentConditionMatchType = "Exact"
)

// Defines values for GetCustomPageSetsV1CustomPageSetsGetParamsOrdering.
const (
	GetCustomPageSetsV1CustomPageSetsGetParamsOrderingId        GetCustomPageSetsV1CustomPageSetsGetParamsOrdering = "id"
	GetCustomPageSetsV1CustomPageSetsGetParamsOrderingMinusId   GetCustomPageSetsV1CustomPageSetsGetParamsOrdering = "-id"
	GetCustomPageSetsV1CustomPageSetsGetParamsOrderingMinusName GetCustomPageSetsV1CustomPageSetsGetParamsOrdering = "-name"
	GetCustomPageSetsV1CustomPageSetsGetParamsOrderingName      GetCustomPageSetsV1CustomPageSetsGetParamsOrdering = "name"
)

// Defines values for GetDomainsV1DomainsGetParamsOrdering.
const (
	GetDomainsV1DomainsGetParamsOrderingCreatedAt      GetDomainsV1DomainsGetParamsOrdering = "created_at"
	GetDomainsV1DomainsGetParamsOrderingId             GetDomainsV1DomainsGetParamsOrdering = "id"
	GetDomainsV1DomainsGetParamsOrderingMinusCreatedAt GetDomainsV1DomainsGetParamsOrdering = "-created_at"
	GetDomainsV1DomainsGetParamsOrderingMinusId        GetDomainsV1DomainsGetParamsOrdering = "-id"
	GetDomainsV1DomainsGetParamsOrderingMinusName      GetDomainsV1DomainsGetParamsOrdering = "-name"
	GetDomainsV1DomainsGetParamsOrderingMinusStatus    GetDomainsV1DomainsGetParamsOrdering = "-status"
	GetDomainsV1DomainsGetParamsOrderingName           GetDomainsV1DomainsGetParamsOrdering = "name"
	GetDomainsV1DomainsGetParamsOrderingStatus         GetDomainsV1DomainsGetParamsOrdering = "status"
)

// Defines values for GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParamsPhase.
const (
	GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParamsPhaseAccess       GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParamsPhase = "access"
	GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParamsPhaseBodyFilter   GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParamsPhase = "body_filter"
	GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParamsPhaseHeaderFilter GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParamsPhase = "header_filter"
)

// Defines values for GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering.
const (
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingEndTime        GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "end_time"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingId             GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "id"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingMessage        GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "message"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingMinusEndTime   GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "-end_time"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingMinusId        GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "-id"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingMinusMessage   GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "-message"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingMinusStartTime GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "-start_time"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingMinusStatus    GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "-status"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingMinusType      GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "-type"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingStartTime      GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "start_time"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingStatus         GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "status"
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrderingType           GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering = "type"
)

// Defines values for GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering.
const (
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingApiVersion         GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "api_version"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingFirstDetected      GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "first_detected"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingHttpScheme         GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "http_scheme"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingId                 GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "id"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingLastDetected       GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "last_detected"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingMethod             GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "method"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingMinusApiVersion    GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "-api_version"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingMinusFirstDetected GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "-first_detected"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingMinusHttpScheme    GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "-http_scheme"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingMinusId            GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "-id"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingMinusLastDetected  GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "-last_detected"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingMinusMethod        GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "-method"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingMinusPath          GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "-path"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingMinusSource        GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "-source"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingMinusStatus        GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "-status"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingPath               GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "path"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingSource             GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "source"
	GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrderingStatus             GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering = "status"
)

// Defines values for GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrdering.
const (
	GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrderingEndTime        GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrdering = "end_time"
	GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrderingMinusEndTime   GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrdering = "-end_time"
	GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrderingMinusStartTime GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrdering = "-start_time"
	GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrderingStartTime      GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrdering = "start_time"
)

// Defines values for GetDdosInfoV1DomainsDomainIdDdosInfoGetParamsGroupBy.
const (
	GetDdosInfoV1DomainsDomainIdDdosInfoGetParamsGroupByIP        GetDdosInfoV1DomainsDomainIdDdosInfoGetParamsGroupBy = "IP"
	GetDdosInfoV1DomainsDomainIdDdosInfoGetParamsGroupByURL       GetDdosInfoV1DomainsDomainIdDdosInfoGetParamsGroupBy = "URL"
	GetDdosInfoV1DomainsDomainIdDdosInfoGetParamsGroupByUserAgent GetDdosInfoV1DomainsDomainIdDdosInfoGetParamsGroupBy = "User-Agent"
)

// Defines values for GetRequestsV1DomainsDomainIdRequestsGetParamsActions.
const (
	GetRequestsV1DomainsDomainIdRequestsGetParamsActionsAllow     GetRequestsV1DomainsDomainIdRequestsGetParamsActions = "allow"
	GetRequestsV1DomainsDomainIdRequestsGetParamsActionsBlock     GetRequestsV1DomainsDomainIdRequestsGetParamsActions = "block"
	GetRequestsV1DomainsDomainIdRequestsGetParamsActionsCaptcha   GetRequestsV1DomainsDomainIdRequestsGetParamsActions = "captcha"
	GetRequestsV1DomainsDomainIdRequestsGetParamsActionsHandshake GetRequestsV1DomainsDomainIdRequestsGetParamsActions = "handshake"
)

// Defines values for GetInsightTypesV1SecurityInsightsTypesGetParamsOrdering.
const (
	GetInsightTypesV1SecurityInsightsTypesGetParamsOrderingInsightFrequency      GetInsightTypesV1SecurityInsightsTypesGetParamsOrdering = "insight_frequency"
	GetInsightTypesV1SecurityInsightsTypesGetParamsOrderingMinusInsightFrequency GetInsightTypesV1SecurityInsightsTypesGetParamsOrdering = "-insight_frequency"
	GetInsightTypesV1SecurityInsightsTypesGetParamsOrderingMinusName             GetInsightTypesV1SecurityInsightsTypesGetParamsOrdering = "-name"
	GetInsightTypesV1SecurityInsightsTypesGetParamsOrderingMinusSlug             GetInsightTypesV1SecurityInsightsTypesGetParamsOrdering = "-slug"
	GetInsightTypesV1SecurityInsightsTypesGetParamsOrderingName                  GetInsightTypesV1SecurityInsightsTypesGetParamsOrdering = "name"
	GetInsightTypesV1SecurityInsightsTypesGetParamsOrderingSlug                  GetInsightTypesV1SecurityInsightsTypesGetParamsOrdering = "slug"
)

// Defines values for GetStatisticsSeriesV1StatisticsSeriesGetParamsGranularity.
const (
	GetStatisticsSeriesV1StatisticsSeriesGetParamsGranularityN1d GetStatisticsSeriesV1StatisticsSeriesGetParamsGranularity = "1d"
	GetStatisticsSeriesV1StatisticsSeriesGetParamsGranularityN1h GetStatisticsSeriesV1StatisticsSeriesGetParamsGranularity = "1h"
)

// Defines values for GetStatisticsSeriesV1StatisticsSeriesGetParamsMetrics.
const (
	GetStatisticsSeriesV1StatisticsSeriesGetParamsMetricsTotalBytes    GetStatisticsSeriesV1StatisticsSeriesGetParamsMetrics = "total_bytes"
	GetStatisticsSeriesV1StatisticsSeriesGetParamsMetricsTotalRequests GetStatisticsSeriesV1StatisticsSeriesGetParamsMetrics = "total_requests"
)

// APICompositeError defines model for APICompositeError.
type APICompositeError struct {
	// Detail A detailed human-readable explanation of the error.
	Detail *struct {
		// Embedded fields due to inline allOf schema
	} `json:"detail"`

	// Errors A list of detailed errors for individual fields.
	Errors []APIFieldError `json:"errors"`

	// Status The HTTP status code applicable to this error.
	Status int `json:"status"`

	// Title A brief, human-readable title for the error.
	Title string `json:"title"`

	// Type A URI identifier that categorizes the type of error.
	Type string `json:"type"`
}

// APIError defines model for APIError.
type APIError struct {
	// Detail A detailed human-readable explanation of the error.
	Detail *struct {
		// Embedded fields due to inline allOf schema
	} `json:"detail"`

	// Status The HTTP status code applicable to this error.
	Status int `json:"status"`

	// Title A brief, human-readable title for the error.
	Title string `json:"title"`

	// Type A URI identifier that categorizes the type of error.
	Type string `json:"type"`
}

// APIFieldError defines model for APIFieldError.
type APIFieldError struct {
	// Detail A human-readable message describing the error.
	Detail string `json:"detail"`

	// Loc The location of the field or a character number causing the error.
	Loc APIFieldError_Loc `json:"loc"`
}

// APIFieldErrorLoc0 defines model for .
type APIFieldErrorLoc0 = []APIFieldError_Loc_0_Item

// APIFieldErrorLoc00 defines model for .
type APIFieldErrorLoc00 = int

// APIFieldErrorLoc01 defines model for .
type APIFieldErrorLoc01 = string

// APIFieldError_Loc_0_Item defines model for APIFieldError.Loc.0.Item.
type APIFieldError_Loc_0_Item struct {
	union json.RawMessage
}

// APIFieldErrorLoc1 defines model for .
type APIFieldErrorLoc1 = interface{}

// APIFieldError_Loc The location of the field or a character number causing the error.
type APIFieldError_Loc struct {
	union json.RawMessage
}

// AdvancedRule A request to create a new advanced rule
type AdvancedRule struct {
	// Action The action that the rule takes when triggered
	Action struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleAction-Input)
		CustomerRuleActionInput `yaml:",inline"`
	} `json:"action"`

	// Description The description assigned to the rule
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Enabled Whether or not the rule is enabled
	Enabled bool `json:"enabled"`

	// Name The name assigned to the rule
	Name string `json:"name"`

	// Phase The WAAP request/response phase for applying the rule. Default is "access".
	//
	//
	// The "access" phase is responsible for modifying the request before it is sent to the origin server.
	//
	// The "header_filter" phase is responsible for modifying the HTTP headers of a response before they are sent back to the client.
	//
	// The "body_filter" phase is responsible for modifying the body of a response before it is sent back to the client.
	Phase *struct {
		// Embedded fields due to inline allOf schema
	} `json:"phase"`

	// Source A CEL syntax expression that contains the rule's conditions. Allowed objects are: request, whois, session, response, tags, user_defined_tags, user_agent, client_data.
	//
	// More info can be found here: https://gcore.com/docs/waap/waap-rules/advanced-rules
	Source string `json:"source"`
}

// AdvancedRuleDescriptor Advanced rules descriptor object
type AdvancedRuleDescriptor struct {
	// Attrs The object's attributes list
	Attrs *struct {
		// Embedded fields due to inline allOf schema
	} `json:"attrs"`

	// Description The object's description
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Name The object's name
	Name string `json:"name"`

	// Type The object's type
	Type string `json:"type"`
}

// AdvancedRuleDescriptorArg An argument of a descriptor's object
type AdvancedRuleDescriptorArg struct {
	// Description The argument's description
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Name The argument's name
	Name string `json:"name"`

	// Type The argument's type
	Type string `json:"type"`
}

// AdvancedRuleDescriptorAttr An attribute of a descriptor's object
type AdvancedRuleDescriptorAttr struct {
	// Args A list of arguments for the attribute
	Args *struct {
		// Embedded fields due to inline allOf schema
	} `json:"args"`

	// Description The attribute's description
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Hint The attribute's hint
	Hint *struct {
		// Embedded fields due to inline allOf schema
	} `json:"hint"`

	// Name The attribute's name
	Name string `json:"name"`

	// Type The attribute's type
	Type string `json:"type"`
}

// AdvancedRuleDescriptorResponse A response from a request to retrieve an advanced rules descriptor
type AdvancedRuleDescriptorResponse struct {
	Objects *struct {
		// Embedded fields due to inline allOf schema
	} `json:"objects"`

	// Version The descriptor's version
	Version string `json:"version"`
}

// AdvancedRuleResponse An advanced WAAP rule applied to a domain
type AdvancedRuleResponse struct {
	// Action The action that the rule takes when triggered
	Action struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleAction-Output)
		CustomerRuleActionOutput `yaml:",inline"`
	} `json:"action"`

	// Description The description assigned to the rule
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Enabled Whether or not the rule is enabled
	Enabled bool `json:"enabled"`

	// Id The unique identifier for the rule
	Id int `json:"id"`

	// Name The name assigned to the rule
	Name string `json:"name"`

	// Phase The WAAP request/response phase for applying the rule. Default is "access".
	//
	//
	// The "access" phase is responsible for modifying the request before it is sent to the origin server.
	//
	// The "header_filter" phase is responsible for modifying the HTTP headers of a response before they are sent back to the client.
	//
	// The "body_filter" phase is responsible for modifying the body of a response before it is sent back to the client.
	Phase *struct {
		// Embedded fields due to inline allOf schema
	} `json:"phase"`

	// Source A CEL syntax expression that contains the rule's conditions. Allowed objects are: request, whois, session, response, tags, user_defined_tags, user_agent, client_data.
	//
	// More info can be found here: https://gcore.com/docs/waap/waap-rules/advanced-rules
	Source string `json:"source"`
}

// ApiDiscoverySettings Response model for the API discovery settings
type ApiDiscoverySettings struct {
	// DescriptionFileLocation The URL of the API description file. This will be periodically scanned if `descriptionFileScanEnabled` is enabled. Supported formats are YAML and JSON, and it must adhere to OpenAPI versions 2, 3, or 3.1.
	DescriptionFileLocation *struct {
		// Embedded fields due to inline allOf schema
	} `json:"descriptionFileLocation"`

	// DescriptionFileScanEnabled Indicates if periodic scan of the description file is enabled
	DescriptionFileScanEnabled *struct {
		// Embedded fields due to inline allOf schema
	} `json:"descriptionFileScanEnabled"`

	// DescriptionFileScanIntervalHours The interval in hours for scanning the description file
	DescriptionFileScanIntervalHours *struct {
		// Embedded fields due to inline allOf schema
	} `json:"descriptionFileScanIntervalHours"`

	// TrafficScanEnabled Indicates if traffic scan is enabled. Traffic scan is used to discover undocumented APIs
	TrafficScanEnabled *struct {
		// Embedded fields due to inline allOf schema
	} `json:"trafficScanEnabled"`

	// TrafficScanIntervalHours The interval in hours for scanning the traffic
	TrafficScanIntervalHours *struct {
		// Embedded fields due to inline allOf schema
	} `json:"trafficScanIntervalHours"`
}

// ApiPathGroups Response model for the API path groups
type ApiPathGroups struct {
	// ApiPathGroups An array of api groups associated with the API path
	ApiPathGroups []string `json:"api_path_groups"`
}

// ApiPathHttpScheme The different HTTP schemes an API path can have
type ApiPathHttpScheme string

// ApiPathMethod The different methods an API path can have
type ApiPathMethod string

// ApiPathResponse Response model for the API path
type ApiPathResponse struct {
	// ApiGroups An array of api groups associated with the API path
	ApiGroups []string `json:"api_groups"`

	// ApiVersion The API version
	ApiVersion string `json:"api_version"`

	// FirstDetected The date and time in ISO 8601 format the API path was first detected.
	FirstDetected time.Time `json:"first_detected"`

	// HttpScheme The HTTP version of the API path
	HttpScheme struct {
		// Embedded struct due to allOf(#/components/schemas/ApiPathHttpScheme)
		ApiPathHttpScheme `yaml:",inline"`
	} `json:"http_scheme"`

	// Id The path ID
	Id openapi_types.UUID `json:"id"`

	// LastDetected The date and time in ISO 8601 format the API path was last detected.
	LastDetected time.Time `json:"last_detected"`

	// Method The API RESTful method
	Method struct {
		// Embedded struct due to allOf(#/components/schemas/ApiPathMethod)
		ApiPathMethod `yaml:",inline"`
	} `json:"method"`

	// Path The API path, locations that are saved for resource IDs will be put in curly brackets
	Path string `json:"path"`

	// RequestCount The number of requests for this path in the last 24 hours
	RequestCount int `json:"request_count"`

	// Source The source of the discovered API
	Source struct {
		// Embedded struct due to allOf(#/components/schemas/ApiPathSource)
		ApiPathSource `yaml:",inline"`
	} `json:"source"`

	// Status The status of the discovered API path
	Status struct {
		// Embedded struct due to allOf(#/components/schemas/ApiPathStatus)
		ApiPathStatus `yaml:",inline"`
	} `json:"status"`

	// Tags An array of tags associated with the API path
	Tags []string `json:"tags"`
}

// ApiPathSource The different sources an API path can have
type ApiPathSource string

// ApiPathStatus The different statuses an API path can have
type ApiPathStatus string

// ApiScanResult The result of a scan
type ApiScanResult struct {
	// EndTime The date and time the scan ended
	EndTime *struct {
		// Embedded fields due to inline allOf schema
	} `json:"end_time"`

	// Id The scan ID
	Id openapi_types.UUID `json:"id"`

	// Message The message associated with the scan
	Message string `json:"message"`

	// StartTime The date and time the scan started
	StartTime time.Time `json:"start_time"`

	// Status The status of the scan
	Status struct {
		// Embedded struct due to allOf(#/components/schemas/TaskResultStatus)
		TaskResultStatus `yaml:",inline"`
	} `json:"status"`

	// Type The type of scan
	Type struct {
		// Embedded struct due to allOf(#/components/schemas/ApiScanType)
		ApiScanType `yaml:",inline"`
	} `json:"type"`
}

// ApiScanType The different types of scans that can be performed
type ApiScanType string

// ApiSpecFile Request model for uploading an API spec file
type ApiSpecFile struct {
	// FileData Base64 representation of the description file. Supported formats are YAML and JSON, and it must adhere to OpenAPI versions 2, 3, or 3.1.
	FileData string `json:"file_data"`

	// FileName The name of the file
	FileName string `json:"file_name"`
}

// BlockCsrfPageData defines model for BlockCsrfPageData.
type BlockCsrfPageData struct {
	// Enabled Indicates whether the custom custom page is active or inactive
	Enabled bool `json:"enabled"`

	// Header The text to display in the header of the custom page
	Header *string `json:"header,omitempty"`

	// Logo Supported image types are JPEG, PNG and JPG, size is limited to width 450px, height 130px. This should be a base 64 encoding of the full HTML img tag compatible image, with the header included.
	Logo *string `json:"logo,omitempty"`

	// Text The text to display in the body of the custom page
	Text *string `json:"text,omitempty"`

	// Title The text to display in the title of the custom page
	Title *string `json:"title,omitempty"`
}

// BlockPageData defines model for BlockPageData.
type BlockPageData struct {
	// Enabled Indicates whether the custom custom page is active or inactive
	Enabled bool `json:"enabled"`

	// Header The text to display in the header of the custom page
	Header *string `json:"header,omitempty"`

	// Logo Supported image types are JPEG, PNG and JPG, size is limited to width 450px, height 130px. This should be a base 64 encoding of the full HTML img tag compatible image, with the header included.
	Logo *string `json:"logo,omitempty"`

	// Text The text to display in the body of the custom page
	Text *string `json:"text,omitempty"`

	// Title The text to display in the title of the custom page
	Title *string `json:"title,omitempty"`
}

// Blocked A collection of total numbers of events with blocked results per criteria
type Blocked struct {
	// Action A collection of event counts per action. The first item is the action's abbreviation/full action name, and the second item is the number of events
	Action [][]Blocked_Action_Item `json:"action"`

	// Country A collection of event counts per country of origin. The first item is the country's ISO 3166-1 alpha-2, and the second item is the number of events
	Country [][]Blocked_Country_Item `json:"country"`

	// Org A collection of event counts per organization that owns the event's client IP. The first item is the organization's name, and the second item is the number of events
	Org [][]Blocked_Org_Item `json:"org"`

	// RuleName A collection of event counts per rule that triggered the event. The first item is the rule's name, and the second item is the number of events
	RuleName [][]Blocked_RuleName_Item `json:"rule_name"`
}

// BlockedAction0 defines model for .
type BlockedAction0 = string

// BlockedAction1 defines model for .
type BlockedAction1 = int

// Blocked_Action_Item defines model for Blocked.action.Item.
type Blocked_Action_Item struct {
	union json.RawMessage
}

// BlockedCountry0 defines model for .
type BlockedCountry0 = string

// BlockedCountry1 defines model for .
type BlockedCountry1 = int

// Blocked_Country_Item defines model for Blocked.country.Item.
type Blocked_Country_Item struct {
	union json.RawMessage
}

// BlockedOrg0 defines model for .
type BlockedOrg0 = string

// BlockedOrg1 defines model for .
type BlockedOrg1 = int

// Blocked_Org_Item defines model for Blocked.org.Item.
type Blocked_Org_Item struct {
	union json.RawMessage
}

// BlockedRuleName0 defines model for .
type BlockedRuleName0 = string

// BlockedRuleName1 defines model for .
type BlockedRuleName1 = int

// Blocked_RuleName_Item defines model for Blocked.rule_name.Item.
type Blocked_RuleName_Item struct {
	union json.RawMessage
}

// CaptchaPageData defines model for CaptchaPageData.
type CaptchaPageData struct {
	// Enabled Indicates whether the custom custom page is active or inactive
	Enabled bool `json:"enabled"`

	// Error Error message
	Error *string `json:"error,omitempty"`

	// Header The text to display in the header of the custom page
	Header *string `json:"header,omitempty"`

	// Logo Supported image types are JPEG, PNG and JPG, size is limited to width 450px, height 130px. This should be a base 64 encoding of the full HTML img tag compatible image, with the header included.
	Logo *string `json:"logo,omitempty"`

	// Text The text to display in the body of the custom page
	Text *string `json:"text,omitempty"`

	// Title The text to display in the title of the custom page
	Title *string `json:"title,omitempty"`
}

// ClientInfo Represents the WAAP service information for a client
type ClientInfo struct {
	// Features List of enabled features
	Features []string `json:"features"`

	// Id The client ID
	Id *struct {
		// Embedded fields due to inline allOf schema
	} `json:"id"`

	// Quotas Quotas for the client
	Quotas map[string]QuotaItem `json:"quotas"`

	// Service Information about the WAAP service status
	Service struct {
		// Embedded struct due to allOf(#/components/schemas/Service)
		Service `yaml:",inline"`
	} `json:"service"`
}

// CommonTag Common tag details
type CommonTag struct {
	// Description Tag description information
	Description string `json:"description"`

	// DisplayName The tag's display name
	DisplayName string `json:"display_name"`

	// Tag Tag name
	Tag string `json:"tag"`
}

// ContentTypeCondition Match the requested Content-Type
type ContentTypeCondition struct {
	// ContentType The list of content types to match against
	ContentType []string `json:"content_type"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`
}

// CookieDisabledPageData defines model for CookieDisabledPageData.
type CookieDisabledPageData struct {
	// Enabled Indicates whether the custom custom page is active or inactive
	Enabled bool `json:"enabled"`

	// Header The text to display in the header of the custom page
	Header *string `json:"header,omitempty"`

	// Text The text to display in the body of the custom page
	Text *string `json:"text,omitempty"`
}

// Count A collection of total numbers of events per criteria
type Count struct {
	// Action A collection of event counts per action. The first item is the action's abbreviation/full action name, and the second item is the number of events
	Action [][]Count_Action_Item `json:"action"`

	// Country A collection of event counts per country of origin. The first item is the country's ISO 3166-1 alpha-2, and the second item is the number of events
	Country [][]Count_Country_Item `json:"country"`

	// Org A collection of event counts per organization that owns the event's client IP. The first item is the organization's name, and the second item is the number of events
	Org [][]Count_Org_Item `json:"org"`

	// RuleName A collection of event counts per rule that triggered the event. The first item is the rule's name, and the second item is the number of events
	RuleName [][]Count_RuleName_Item `json:"rule_name"`
}

// CountAction0 defines model for .
type CountAction0 = string

// CountAction1 defines model for .
type CountAction1 = int

// Count_Action_Item defines model for Count.action.Item.
type Count_Action_Item struct {
	union json.RawMessage
}

// CountCountry0 defines model for .
type CountCountry0 = string

// CountCountry1 defines model for .
type CountCountry1 = int

// Count_Country_Item defines model for Count.country.Item.
type Count_Country_Item struct {
	union json.RawMessage
}

// CountOrg0 defines model for .
type CountOrg0 = string

// CountOrg1 defines model for .
type CountOrg1 = int

// Count_Org_Item defines model for Count.org.Item.
type Count_Org_Item struct {
	union json.RawMessage
}

// CountRuleName0 defines model for .
type CountRuleName0 = string

// CountRuleName1 defines model for .
type CountRuleName1 = int

// Count_RuleName_Item defines model for Count.rule_name.Item.
type Count_RuleName_Item struct {
	union json.RawMessage
}

// CountryCondition Match the country that the request originated from
type CountryCondition struct {
	// CountryCode A list of ISO 3166-1 alpha-2 formatted strings representing the countries to match against
	CountryCode []string `json:"country_code"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`
}

// CreateApiPath Request model for creating an API path
type CreateApiPath struct {
	// ApiGroups An array of api groups associated with the API path
	ApiGroups *[]string `json:"api_groups,omitempty"`

	// ApiVersion The API version
	ApiVersion *string `json:"api_version,omitempty"`

	// HttpScheme The different HTTP schemes an API path can have
	HttpScheme ApiPathHttpScheme `json:"http_scheme"`

	// Method The different methods an API path can have
	Method ApiPathMethod `json:"method"`

	// Path The API path, locations that are saved for resource IDs will be put in curly brackets
	Path string `json:"path"`

	// Tags An array of tags associated with the API path
	Tags *[]string `json:"tags,omitempty"`
}

// CreateInsightSilencePayload defines model for CreateInsightSilencePayload.
type CreateInsightSilencePayload struct {
	// Author The author of the silence
	Author string `json:"author"`

	// Comment A comment explaining the reason for the silence
	Comment string `json:"comment"`

	// ExpireAt The date and time the silence expires in ISO 8601 format
	ExpireAt *struct {
		// Embedded fields due to inline allOf schema
	} `json:"expire_at"`

	// InsightType The slug of the insight type
	InsightType string `json:"insight_type"`

	// Labels A hash table of label names and values that apply to the insight silence
	Labels map[string]string `json:"labels"`
}

// CustomPagePreviewResponse defines model for CustomPagePreviewResponse.
type CustomPagePreviewResponse struct {
	// Html HTML content of the custom page
	Html string `json:"html"`
}

// CustomPageSetCreate Create a custom page set
type CustomPageSetCreate struct {
	Block *struct {
		// Embedded struct due to allOf(#/components/schemas/BlockPageData)
		BlockPageData `yaml:",inline"`
	} `json:"block"`
	BlockCsrf *struct {
		// Embedded struct due to allOf(#/components/schemas/BlockCsrfPageData)
		BlockCsrfPageData `yaml:",inline"`
	} `json:"block_csrf"`
	Captcha *struct {
		// Embedded struct due to allOf(#/components/schemas/CaptchaPageData)
		CaptchaPageData `yaml:",inline"`
	} `json:"captcha"`
	CookieDisabled *struct {
		// Embedded struct due to allOf(#/components/schemas/CookieDisabledPageData)
		CookieDisabledPageData `yaml:",inline"`
	} `json:"cookie_disabled"`

	// Domains List of domain IDs that are associated with this page set
	Domains *struct {
		// Embedded fields due to inline allOf schema
	} `json:"domains"`
	Handshake *struct {
		// Embedded struct due to allOf(#/components/schemas/HandshakePageData)
		HandshakePageData `yaml:",inline"`
	} `json:"handshake"`
	JavascriptDisabled *struct {
		// Embedded struct due to allOf(#/components/schemas/JavascriptDisabledPageData)
		JavascriptDisabledPageData `yaml:",inline"`
	} `json:"javascript_disabled"`

	// Name Name of the custom page set
	Name string `json:"name"`
}

// CustomPageSetResponse defines model for CustomPageSetResponse.
type CustomPageSetResponse struct {
	Block *struct {
		// Embedded struct due to allOf(#/components/schemas/BlockPageData)
		BlockPageData `yaml:",inline"`
	} `json:"block"`
	BlockCsrf *struct {
		// Embedded struct due to allOf(#/components/schemas/BlockCsrfPageData)
		BlockCsrfPageData `yaml:",inline"`
	} `json:"block_csrf"`
	Captcha *struct {
		// Embedded struct due to allOf(#/components/schemas/CaptchaPageData)
		CaptchaPageData `yaml:",inline"`
	} `json:"captcha"`
	CookieDisabled *struct {
		// Embedded struct due to allOf(#/components/schemas/CookieDisabledPageData)
		CookieDisabledPageData `yaml:",inline"`
	} `json:"cookie_disabled"`

	// Domains List of domain IDs that are associated with this page set
	Domains *struct {
		// Embedded fields due to inline allOf schema
	} `json:"domains"`
	Handshake *struct {
		// Embedded struct due to allOf(#/components/schemas/HandshakePageData)
		HandshakePageData `yaml:",inline"`
	} `json:"handshake"`

	// Id The ID of the custom page set
	Id                 int `json:"id"`
	JavascriptDisabled *struct {
		// Embedded struct due to allOf(#/components/schemas/JavascriptDisabledPageData)
		JavascriptDisabledPageData `yaml:",inline"`
	} `json:"javascript_disabled"`

	// Name Name of the custom page set
	Name string `json:"name"`
}

// CustomPageSetUpdate Update a custom page set
type CustomPageSetUpdate struct {
	Block *struct {
		// Embedded struct due to allOf(#/components/schemas/BlockPageData)
		BlockPageData `yaml:",inline"`
	} `json:"block"`
	BlockCsrf *struct {
		// Embedded struct due to allOf(#/components/schemas/BlockCsrfPageData)
		BlockCsrfPageData `yaml:",inline"`
	} `json:"block_csrf"`
	Captcha *struct {
		// Embedded struct due to allOf(#/components/schemas/CaptchaPageData)
		CaptchaPageData `yaml:",inline"`
	} `json:"captcha"`
	CookieDisabled *struct {
		// Embedded struct due to allOf(#/components/schemas/CookieDisabledPageData)
		CookieDisabledPageData `yaml:",inline"`
	} `json:"cookie_disabled"`

	// Domains List of domain IDs that are associated with this page set
	Domains *struct {
		// Embedded fields due to inline allOf schema
	} `json:"domains"`
	Handshake *struct {
		// Embedded struct due to allOf(#/components/schemas/HandshakePageData)
		HandshakePageData `yaml:",inline"`
	} `json:"handshake"`
	JavascriptDisabled *struct {
		// Embedded struct due to allOf(#/components/schemas/JavascriptDisabledPageData)
		JavascriptDisabledPageData `yaml:",inline"`
	} `json:"javascript_disabled"`

	// Name Name of the custom page set
	Name *struct {
		// Embedded fields due to inline allOf schema
	} `json:"name"`
}

// CustomRule A request to create a new WAAP rule
type CustomRule struct {
	// Action The action that the rule takes when triggered
	Action struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleAction-Input)
		CustomerRuleActionInput `yaml:",inline"`
	} `json:"action"`

	// Conditions The conditions required for the WAAP engine to trigger the rule. Rules may have between 1 and 5 conditions. All conditions must pass for the rule to trigger
	Conditions []CustomRuleConditionInput `json:"conditions"`

	// Description The description assigned to the rule
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Enabled Whether or not the rule is enabled
	Enabled bool `json:"enabled"`

	// Name The name assigned to the rule
	Name string `json:"name"`
}

// CustomRuleConditionInput The criteria of an incoming web request and the models of the various values those criteria can take
type CustomRuleConditionInput struct {
	ContentType *struct {
		// Embedded struct due to allOf(#/components/schemas/ContentTypeCondition)
		ContentTypeCondition `yaml:",inline"`
	} `json:"content_type"`
	Country *struct {
		// Embedded struct due to allOf(#/components/schemas/CountryCondition)
		CountryCondition `yaml:",inline"`
	} `json:"country"`
	FileExtension *struct {
		// Embedded struct due to allOf(#/components/schemas/FileExtensionCondition)
		FileExtensionCondition `yaml:",inline"`
	} `json:"file_extension"`
	Header *struct {
		// Embedded struct due to allOf(#/components/schemas/HeaderCondition)
		HeaderCondition `yaml:",inline"`
	} `json:"header"`
	HeaderExists *struct {
		// Embedded struct due to allOf(#/components/schemas/HeaderExistsCondition)
		HeaderExistsCondition `yaml:",inline"`
	} `json:"header_exists"`
	HttpMethod *struct {
		// Embedded struct due to allOf(#/components/schemas/HttpMethodCondition)
		HttpMethodCondition `yaml:",inline"`
	} `json:"http_method"`
	Ip *struct {
		// Embedded struct due to allOf(#/components/schemas/IpCondition)
		IpCondition `yaml:",inline"`
	} `json:"ip"`
	IpRange *struct {
		// Embedded struct due to allOf(#/components/schemas/IpRangeCondition)
		IpRangeCondition `yaml:",inline"`
	} `json:"ip_range"`
	Organization *struct {
		// Embedded struct due to allOf(#/components/schemas/OrganizationCondition)
		OrganizationCondition `yaml:",inline"`
	} `json:"organization"`
	OwnerTypes *struct {
		// Embedded struct due to allOf(#/components/schemas/OwnerTypesCondition)
		OwnerTypesCondition `yaml:",inline"`
	} `json:"owner_types"`
	RequestRate *struct {
		// Embedded struct due to allOf(#/components/schemas/RequestRateCondition)
		RequestRateCondition `yaml:",inline"`
	} `json:"request_rate"`
	ResponseHeader *struct {
		// Embedded struct due to allOf(#/components/schemas/ResponseHeaderCondition)
		ResponseHeaderCondition `yaml:",inline"`
	} `json:"response_header"`
	ResponseHeaderExists *struct {
		// Embedded struct due to allOf(#/components/schemas/ResponseHeaderExistsCondition)
		ResponseHeaderExistsCondition `yaml:",inline"`
	} `json:"response_header_exists"`
	SessionRequestCount *struct {
		// Embedded struct due to allOf(#/components/schemas/SessionRequestCountCondition)
		SessionRequestCountCondition `yaml:",inline"`
	} `json:"session_request_count"`
	Tags *struct {
		// Embedded struct due to allOf(#/components/schemas/TagsCondition)
		TagsCondition `yaml:",inline"`
	} `json:"tags"`
	Url *struct {
		// Embedded struct due to allOf(#/components/schemas/UrlCondition)
		UrlCondition `yaml:",inline"`
	} `json:"url"`
	UserAgent *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAgentCondition)
		UserAgentCondition `yaml:",inline"`
	} `json:"user_agent"`
	UserDefinedTags *struct {
		// Embedded struct due to allOf(#/components/schemas/UserDefinedTagsCondition)
		UserDefinedTagsCondition `yaml:",inline"`
	} `json:"user_defined_tags"`
}

// CustomRuleConditionOutput The criteria of an incoming web request and the models of the various values those criteria can take
type CustomRuleConditionOutput struct {
	ContentType *struct {
		// Embedded struct due to allOf(#/components/schemas/ContentTypeCondition)
		ContentTypeCondition `yaml:",inline"`
	} `json:"content_type"`
	Country *struct {
		// Embedded struct due to allOf(#/components/schemas/CountryCondition)
		CountryCondition `yaml:",inline"`
	} `json:"country"`
	FileExtension *struct {
		// Embedded struct due to allOf(#/components/schemas/FileExtensionCondition)
		FileExtensionCondition `yaml:",inline"`
	} `json:"file_extension"`
	Header *struct {
		// Embedded struct due to allOf(#/components/schemas/HeaderCondition)
		HeaderCondition `yaml:",inline"`
	} `json:"header"`
	HeaderExists *struct {
		// Embedded struct due to allOf(#/components/schemas/HeaderExistsCondition)
		HeaderExistsCondition `yaml:",inline"`
	} `json:"header_exists"`
	HttpMethod *struct {
		// Embedded struct due to allOf(#/components/schemas/HttpMethodCondition)
		HttpMethodCondition `yaml:",inline"`
	} `json:"http_method"`
	Ip *struct {
		// Embedded struct due to allOf(#/components/schemas/IpCondition)
		IpCondition `yaml:",inline"`
	} `json:"ip"`
	IpRange *struct {
		// Embedded struct due to allOf(#/components/schemas/IpRangeCondition)
		IpRangeCondition `yaml:",inline"`
	} `json:"ip_range"`
	Organization *struct {
		// Embedded struct due to allOf(#/components/schemas/OrganizationCondition)
		OrganizationCondition `yaml:",inline"`
	} `json:"organization"`
	OwnerTypes *struct {
		// Embedded struct due to allOf(#/components/schemas/OwnerTypesCondition)
		OwnerTypesCondition `yaml:",inline"`
	} `json:"owner_types"`
	RequestRate *struct {
		// Embedded struct due to allOf(#/components/schemas/RequestRateCondition)
		RequestRateCondition `yaml:",inline"`
	} `json:"request_rate"`
	ResponseHeader *struct {
		// Embedded struct due to allOf(#/components/schemas/ResponseHeaderCondition)
		ResponseHeaderCondition `yaml:",inline"`
	} `json:"response_header"`
	ResponseHeaderExists *struct {
		// Embedded struct due to allOf(#/components/schemas/ResponseHeaderExistsCondition)
		ResponseHeaderExistsCondition `yaml:",inline"`
	} `json:"response_header_exists"`
	SessionRequestCount *struct {
		// Embedded struct due to allOf(#/components/schemas/SessionRequestCountCondition)
		SessionRequestCountCondition `yaml:",inline"`
	} `json:"session_request_count"`
	Tags *struct {
		// Embedded struct due to allOf(#/components/schemas/TagsCondition)
		TagsCondition `yaml:",inline"`
	} `json:"tags"`
	Url *struct {
		// Embedded struct due to allOf(#/components/schemas/UrlCondition)
		UrlCondition `yaml:",inline"`
	} `json:"url"`
	UserAgent *struct {
		// Embedded struct due to allOf(#/components/schemas/UserAgentCondition)
		UserAgentCondition `yaml:",inline"`
	} `json:"user_agent"`
	UserDefinedTags *struct {
		// Embedded struct due to allOf(#/components/schemas/UserDefinedTagsCondition)
		UserDefinedTagsCondition `yaml:",inline"`
	} `json:"user_defined_tags"`
}

// CustomRuleResponse An WAAP rule applied to a domain
type CustomRuleResponse struct {
	// Action The action that the rule takes when triggered
	Action struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleAction-Output)
		CustomerRuleActionOutput `yaml:",inline"`
	} `json:"action"`

	// Conditions The conditions required for the WAAP engine to trigger the rule. Rules may have between 1 and 5 conditions. All conditions must pass for the rule to trigger
	Conditions []CustomRuleConditionOutput `json:"conditions"`

	// Description The description assigned to the rule
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Enabled Whether or not the rule is enabled
	Enabled bool `json:"enabled"`

	// Id The unique identifier for the rule
	Id int `json:"id"`

	// Name The name assigned to the rule
	Name string `json:"name"`
}

// CustomerRuleActionInput The action that a WAAP rule takes when triggered
type CustomerRuleActionInput struct {
	Allow *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleAllowAction)
		RuleAllowAction `yaml:",inline"`
	} `json:"allow"`
	Block *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleBlockAction)
		RuleBlockAction `yaml:",inline"`
	} `json:"block"`
	Captcha *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleCaptchaAction)
		RuleCaptchaAction `yaml:",inline"`
	} `json:"captcha"`
	Handshake *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleHandshakeAction)
		RuleHandshakeAction `yaml:",inline"`
	} `json:"handshake"`
	Monitor *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleMonitorAction)
		RuleMonitorAction `yaml:",inline"`
	} `json:"monitor"`
	Tag *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleTagAction)
		RuleTagAction `yaml:",inline"`
	} `json:"tag"`
}

// CustomerRuleActionOutput The action that a WAAP rule takes when triggered
type CustomerRuleActionOutput struct {
	Allow *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleAllowAction)
		RuleAllowAction `yaml:",inline"`
	} `json:"allow"`
	Block *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleBlockAction)
		RuleBlockAction `yaml:",inline"`
	} `json:"block"`
	Captcha *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleCaptchaAction)
		RuleCaptchaAction `yaml:",inline"`
	} `json:"captcha"`
	Handshake *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleHandshakeAction)
		RuleHandshakeAction `yaml:",inline"`
	} `json:"handshake"`
	Monitor *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleMonitorAction)
		RuleMonitorAction `yaml:",inline"`
	} `json:"monitor"`
	Tag *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleTagAction)
		RuleTagAction `yaml:",inline"`
	} `json:"tag"`
}

// CustomerRuleState defines model for CustomerRuleState.
type CustomerRuleState string

// DdosAttack defines model for DdosAttack.
type DdosAttack struct {
	// EndTime End time of DDoS attack
	EndTime *struct {
		// Embedded fields due to inline allOf schema
	} `json:"end_time"`

	// StartTime Start time of DDoS attack
	StartTime *time.Time `json:"start_time,omitempty"`
}

// DdosInfo defines model for DdosInfo.
type DdosInfo struct {
	// Count The number of requests made
	Count int `json:"count"`

	// Identity The value for the grouped by type
	Identity string       `json:"identity"`
	Type     DdosInfoType `json:"type"`
}

// DdosInfoType defines model for DdosInfo.Type.
type DdosInfoType string

// DetailedDomainResponse Represents a WAAP domain, serving as a singular unit within the WAAP
// service.
//
// Each domain functions autonomously, possessing its own set of rules and
// configurations to manage web application firewall settings and
// behaviors.
type DetailedDomainResponse struct {
	// CreatedAt The date and time the domain was created in ISO 8601 format
	CreatedAt     time.Time `json:"created_at"`
	CustomPageSet *struct {
		// Embedded fields due to inline allOf schema
	} `json:"custom_page_set"`

	// Id The domain ID
	Id int `json:"id"`

	// Name The domain name
	Name string `json:"name"`

	// Quotas Domain level quotas
	Quotas *struct {
		// Embedded fields due to inline allOf schema
	} `json:"quotas"`

	// Status The different statuses a domain can have
	Status DomainStatus `json:"status"`
}

// DomainDdosSettings DDoS settings for a domain.
type DomainDdosSettings struct {
	// BurstThreshold The burst threshold detects sudden rises in traffic. If it is met and the number of requests is at least five times the last 2-second interval, DDoS protection will activate. Default is 1000.
	BurstThreshold *int `json:"burst_threshold,omitempty"`

	// GlobalThreshold The global threshold is responsible for identifying DDoS attacks with a slow rise in traffic. If the threshold is met and the current number of requests is at least double that of the previous 10-second window, DDoS protection will activate. Default is 5000.
	GlobalThreshold *int `json:"global_threshold,omitempty"`

	// SubSecondThreshold The sub-second threshold protects WAAP servers against attacks from traffic bursts. When this threshold is reached, the DDoS mode will activate on the affected WAAP server, not the whole WAAP cluster. Default is 50.
	SubSecondThreshold *int `json:"sub_second_threshold,omitempty"`
}

// DomainPolicy Represents a configurable WAAP security rule, also known as a policy.
type DomainPolicy struct {
	// Action Specifies the action taken by the WAAP upon rule activation
	Action struct {
		// Embedded struct due to allOf(#/components/schemas/PolicyAction)
		PolicyAction `yaml:",inline"`
	} `json:"action"`

	// Description Detailed description of the security rule
	Description string `json:"description"`

	// Group The rule set group name to which the rule belongs
	Group string `json:"group"`

	// Id Unique identifier for the security rule
	Id string `json:"id"`

	// Mode Indicates if the security rule is active
	Mode bool `json:"mode"`

	// Name Name of the security rule
	Name string `json:"name"`

	// RuleSetId Identifier of the rule set to which the rule belongs
	RuleSetId int `json:"rule_set_id"`
}

// DomainSettings Settings for a domain.
type DomainSettings struct {
	// Api API settings of a domain
	Api AppModelsDomainSettingsApiUrls `json:"api"`

	// Ddos DDoS settings for a domain.
	Ddos DomainDdosSettings `json:"ddos"`
}

// DomainStatus The different statuses a domain can have
type DomainStatus string

// DomainUpdateStatus Domain statuses that can be used when updating a domain
type DomainUpdateStatus string

// EventStatistics A collection of event metrics over a time span
type EventStatistics struct {
	// Blocked A collection of total numbers of events with blocked results per criteria
	Blocked Blocked `json:"blocked"`

	// Count A collection of total numbers of events per criteria
	Count Count `json:"count"`
}

// FileExtensionCondition Match the incoming file extension
type FileExtensionCondition struct {
	// FileExtension The list of file extensions to match against
	FileExtension []string `json:"file_extension"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`
}

// FirewallRule defines model for FirewallRule.
type FirewallRule struct {
	// Action The action that the rule takes when triggered
	Action struct {
		// Embedded struct due to allOf(#/components/schemas/FirewallRuleAction-Input)
		FirewallRuleActionInput `yaml:",inline"`
	} `json:"action"`

	// Conditions The condition required for the WAAP engine to trigger the rule.
	Conditions []FirewallRuleCondition `json:"conditions"`

	// Description The description assigned to the rule
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Enabled Whether or not the rule is enabled
	Enabled bool `json:"enabled"`

	// Name The name assigned to the rule
	Name string `json:"name"`
}

// FirewallRuleActionInput The action that a firewall rule takes when triggered
type FirewallRuleActionInput struct {
	Allow *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleAllowAction)
		RuleAllowAction `yaml:",inline"`
	} `json:"allow"`
	Block *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleBlockAction)
		RuleBlockAction `yaml:",inline"`
	} `json:"block"`
}

// FirewallRuleActionOutput The action that a firewall rule takes when triggered
type FirewallRuleActionOutput struct {
	Allow *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleAllowAction)
		RuleAllowAction `yaml:",inline"`
	} `json:"allow"`
	Block *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleBlockAction)
		RuleBlockAction `yaml:",inline"`
	} `json:"block"`
}

// FirewallRuleCondition The criteria of an incoming web request and the models of the various values those criteria can take
type FirewallRuleCondition struct {
	Ip *struct {
		// Embedded struct due to allOf(#/components/schemas/IpCondition)
		IpCondition `yaml:",inline"`
	} `json:"ip"`
	IpRange *struct {
		// Embedded struct due to allOf(#/components/schemas/IpRangeCondition)
		IpRangeCondition `yaml:",inline"`
	} `json:"ip_range"`
}

// FirewallRuleResponse defines model for FirewallRuleResponse.
type FirewallRuleResponse struct {
	// Action The action that the rule takes when triggered
	Action struct {
		// Embedded struct due to allOf(#/components/schemas/FirewallRuleAction-Output)
		FirewallRuleActionOutput `yaml:",inline"`
	} `json:"action"`

	// Conditions The condition required for the WAAP engine to trigger the rule.
	Conditions []FirewallRuleCondition `json:"conditions"`

	// Description The description assigned to the rule
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Enabled Whether or not the rule is enabled
	Enabled bool `json:"enabled"`

	// Id The unique identifier of the rule
	Id int `json:"id"`

	// Name The name assigned to the rule
	Name string `json:"name"`
}

// HTTPMethod HTTP methods and descriptions
//
// Methods from the following RFCs are all observed:
//
//   - RFC 7231: Hypertext Transfer Protocol (HTTP/1.1), obsoletes 2616
//   - RFC 5789: PATCH Method for HTTP
type HTTPMethod string

// HandshakePageData defines model for HandshakePageData.
type HandshakePageData struct {
	// Enabled Indicates whether the custom custom page is active or inactive
	Enabled bool `json:"enabled"`

	// Header The text to display in the header of the custom page
	Header *string `json:"header,omitempty"`

	// Logo Supported image types are JPEG, PNG and JPG, size is limited to width 450px, height 130px. This should be a base 64 encoding of the full HTML img tag compatible image, with the header included.
	Logo *string `json:"logo,omitempty"`

	// Title The text to display in the title of the custom page
	Title *string `json:"title,omitempty"`
}

// HeaderCondition Match an incoming request header
type HeaderCondition struct {
	// Header The request header name
	Header string `json:"header"`

	// MatchType The type of matching condition for header and value.
	MatchType *HeaderConditionMatchType `json:"match_type,omitempty"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// Value The request header value
	Value string `json:"value"`
}

// HeaderConditionMatchType The type of matching condition for header and value.
type HeaderConditionMatchType string

// HeaderExistsCondition Match when an incoming request header is present
type HeaderExistsCondition struct {
	// Header The request header name
	Header string `json:"header"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`
}

// HttpMethodCondition Match the incoming HTTP method
type HttpMethodCondition struct {
	// HttpMethod HTTP methods of a request
	HttpMethod struct {
		// Embedded struct due to allOf(#/components/schemas/HTTPMethod)
		HTTPMethod `yaml:",inline"`
	} `json:"http_method"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`
}

// Insight defines model for Insight.
type Insight struct {
	// Description The description of the insight
	Description string `json:"description"`

	// FirstSeen The date and time the insight was first seen in ISO 8601 format
	FirstSeen time.Time `json:"first_seen"`

	// Id A generated unique identifier for the insight
	Id openapi_types.UUID `json:"id"`

	// InsightType The type of the insight represented as a slug
	InsightType string `json:"insight_type"`

	// Labels A hash table of label names and values that apply to the insight
	Labels map[string]string `json:"labels"`

	// LastSeen The date and time the insight was last seen in ISO 8601 format
	LastSeen time.Time `json:"last_seen"`

	// LastStatusChange The date and time the insight was last seen in ISO 8601 format
	LastStatusChange time.Time `json:"last_status_change"`

	// Recommendation The recommended action to perform to resolve the insight
	Recommendation string `json:"recommendation"`

	// Status The status of the insight
	Status struct {
		// Embedded struct due to allOf(#/components/schemas/InsightStatus)
		InsightStatus `yaml:",inline"`
	} `json:"status"`
}

// InsightSilence defines model for InsightSilence.
type InsightSilence struct {
	// Author The author of the silence
	Author string `json:"author"`

	// Comment A comment explaining the reason for the silence
	Comment string `json:"comment"`

	// ExpireAt The date and time the silence expires in ISO 8601 format
	ExpireAt *struct {
		// Embedded fields due to inline allOf schema
	} `json:"expire_at"`

	// Id A generated unique identifier for the silence
	Id openapi_types.UUID `json:"id"`

	// InsightType The slug of the insight type
	InsightType string `json:"insight_type"`

	// Labels A hash table of label names and values that apply to the insight silence
	Labels map[string]string `json:"labels"`
}

// InsightSilenceSortBy defines model for InsightSilenceSortBy.
type InsightSilenceSortBy string

// InsightSortBy defines model for InsightSortBy.
type InsightSortBy string

// InsightStatus The different statuses an insight can have
type InsightStatus string

// InsightType defines model for InsightType.
type InsightType struct {
	// Description The description of the insight type
	Description string `json:"description"`

	// InsightFrequency The frequency of the insight type
	InsightFrequency int `json:"insight_frequency"`

	// InsightGroupingDimensions The grouping dimensions of the insight type
	InsightGroupingDimensions []string `json:"insight_grouping_dimensions"`

	// InsightTemplate The insight template
	InsightTemplate string `json:"insight_template"`

	// Labels The labels of the insight type
	Labels []string `json:"labels"`

	// Name The name of the insight type
	Name string `json:"name"`

	// RecommendationTemplate The recommendation template
	RecommendationTemplate string `json:"recommendation_template"`

	// Slug The slug of the insight type
	Slug string `json:"slug"`
}

// IpCondition Match the incoming request against a single IP address
type IpCondition struct {
	// IpAddress A single IPv4 or IPv6 address
	IpAddress IpCondition_IpAddress `json:"ip_address"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`
}

// IpConditionIpAddress0 defines model for .
type IpConditionIpAddress0 = string

// IpConditionIpAddress1 defines model for .
type IpConditionIpAddress1 = string

// IpCondition_IpAddress A single IPv4 or IPv6 address
type IpCondition_IpAddress struct {
	union json.RawMessage
}

// IpCountryAttack defines model for IpCountryAttack.
type IpCountryAttack struct {
	// Count The number of attacks from the specified IP address to the country
	Count int `json:"count"`

	// Country An ISO 3166-1 alpha-2 formatted string representing the country that was attacked
	Country string `json:"country"`
}

// IpDdosInfo defines model for IpDdosInfo.
type IpDdosInfo struct {
	// BotnetClient Indicates if the IP is tagged as a botnet client
	BotnetClient bool `json:"botnet_client"`

	// TimeSeries The time series data for the DDoS attacks from the IP address
	TimeSeries []TimeSeriesItem `json:"time_series"`
}

// IpInfo defines model for IpInfo.
type IpInfo struct {
	// RiskScore The risk score of the IP address
	RiskScore IpInfoRiskScore `json:"risk_score"`

	// Tags The tags associated with the IP address that affect the risk score
	Tags []string `json:"tags"`

	// Whois The WHOIS information for the IP address
	Whois struct {
		// Embedded struct due to allOf(#/components/schemas/WhoisInfo)
		WhoisInfo `yaml:",inline"`
	} `json:"whois"`
}

// IpInfoRiskScore The risk score of the IP address
type IpInfoRiskScore string

// IpInfoCounts defines model for IpInfoCounts.
type IpInfoCounts struct {
	// BlockedRequests The number of requests from the IP address that were blocked
	BlockedRequests int `json:"blocked_requests"`

	// TotalRequests The total number of requests made by the IP address
	TotalRequests int `json:"total_requests"`

	// UniqueSessions The number of unique sessions from the IP address
	UniqueSessions int `json:"unique_sessions"`
}

// IpRangeCondition Match the incoming request against an IP range
type IpRangeCondition struct {
	// LowerBound The lower bound IPv4 or IPv6 address to match against
	LowerBound IpRangeCondition_LowerBound `json:"lower_bound"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// UpperBound The upper bound IPv4 or IPv6 address to match against
	UpperBound IpRangeCondition_UpperBound `json:"upper_bound"`
}

// IpRangeConditionLowerBound0 defines model for .
type IpRangeConditionLowerBound0 = string

// IpRangeConditionLowerBound1 defines model for .
type IpRangeConditionLowerBound1 = string

// IpRangeCondition_LowerBound The lower bound IPv4 or IPv6 address to match against
type IpRangeCondition_LowerBound struct {
	union json.RawMessage
}

// IpRangeConditionUpperBound0 defines model for .
type IpRangeConditionUpperBound0 = string

// IpRangeConditionUpperBound1 defines model for .
type IpRangeConditionUpperBound1 = string

// IpRangeCondition_UpperBound The upper bound IPv4 or IPv6 address to match against
type IpRangeCondition_UpperBound struct {
	union json.RawMessage
}

// JavascriptDisabledPageData defines model for JavascriptDisabledPageData.
type JavascriptDisabledPageData struct {
	// Enabled Indicates whether the custom custom page is active or inactive
	Enabled bool `json:"enabled"`

	// Header The text to display in the header of the custom page
	Header *string `json:"header,omitempty"`

	// Text The text to display in the body of the custom page
	Text *string `json:"text,omitempty"`
}

// Network Network details
type Network struct {
	// ClientIp Client IP
	ClientIp string `json:"client_ip"`

	// Country Country code
	Country string `json:"country"`

	// Organization Organization details
	Organization AppModelsRequestsOrganization `json:"organization"`
}

// OrganizationCondition Match the organization the request originated from, as determined by a WHOIS lookup of the requesting IP
type OrganizationCondition struct {
	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// Organization The organization to match against
	Organization string `json:"organization"`
}

// OwnerTypesCondition Match the type of organization that owns the IP address making an incoming request
type OwnerTypesCondition struct {
	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// OwnerTypes Match the type of organization that owns the IP address making an incoming request
	OwnerTypes *[]OwnerTypesConditionOwnerTypes `json:"owner_types,omitempty"`
}

// OwnerTypesConditionOwnerTypes defines model for OwnerTypesCondition.OwnerTypes.
type OwnerTypesConditionOwnerTypes string

// PageType The type of the custom page
type PageType string

// PaginatedResponseAdvancedRuleResponse defines model for PaginatedResponse_AdvancedRuleResponse_.
type PaginatedResponseAdvancedRuleResponse struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []AdvancedRuleResponse `json:"results"`
}

// PaginatedResponseApiPathResponse defines model for PaginatedResponse_ApiPathResponse_.
type PaginatedResponseApiPathResponse struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []ApiPathResponse `json:"results"`
}

// PaginatedResponseApiScanResult defines model for PaginatedResponse_ApiScanResult_.
type PaginatedResponseApiScanResult struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []ApiScanResult `json:"results"`
}

// PaginatedResponseCustomPageSetResponse defines model for PaginatedResponse_CustomPageSetResponse_.
type PaginatedResponseCustomPageSetResponse struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []CustomPageSetResponse `json:"results"`
}

// PaginatedResponseCustomRuleResponse defines model for PaginatedResponse_CustomRuleResponse_.
type PaginatedResponseCustomRuleResponse struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []CustomRuleResponse `json:"results"`
}

// PaginatedResponseDdosAttack defines model for PaginatedResponse_DdosAttack_.
type PaginatedResponseDdosAttack struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []DdosAttack `json:"results"`
}

// PaginatedResponseDdosInfo defines model for PaginatedResponse_DdosInfo_.
type PaginatedResponseDdosInfo struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []DdosInfo `json:"results"`
}

// PaginatedResponseFirewallRuleResponse defines model for PaginatedResponse_FirewallRuleResponse_.
type PaginatedResponseFirewallRuleResponse struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []FirewallRuleResponse `json:"results"`
}

// PaginatedResponseInsightSilence defines model for PaginatedResponse_InsightSilence_.
type PaginatedResponseInsightSilence struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []InsightSilence `json:"results"`
}

// PaginatedResponseInsightType defines model for PaginatedResponse_InsightType_.
type PaginatedResponseInsightType struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []InsightType `json:"results"`
}

// PaginatedResponseInsight defines model for PaginatedResponse_Insight_.
type PaginatedResponseInsight struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []Insight `json:"results"`
}

// PaginatedResponseOrganization defines model for PaginatedResponse_Organization_.
type PaginatedResponseOrganization struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []AppModelsOrganizationsOrganization `json:"results"`
}

// PaginatedResponseRequestSummary defines model for PaginatedResponse_RequestSummary_.
type PaginatedResponseRequestSummary struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []RequestSummary `json:"results"`
}

// PaginatedResponseSummaryDomainResponse defines model for PaginatedResponse_SummaryDomainResponse_.
type PaginatedResponseSummaryDomainResponse struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []SummaryDomainResponse `json:"results"`
}

// PaginatedResponseTag defines model for PaginatedResponse_Tag_.
type PaginatedResponseTag struct {
	// Count Number of items contain in the response
	Count int `json:"count"`

	// Limit Number of items requested in the response
	Limit int `json:"limit"`

	// Offset Items response offset used
	Offset int `json:"offset"`

	// Results List of items returned in the response following given criteria
	Results []AppModelsTagsTag `json:"results"`
}

// PatternMatchedTag Pattern matched tag details
type PatternMatchedTag struct {
	// Description Tag description information
	Description string `json:"description"`

	// DisplayName The tag's display name
	DisplayName string `json:"display_name"`

	// ExecutionPhase The phase in which the tag was triggered:  access -> Request, header_filter -> response_header, body_filter -> response_body
	ExecutionPhase string `json:"execution_phase"`

	// Field The entity to which the variable that triggered the tag belong to. For example: request_headers, uri, cookies etc.
	Field string `json:"field"`

	// FieldName The name of the variable which holds the value that triggered the tag
	FieldName string `json:"field_name"`

	// PatternName The name of the detected regexp pattern
	PatternName string `json:"pattern_name"`

	// PatternValue The pattern which triggered the tag
	PatternValue string `json:"pattern_value"`

	// Tag Tag name
	Tag string `json:"tag"`
}

// PolicyAction The action taken by the WAAP upon rule activation.
type PolicyAction string

// PolicyMode Represents the mode of a security rule.
type PolicyMode struct {
	// Mode Indicates if the security rule is active
	Mode bool `json:"mode"`
}

// PreviewCustomPage defines model for PreviewCustomPage.
type PreviewCustomPage struct {
	Error *struct {
		// Embedded fields due to inline allOf schema
	} `json:"error"`
	Header *struct {
		// Embedded fields due to inline allOf schema
	} `json:"header"`
	Logo *struct {
		// Embedded fields due to inline allOf schema
	} `json:"logo"`
	Text *struct {
		// Embedded fields due to inline allOf schema
	} `json:"text"`
	Title *struct {
		// Embedded fields due to inline allOf schema
	} `json:"title"`
}

// QuotaItem defines model for QuotaItem.
type QuotaItem struct {
	// Allowed The maximum allowed number of this resource
	Allowed int `json:"allowed"`

	// Current The current number of this resource
	Current int `json:"current"`
}

// RequestDetails Request's details used when displaying a single request.
type RequestDetails struct {
	// Action Request action
	Action string `json:"action"`

	// CommonTags List of common tags
	CommonTags []CommonTag `json:"common_tags"`

	// ContentType Content type of request
	ContentType string `json:"content_type"`

	// Domain Domain name
	Domain string `json:"domain"`

	// HttpStatusCode Status code for http request
	HttpStatusCode int `json:"http_status_code"`

	// HttpVersion HTTP version of request
	HttpVersion string `json:"http_version"`

	// Id Request ID
	Id string `json:"id"`

	// IncidentId ID of challenge that was generated
	IncidentId string `json:"incident_id"`

	// Method Request method
	Method string `json:"method"`

	// Network Network details
	Network Network `json:"network"`

	// Path Request path
	Path string `json:"path"`

	// PatternMatchedTags List of shield tags
	PatternMatchedTags []PatternMatchedTag `json:"pattern_matched_tags"`

	// QueryString The query string of the request
	QueryString string `json:"query_string"`

	// ReferenceId Reference ID to identify user sanction
	ReferenceId string `json:"reference_id"`

	// RequestHeaders HTTP request headers
	RequestHeaders map[string]interface{} `json:"request_headers"`

	// RequestTime The time of the request
	RequestTime string `json:"request_time"`

	// RequestType The type of the request that generated an event
	RequestType string `json:"request_type"`

	// RequestedDomain The real domain name
	RequestedDomain string `json:"requested_domain"`

	// ResponseTime Time took to process all request
	ResponseTime string `json:"response_time"`

	// Result The result of a request
	Result RequestDetailsResult `json:"result"`

	// RuleId ID of the triggered rule
	RuleId string `json:"rule_id"`

	// RuleName Name of the triggered rule
	RuleName string `json:"rule_name"`

	// Scheme The HTTP scheme of the request that generated an event
	Scheme string `json:"scheme"`

	// SessionRequestCount The number requests in session
	SessionRequestCount string `json:"session_request_count"`

	// TrafficTypes List of traffic types
	TrafficTypes []string `json:"traffic_types"`

	// UserAgent User agent
	UserAgent struct {
		// Embedded struct due to allOf(#/components/schemas/UserAgent)
		UserAgent `yaml:",inline"`
	} `json:"user_agent"`
}

// RequestDetailsResult The result of a request
type RequestDetailsResult string

// RequestRateCondition Match the rate at which requests come in that match certain conditions
type RequestRateCondition struct {
	// HttpMethods Possible HTTP request methods that can trigger a request rate condition
	HttpMethods *struct {
		// Embedded fields due to inline allOf schema
	} `json:"http_methods"`

	// Ips A list of source IPs that can trigger a request rate condition
	Ips *struct {
		// Embedded fields due to inline allOf schema
	} `json:"ips"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// PathPattern A regular expression matching the URL path of the incoming request
	PathPattern string `json:"path_pattern"`

	// Requests The number of incoming requests over the given time that can trigger a request rate condition
	Requests int `json:"requests"`

	// Time The number of seconds that the WAAP measures incoming requests over before triggering a request rate condition
	Time int `json:"time"`

	// UserDefinedTag A user-defined tag that can be included in incoming requests and used to trigger a request rate condition
	UserDefinedTag *struct {
		// Embedded fields due to inline allOf schema
	} `json:"user_defined_tag"`
}

// RequestSummary Request summary used when displaying a list of requests
type RequestSummary struct {
	// Action Action of the triggered rule
	Action string `json:"action"`

	// ClientIp Client's IP address.
	ClientIp string `json:"client_ip"`

	// Country Country code
	Country string `json:"country"`

	// Domain Domain name
	Domain string `json:"domain"`

	// Id Request's unique id
	Id string `json:"id"`

	// Method HTTP method
	Method string `json:"method"`

	// Organization Organization
	Organization string `json:"organization"`

	// Path Request path
	Path string `json:"path"`

	// ReferenceId The reference ID to a sanction that was given to a user.
	ReferenceId string `json:"reference_id"`

	// RequestTime The UNIX timestamp in ms of the date a set of traffic counters was recorded
	RequestTime int                  `json:"request_time"`
	Result      RequestSummaryResult `json:"result"`

	// RuleId The ID of the triggered rule.
	RuleId string `json:"rule_id"`

	// RuleName Name of the triggered rule
	RuleName string `json:"rule_name"`

	// StatusCode Status code for http request
	StatusCode int `json:"status_code"`

	// TrafficTypes Comma separated list of traffic types.
	TrafficTypes string `json:"traffic_types"`

	// UserAgent User agent
	UserAgent string `json:"user_agent"`

	// UserAgentClient Client from parsed User agent header
	UserAgentClient string `json:"user_agent_client"`
}

// RequestSummaryResult defines model for RequestSummary.Result.
type RequestSummaryResult string

// Resolution Specifies the granularity of the result data.
type Resolution string

// ResponseHeaderCondition Match a response header
type ResponseHeaderCondition struct {
	// Header The response header name
	Header string `json:"header"`

	// MatchType The type of matching condition for header and value.
	MatchType *ResponseHeaderConditionMatchType `json:"match_type,omitempty"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// Value The response header value
	Value string `json:"value"`
}

// ResponseHeaderConditionMatchType The type of matching condition for header and value.
type ResponseHeaderConditionMatchType string

// ResponseHeaderExistsCondition Match when a response header is present
type ResponseHeaderExistsCondition struct {
	// Header The response header name
	Header string `json:"header"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`
}

// RuleActionType defines model for RuleActionType.
type RuleActionType string

// RuleAllowAction The WAAP allowed the request
type RuleAllowAction = map[string]interface{}

// RuleBlockAction WAAP block action behavior could be configured with response status code and action duration.
type RuleBlockAction struct {
	// ActionDuration How long a rule's block action will apply to subsequent requests. Can be specified in seconds or by using a numeral followed by 's', 'm', 'h', or 'd' to represent time format (seconds, minutes, hours, or days)
	ActionDuration *struct {
		// Embedded fields due to inline allOf schema
	} `json:"action_duration"`

	// StatusCode A custom HTTP status code that the WAAP returns if a rule blocks a request
	StatusCode *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleBlockStatusCode)
		RuleBlockStatusCode `yaml:",inline"`
	} `json:"status_code"`
}

// RuleBlockStatusCode Designates the HTTP status code to deliver when a request is blocked.
type RuleBlockStatusCode int

// RuleBlockedRequests defines model for RuleBlockedRequests.
type RuleBlockedRequests struct {
	// Action The action taken by the rule
	Action string `json:"action"`

	// Count The number of requests blocked by the rule
	Count int `json:"count"`

	// RuleName The name of the rule that blocked the request
	RuleName string `json:"rule_name"`
}

// RuleCaptchaAction The WAAP presented the user with a captcha
type RuleCaptchaAction = map[string]interface{}

// RuleHandshakeAction The WAAP performed automatic browser validation
type RuleHandshakeAction = map[string]interface{}

// RuleMonitorAction The WAAP monitored the request but took no action
type RuleMonitorAction = map[string]interface{}

// RuleSet Represents a custom rule set.
type RuleSet struct {
	// Description Detailed description of the rule set.
	Description string `json:"description"`

	// Id Identifier of the rule set.
	Id int `json:"id"`

	// IsActive Indicates if the rule set is currently active.
	IsActive bool `json:"is_active"`

	// Name Name of the rule set.
	Name string `json:"name"`

	// ResourceSlug The resource slug associated with the rule set.
	ResourceSlug *struct {
		// Embedded fields due to inline allOf schema
	} `json:"resource_slug"`
	Rules *[]DomainPolicy `json:"rules,omitempty"`

	// Tags Collection of tags associated with the rule set.
	Tags []AppModelsPoliciesTag `json:"tags"`
}

// RuleTagAction WAAP tag action gets a list of tags to tag the request scope with
type RuleTagAction struct {
	// Tags The list of user defined tags to tag the request with
	Tags []string `json:"tags"`
}

// RulesBulkDelete A request to delete a list of rules
type RulesBulkDelete struct {
	// RuleIds The IDs of the rules to delete
	RuleIds []int `json:"rule_ids"`
}

// Service defines model for Service.
type Service struct {
	// Enabled Whether the service is enabled
	Enabled bool `json:"enabled"`
}

// SessionRequestCountCondition Match the number of dynamic page requests made in a WAAP session
type SessionRequestCountCondition struct {
	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// RequestCount The number of dynamic requests in the session
	RequestCount int `json:"request_count"`
}

// StatisticItem Response model for the statistics item
type StatisticItem struct {
	// DateTime The date and time for the statistic in ISO 8601 format
	DateTime time.Time `json:"date_time"`

	// Value The value for the statistic. If there is no data for the given time, the value will be 0.
	Value int `json:"value"`
}

// StatisticsSeries Response model for the statistics series
type StatisticsSeries struct {
	// TotalBytes Will be returned if `total_bytes` is requested in the metrics parameter
	TotalBytes *struct {
		// Embedded fields due to inline allOf schema
	} `json:"total_bytes"`

	// TotalRequests Will be included if `total_requests` is requested in the metrics parameter
	TotalRequests *struct {
		// Embedded fields due to inline allOf schema
	} `json:"total_requests"`
}

// SummaryDomainResponse Represents a WAAP domain when getting a list of domains.
type SummaryDomainResponse struct {
	// CreatedAt The date and time the domain was created in ISO 8601 format
	CreatedAt     time.Time `json:"created_at"`
	CustomPageSet *struct {
		// Embedded fields due to inline allOf schema
	} `json:"custom_page_set"`

	// Id The domain ID
	Id int `json:"id"`

	// Name The domain name
	Name string `json:"name"`

	// Status The different statuses a domain can have
	Status DomainStatus `json:"status"`
}

// TagsCondition Matches requests based on specified tags
type TagsCondition struct {
	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// Tags A list of tags to match against the request tags
	Tags []string `json:"tags"`
}

// TaskResultId Response model for the task result ID
type TaskResultId struct {
	// Id The task ID
	Id openapi_types.UUID `json:"id"`
}

// TaskResultStatus The different statuses a task result can have
type TaskResultStatus string

// TimeSeriesAttack defines model for TimeSeriesAttack.
type TimeSeriesAttack struct {
	// AttackType The type of attack
	AttackType string `json:"attack_type"`

	// Values The time series data
	Values []TimeSeriesItem `json:"values"`
}

// TimeSeriesItem defines model for TimeSeriesItem.
type TimeSeriesItem struct {
	// Count The number of attacks
	Count int `json:"count"`

	// Timestamp The timestamp of the time series item as a POSIX timestamp
	Timestamp int `json:"timestamp"`
}

// TopSession defines model for TopSession.
type TopSession struct {
	// Blocked The number of blocked requests in the session
	Blocked int `json:"blocked"`

	// Duration The duration of the session in seconds
	Duration float32 `json:"duration"`

	// Requests The number of requests in the session
	Requests int `json:"requests"`

	// SessionId The session ID
	SessionId openapi_types.UUID `json:"session_id"`

	// StartTime The start time of the session as a POSIX timestamp
	StartTime time.Time `json:"start_time"`
}

// TopUrl defines model for TopUrl.
type TopUrl struct {
	// Count The number of attacks to the URL
	Count int `json:"count"`

	// Url The URL that was attacked
	Url string `json:"url"`
}

// TopUserAgent defines model for TopUserAgent.
type TopUserAgent struct {
	// Count The number of requests made with the user agent
	Count int `json:"count"`

	// UserAgent The user agent that was used
	UserAgent string `json:"user_agent"`
}

// TrafficMetrics Represents the traffic metrics for a domain at a given time window
type TrafficMetrics struct {
	// Ajax Number of AJAX requests made
	Ajax *int `json:"ajax,omitempty"`

	// Api Number of API requests made
	Api *int `json:"api,omitempty"`

	// CustomAllowed Number of requests allowed through custom rules
	CustomAllowed *int `json:"customAllowed,omitempty"`

	// CustomBlocked Number of requests blocked due to custom rules
	CustomBlocked *int `json:"customBlocked,omitempty"`

	// DdosBlocked Number of DDoS attack attempts successfully blocked
	DdosBlocked *int `json:"ddosBlocked,omitempty"`

	// Monitored Number of requests triggering monitoring actions
	Monitored *int `json:"monitored,omitempty"`

	// Origin2xx Number of successful HTTP 2xx responses from the origin server
	Origin2xx *int `json:"origin2xx,omitempty"`

	// Origin3xx Number of HTTP 3xx redirects issued by the origin server
	Origin3xx *int `json:"origin3xx,omitempty"`

	// OriginError4xx Number of HTTP 4xx errors from the origin server
	OriginError4xx *int `json:"originError4xx,omitempty"`

	// OriginError5xx Number of HTTP 5xx errors from the origin server
	OriginError5xx *int `json:"originError5xx,omitempty"`

	// OriginTimeout Number of timeouts experienced at the origin server
	OriginTimeout *int `json:"originTimeout,omitempty"`

	// PassedToOrigin Number of requests served directly by the origin server
	PassedToOrigin *int `json:"passedToOrigin,omitempty"`

	// PolicyAllowed Number of requests allowed by security policies
	PolicyAllowed *int `json:"policyAllowed,omitempty"`

	// PolicyBlocked Number of requests blocked by security policies
	PolicyBlocked *int `json:"policyBlocked,omitempty"`

	// ResponseTime Average origin server response time in milliseconds
	ResponseTime *int `json:"responseTime,omitempty"`

	// Static Number of static asset requests
	Static *int `json:"static,omitempty"`

	// Timestamp UNIX timestamp indicating when the traffic data was recorded
	Timestamp int `json:"timestamp"`

	// Total Total number of requests
	Total *int `json:"total,omitempty"`

	// Uncategorized Requests resulting in neither blocks nor sanctions
	Uncategorized *int `json:"uncategorized,omitempty"`
}

// TrafficType defines model for TrafficType.
type TrafficType string

// UpdateAdvancedRule A request to update an advanced WAAP rule
type UpdateAdvancedRule struct {
	// Action The action that the rule takes when triggered
	Action *struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleAction-Input)
		CustomerRuleActionInput `yaml:",inline"`
	} `json:"action"`

	// Description The description assigned to the rule
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Enabled Whether or not the rule is enabled
	Enabled *struct {
		// Embedded fields due to inline allOf schema
	} `json:"enabled"`

	// Name The name assigned to the rule
	Name *struct {
		// Embedded fields due to inline allOf schema
	} `json:"name"`

	// Phase The WAAP request/response phase for applying the rule.
	//
	//
	// The "access" phase is responsible for modifying the request before it is sent to the origin server.
	//
	// The "header_filter" phase is responsible for modifying the HTTP headers of a response before they are sent back to the client.
	//
	// The "body_filter" phase is responsible for modifying the body of a response before it is sent back to the client.
	Phase *struct {
		// Embedded fields due to inline allOf schema
	} `json:"phase"`

	// Source A CEL syntax expression that contains the rule's conditions. Allowed objects are: request, whois, session, response, tags, user_defined_tags, user_agent, client_data.
	//
	// More info can be found here: https://gcore.com/docs/waap/waap-rules/advanced-rules
	Source *struct {
		// Embedded fields due to inline allOf schema
	} `json:"source"`
}

// UpdateApiDiscoverySettings Request model for updating the API discovery settings
type UpdateApiDiscoverySettings struct {
	// DescriptionFileLocation The URL of the API description file. This will be periodically scanned if `descriptionFileScanEnabled` is enabled. Supported formats are YAML and JSON, and it must adhere to OpenAPI versions 2, 3, or 3.1.
	DescriptionFileLocation *struct {
		// Embedded fields due to inline allOf schema
	} `json:"descriptionFileLocation"`

	// DescriptionFileScanEnabled Indicates if periodic scan of the description file is enabled
	DescriptionFileScanEnabled *struct {
		// Embedded fields due to inline allOf schema
	} `json:"descriptionFileScanEnabled"`

	// DescriptionFileScanIntervalHours The interval in hours for scanning the description file
	DescriptionFileScanIntervalHours *struct {
		// Embedded fields due to inline allOf schema
	} `json:"descriptionFileScanIntervalHours"`

	// TrafficScanEnabled Indicates if traffic scan is enabled
	TrafficScanEnabled *struct {
		// Embedded fields due to inline allOf schema
	} `json:"trafficScanEnabled"`

	// TrafficScanIntervalHours The interval in hours for scanning the traffic
	TrafficScanIntervalHours *struct {
		// Embedded fields due to inline allOf schema
	} `json:"trafficScanIntervalHours"`
}

// UpdateApiPath Request model for updating an API path
type UpdateApiPath struct {
	// ApiGroups An array of api groups associated with the API path
	ApiGroups *[]string `json:"api_groups,omitempty"`

	// Path The updated API path. When updating the path, variables can be renamed, path parts can be converted to variables and vice versa.
	Path *string `json:"path,omitempty"`

	// Status The status of the discovered API path
	Status *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiPathStatus)
		ApiPathStatus `yaml:",inline"`
	} `json:"status,omitempty"`

	// Tags An array of tags associated with the API path
	Tags *[]string `json:"tags,omitempty"`
}

// UpdateCustomRule A request to update a WAAP rule
type UpdateCustomRule struct {
	// Action The action that the rule takes when triggered
	Action *struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleAction-Input)
		CustomerRuleActionInput `yaml:",inline"`
	} `json:"action"`

	// Conditions The conditions required for the WAAP engine to trigger the rule. Rules may have between 1 and 5 conditions. All conditions must pass for the rule to trigger
	Conditions *struct {
		// Embedded fields due to inline allOf schema
	} `json:"conditions"`

	// Description The description assigned to the rule
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Enabled Whether or not the rule is enabled
	Enabled *struct {
		// Embedded fields due to inline allOf schema
	} `json:"enabled"`

	// Name The name assigned to the rule
	Name *struct {
		// Embedded fields due to inline allOf schema
	} `json:"name"`
}

// UpdateDomain defines model for UpdateDomain.
type UpdateDomain struct {
	// Status The current status of the domain
	Status *struct {
		// Embedded struct due to allOf(#/components/schemas/DomainUpdateStatus)
		DomainUpdateStatus `yaml:",inline"`
	} `json:"status,omitempty"`
}

// UpdateDomainDdosSettings Editable DDoS settings for a domain.
type UpdateDomainDdosSettings struct {
	// BurstThreshold The burst threshold detects sudden rises in traffic. If it is met and the number of requests is at least five times the last 2-second interval, DDoS protection will activate. Default is 1000.
	BurstThreshold *int `json:"burst_threshold,omitempty"`

	// GlobalThreshold The global threshold is responsible for identifying DDoS attacks with a slow rise in traffic. If the threshold is met and the current number of requests is at least double that of the previous 10-second window, DDoS protection will activate. Default is 5000.
	GlobalThreshold *int `json:"global_threshold,omitempty"`
}

// UpdateDomainSettings Represents the editable settings for a domain.
type UpdateDomainSettings struct {
	Api *struct {
		// Embedded struct due to allOf(#/components/schemas/app__models__domain_settings__UpdateApiUrls)
		AppModelsDomainSettingsUpdateApiUrls `yaml:",inline"`
	} `json:"api,omitempty"`
	Ddos *struct {
		// Embedded struct due to allOf(#/components/schemas/UpdateDomainDdosSettings)
		UpdateDomainDdosSettings `yaml:",inline"`
	} `json:"ddos,omitempty"`
}

// UpdateFirewallRule defines model for UpdateFirewallRule.
type UpdateFirewallRule struct {
	// Action The action that the rule takes when triggered
	Action *struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleAction-Input)
		CustomerRuleActionInput `yaml:",inline"`
	} `json:"action"`

	// Conditions The condition required for the WAAP engine to trigger the rule.
	Conditions *struct {
		// Embedded fields due to inline allOf schema
	} `json:"conditions"`

	// Description The description assigned to the rule
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `json:"description"`

	// Enabled Whether or not the rule is enabled
	Enabled *struct {
		// Embedded fields due to inline allOf schema
	} `json:"enabled"`

	// Name The name assigned to the rule
	Name *struct {
		// Embedded fields due to inline allOf schema
	} `json:"name"`
}

// UpdateInsightPayload defines model for UpdateInsightPayload.
type UpdateInsightPayload struct {
	// Status The status of the insight
	Status struct {
		// Embedded struct due to allOf(#/components/schemas/InsightStatus)
		InsightStatus `yaml:",inline"`
	} `json:"status"`
}

// UpdateInsightSilencePayload defines model for UpdateInsightSilencePayload.
type UpdateInsightSilencePayload struct {
	// Author The author of the silence
	Author string `json:"author"`

	// Comment A comment explaining the reason for the silence
	Comment string `json:"comment"`

	// ExpireAt The date and time the silence expires in ISO 8601 format
	ExpireAt *struct {
		// Embedded fields due to inline allOf schema
	} `json:"expire_at"`

	// Labels A hash table of label names and values that apply to the insight silence
	Labels *map[string]string `json:"labels,omitempty"`
}

// UrlCondition Match the incoming request URL
type UrlCondition struct {
	// MatchType The type of matching condition.
	MatchType *UrlConditionMatchType `json:"match_type,omitempty"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// Url The URL to match
	Url string `json:"url"`
}

// UrlConditionMatchType The type of matching condition.
type UrlConditionMatchType string

// UserAgent User agent details
type UserAgent struct {
	// BaseBrowser User agent browser
	BaseBrowser string `json:"base_browser"`

	// BaseBrowserVersion User agent browser version
	BaseBrowserVersion string `json:"base_browser_version"`

	// Client Client from User agent header
	Client string `json:"client"`

	// ClientType User agent client type
	ClientType string `json:"client_type"`

	// ClientVersion User agent client version
	ClientVersion string `json:"client_version"`

	// Cpu User agent cpu
	Cpu string `json:"cpu"`

	// Device User agent device
	Device string `json:"device"`

	// DeviceType User agent device type
	DeviceType string `json:"device_type"`

	// FullString User agent
	FullString string `json:"full_string"`

	// Os User agent os
	Os string `json:"os"`

	// RenderingEngine User agent engine
	RenderingEngine string `json:"rendering_engine"`
}

// UserAgentCondition Match the user agent making the request
type UserAgentCondition struct {
	// MatchType The type of matching condition.
	MatchType *UserAgentConditionMatchType `json:"match_type,omitempty"`

	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// UserAgent The user agent value to match
	UserAgent string `json:"user_agent"`
}

// UserAgentConditionMatchType The type of matching condition.
type UserAgentConditionMatchType string

// UserDefinedTagsCondition Matches requests based on user-defined tags
type UserDefinedTagsCondition struct {
	// Negation Whether or not to apply a boolean NOT operation to the rule's condition
	Negation *bool `json:"negation,omitempty"`

	// Tags A list of user-defined tags to match against the request tags
	Tags []string `json:"tags"`
}

// WhoisInfo defines model for WhoisInfo.
type WhoisInfo struct {
	// AbuseMail The abuse mail
	AbuseMail *struct {
		// Embedded fields due to inline allOf schema
	} `json:"abuse_mail"`

	// Cidr The CIDR
	Cidr *struct {
		// Embedded fields due to inline allOf schema
	} `json:"cidr"`

	// Country The country
	Country *struct {
		// Embedded fields due to inline allOf schema
	} `json:"country"`

	// NetDescription The network description
	NetDescription *struct {
		// Embedded fields due to inline allOf schema
	} `json:"net_description"`

	// NetName The network name
	NetName *struct {
		// Embedded fields due to inline allOf schema
	} `json:"net_name"`

	// NetRange The network range
	NetRange *struct {
		// Embedded fields due to inline allOf schema
	} `json:"net_range"`

	// NetType The network type
	NetType *struct {
		// Embedded fields due to inline allOf schema
	} `json:"net_type"`

	// OrgId The organization ID
	OrgId *struct {
		// Embedded fields due to inline allOf schema
	} `json:"org_id"`

	// OrgName The organization name
	OrgName *struct {
		// Embedded fields due to inline allOf schema
	} `json:"org_name"`

	// OwnerType The owner type
	OwnerType *struct {
		// Embedded fields due to inline allOf schema
	} `json:"owner_type"`

	// Rir The RIR
	Rir *struct {
		// Embedded fields due to inline allOf schema
	} `json:"rir"`

	// State The state
	State *struct {
		// Embedded fields due to inline allOf schema
	} `json:"state"`
}

// AppModelsApiDiscoveryApiUrls Request model for updating the API URLs
type AppModelsApiDiscoveryApiUrls struct {
	// ApiUrls The list of URLs
	ApiUrls []string `json:"api_urls"`
}

// AppModelsApiDiscoveryUpdateApiUrls Request model for updating the API URLs
type AppModelsApiDiscoveryUpdateApiUrls struct {
	// ApiUrls The list of URLs
	ApiUrls []string `json:"api_urls"`
}

// AppModelsDomainSettingsApiUrls API settings of a domain
type AppModelsDomainSettingsApiUrls struct {
	// ApiUrls The API URLs for a domain. If your domain has a common base URL for all API paths, it can be set here
	ApiUrls *[]string `json:"api_urls,omitempty"`
}

// AppModelsDomainSettingsUpdateApiUrls Editable API settings of a domain
type AppModelsDomainSettingsUpdateApiUrls struct {
	// ApiUrls The API URLs for a domain. If your domain has a common base URL for all API paths, it can be set here
	ApiUrls *[]string `json:"api_urls,omitempty"`
}

// AppModelsOrganizationsOrganization Represents an IP range owner organization
type AppModelsOrganizationsOrganization struct {
	// Id The ID of an organization
	Id int `json:"id"`

	// Name The name of an organization
	Name string `json:"name"`
}

// AppModelsPoliciesTag A single tag associated with a rule set.
type AppModelsPoliciesTag struct {
	// Description Detailed description of the tag.
	Description string `json:"description"`

	// Id Identifier of the tag.
	Id int `json:"id"`

	// Name Name of the tag.
	Name string `json:"name"`
}

// AppModelsRequestsOrganization Organization details
type AppModelsRequestsOrganization struct {
	// Name Organization name
	Name string `json:"name"`

	// Subnet Network range
	Subnet string `json:"subnet"`
}

// AppModelsTagsTag Tags provide shortcuts for the rules used in WAAP policies for the creation of more complex WAAP rules.
type AppModelsTagsTag struct {
	// Description A tag's human readable description
	Description string `json:"description"`

	// Name The name of a tag that should be used in a WAAP rule condition
	Name string `json:"name"`

	// ReadableName The display name of the tag
	ReadableName string `json:"readable_name"`
}

// GetCustomPageSetsV1CustomPageSetsGetParams defines parameters for GetCustomPageSetsV1CustomPageSetsGet.
type GetCustomPageSetsV1CustomPageSetsGetParams struct {
	// Ordering Sort the response by given field.
	Ordering *GetCustomPageSetsV1CustomPageSetsGetParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Name Filter page sets based on their name. Supports '*' as a wildcard character
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Ids Filter page sets based on their IDs
	Ids *[]int `form:"ids,omitempty" json:"ids,omitempty"`
}

// GetCustomPageSetsV1CustomPageSetsGetParamsOrdering defines parameters for GetCustomPageSetsV1CustomPageSetsGet.
type GetCustomPageSetsV1CustomPageSetsGetParamsOrdering string

// GetDomainsV1DomainsGetParams defines parameters for GetDomainsV1DomainsGet.
type GetDomainsV1DomainsGetParams struct {
	// Ordering Sort the response by given field.
	Ordering *GetDomainsV1DomainsGetParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Status Filter domains based on the domain status
	Status *struct {
		// Embedded struct due to allOf(#/components/schemas/DomainStatus)
		DomainStatus `yaml:",inline"`
	} `form:"status,omitempty" json:"status,omitempty"`

	// Name Filter domains based on the domain name. Supports '*' as a wildcard character
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Ids Filter domains based on their IDs
	Ids *[]int `form:"ids,omitempty" json:"ids,omitempty"`
}

// GetDomainsV1DomainsGetParamsOrdering defines parameters for GetDomainsV1DomainsGet.
type GetDomainsV1DomainsGetParamsOrdering string

// GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParams defines parameters for GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGet.
type GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParams struct {
	// Ordering Determine the field to order results by
	Ordering *struct {
		// Embedded fields due to inline allOf schema
	} `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Name Filter rules based on their name. Supports '*' as a wildcard character.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Description Filter rules based on their description. Supports '*' as a wildcard character.
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Action Filter to refine results by specific actions
	Action *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleActionType)
		RuleActionType `yaml:",inline"`
	} `form:"action,omitempty" json:"action,omitempty"`

	// Enabled Filter rules based on their active status
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty"`

	// Phase Filter rules based on the WAAP request/response phase for applying the rule.
	//
	//
	// The "access" phase is responsible for modifying the request before it is sent to the origin server.
	//
	// The "header_filter" phase is responsible for modifying the HTTP headers of a response before they are sent back to the client.
	//
	// The "body_filter" phase is responsible for modifying the body of a response before it is sent back to the client.
	Phase *GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParamsPhase `form:"phase,omitempty" json:"phase,omitempty"`
}

// GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParamsPhase defines parameters for GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGet.
type GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParamsPhase string

// GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParams defines parameters for GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGet.
type GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParams struct {
	// Ordering Sort the response by given field.
	Ordering *GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Type Filter by the path of the scan type
	Type *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiScanType)
		ApiScanType `yaml:",inline"`
	} `form:"type,omitempty" json:"type,omitempty"`

	// Status Filter by the status of the scan
	Status *struct {
		// Embedded struct due to allOf(#/components/schemas/TaskResultStatus)
		TaskResultStatus `yaml:",inline"`
	} `form:"status,omitempty" json:"status,omitempty"`

	// Message Filter by the message of the scan. Supports '*' as a wildcard character
	Message *struct {
		// Embedded fields due to inline allOf schema
	} `form:"message,omitempty" json:"message,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering defines parameters for GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGet.
type GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParamsOrdering string

// GetApiPathsV1DomainsDomainIdApiPathsGetParams defines parameters for GetApiPathsV1DomainsDomainIdApiPathsGet.
type GetApiPathsV1DomainsDomainIdApiPathsGetParams struct {
	// Ordering Sort the response by given field.
	Ordering *GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Ids Filter by the path ID
	Ids *struct {
		// Embedded fields due to inline allOf schema
	} `form:"ids,omitempty" json:"ids,omitempty"`

	// Path Filter by the path. Supports '*' as a wildcard character
	Path *struct {
		// Embedded fields due to inline allOf schema
	} `form:"path,omitempty" json:"path,omitempty"`

	// Method Filter by the API RESTful method
	Method *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiPathMethod)
		ApiPathMethod `yaml:",inline"`
	} `form:"method,omitempty" json:"method,omitempty"`

	// ApiVersion Filter by the API version
	ApiVersion *struct {
		// Embedded fields due to inline allOf schema
	} `form:"api_version,omitempty" json:"api_version,omitempty"`

	// HttpScheme Filter by the HTTP version of the API path
	HttpScheme *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiPathHttpScheme)
		ApiPathHttpScheme `yaml:",inline"`
	} `form:"http_scheme,omitempty" json:"http_scheme,omitempty"`

	// ApiGroup Filter by the API group associated with the API path
	ApiGroup *struct {
		// Embedded fields due to inline allOf schema
	} `form:"api_group,omitempty" json:"api_group,omitempty"`

	// Status Filter by the status of the discovered API path
	Status *struct {
		// Embedded fields due to inline allOf schema
	} `form:"status,omitempty" json:"status,omitempty"`

	// Source Filter by the source of the discovered API
	Source *struct {
		// Embedded struct due to allOf(#/components/schemas/ApiPathSource)
		ApiPathSource `yaml:",inline"`
	} `form:"source,omitempty" json:"source,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering defines parameters for GetApiPathsV1DomainsDomainIdApiPathsGet.
type GetApiPathsV1DomainsDomainIdApiPathsGetParamsOrdering string

// GetCustomRulesV1DomainsDomainIdCustomRulesGetParams defines parameters for GetCustomRulesV1DomainsDomainIdCustomRulesGet.
type GetCustomRulesV1DomainsDomainIdCustomRulesGetParams struct {
	// Ordering Determine the field to order results by
	Ordering *struct {
		// Embedded fields due to inline allOf schema
	} `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Name Filter rules based on their name. Supports '*' as a wildcard character.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Description Filter rules based on their description. Supports '*' as a wildcard character.
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Action Filter to refine results by specific actions
	Action *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleActionType)
		RuleActionType `yaml:",inline"`
	} `form:"action,omitempty" json:"action,omitempty"`

	// Enabled Filter rules based on their active status
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty"`
}

// GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParams defines parameters for GetDdosAttacksV1DomainsDomainIdDdosAttacksGet.
type GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParams struct {
	// Ordering Sort the response by given field.
	Ordering *GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// StartTime Filter attacks starting from a specified date in ISO 8601 format
	StartTime *struct {
		// Embedded fields due to inline allOf schema
	} `form:"start_time,omitempty" json:"start_time,omitempty"`

	// EndTime Filter attacks up to a specified end date in ISO 8601 format
	EndTime *struct {
		// Embedded fields due to inline allOf schema
	} `form:"end_time,omitempty" json:"end_time,omitempty"`
}

// GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrdering defines parameters for GetDdosAttacksV1DomainsDomainIdDdosAttacksGet.
type GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParamsOrdering string

// GetDdosInfoV1DomainsDomainIdDdosInfoGetParams defines parameters for GetDdosInfoV1DomainsDomainIdDdosInfoGet.
type GetDdosInfoV1DomainsDomainIdDdosInfoGetParams struct {
	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// GroupBy The identity of the requests to group by
	GroupBy GetDdosInfoV1DomainsDomainIdDdosInfoGetParamsGroupBy `form:"group_by" json:"group_by"`

	// Start Filter traffic starting from a specified date in ISO 8601 format
	Start time.Time `form:"start" json:"start"`

	// End Filter traffic up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time.
	End *time.Time `form:"end,omitempty" json:"end,omitempty"`
}

// GetDdosInfoV1DomainsDomainIdDdosInfoGetParamsGroupBy defines parameters for GetDdosInfoV1DomainsDomainIdDdosInfoGet.
type GetDdosInfoV1DomainsDomainIdDdosInfoGetParamsGroupBy string

// GetFirewallRulesV1DomainsDomainIdFirewallRulesGetParams defines parameters for GetFirewallRulesV1DomainsDomainIdFirewallRulesGet.
type GetFirewallRulesV1DomainsDomainIdFirewallRulesGetParams struct {
	// Ordering Determine the field to order results by
	Ordering *struct {
		// Embedded fields due to inline allOf schema
	} `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Name Filter rules based on their name. Supports '*' as a wildcard character.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Description Filter rules based on their description. Supports '*' as a wildcard character.
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// Action Filter to refine results by specific actions
	Action *struct {
		// Embedded struct due to allOf(#/components/schemas/RuleActionType)
		RuleActionType `yaml:",inline"`
	} `form:"action,omitempty" json:"action,omitempty"`

	// Enabled Filter rules based on their active status
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty"`
}

// GetInsightSilencesV1DomainsDomainIdInsightSilencesGetParams defines parameters for GetInsightSilencesV1DomainsDomainIdInsightSilencesGet.
type GetInsightSilencesV1DomainsDomainIdInsightSilencesGetParams struct {
	Ordering *struct {
		// Embedded struct due to allOf(#/components/schemas/InsightSilenceSortBy)
		InsightSilenceSortBy `yaml:",inline"`
	} `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Id The ID of the insight silence
	Id *struct {
		// Embedded fields due to inline allOf schema
	} `form:"id,omitempty" json:"id,omitempty"`

	// InsightType The type of the insight silence
	InsightType *struct {
		// Embedded fields due to inline allOf schema
	} `form:"insight_type,omitempty" json:"insight_type,omitempty"`

	// Comment The comment of the insight silence
	Comment *struct {
		// Embedded fields due to inline allOf schema
	} `form:"comment,omitempty" json:"comment,omitempty"`

	// Author The author of the insight silence
	Author *struct {
		// Embedded fields due to inline allOf schema
	} `form:"author,omitempty" json:"author,omitempty"`
}

// GetInsightsV1DomainsDomainIdInsightsGetParams defines parameters for GetInsightsV1DomainsDomainIdInsightsGet.
type GetInsightsV1DomainsDomainIdInsightsGetParams struct {
	Ordering *struct {
		// Embedded struct due to allOf(#/components/schemas/InsightSortBy)
		InsightSortBy `yaml:",inline"`
	} `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Id The ID of the insight
	Id *struct {
		// Embedded fields due to inline allOf schema
	} `form:"id,omitempty" json:"id,omitempty"`

	// InsightType The type of the insight
	InsightType *struct {
		// Embedded fields due to inline allOf schema
	} `form:"insight_type,omitempty" json:"insight_type,omitempty"`

	// Status The status of the insight
	Status *struct {
		// Embedded fields due to inline allOf schema
	} `form:"status,omitempty" json:"status,omitempty"`

	// Description The description of the insight. Supports '*' as a wildcard.
	Description *struct {
		// Embedded fields due to inline allOf schema
	} `form:"description,omitempty" json:"description,omitempty"`
}

// GetRequestsV1DomainsDomainIdRequestsGetParams defines parameters for GetRequestsV1DomainsDomainIdRequestsGet.
type GetRequestsV1DomainsDomainIdRequestsGetParams struct {
	// Ordering Sort the response by given field.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Ip Filter the response by IP.
	Ip *string `form:"ip,omitempty" json:"ip,omitempty"`

	// ReferenceId Filter the response by reference ID.
	ReferenceId *string `form:"reference_id,omitempty" json:"reference_id,omitempty"`

	// StatusCode Filter the response by response code.
	StatusCode *int `form:"status_code,omitempty" json:"status_code,omitempty"`

	// SecurityRuleName Filter the response by security rule name.
	SecurityRuleName *string `form:"security_rule_name,omitempty" json:"security_rule_name,omitempty"`

	// Countries Filter the response by country codes in ISO 3166-1 alpha-2 format.
	Countries *[]string `form:"countries,omitempty" json:"countries,omitempty"`

	// Actions Filter the response by actions.
	Actions *[]GetRequestsV1DomainsDomainIdRequestsGetParamsActions `form:"actions,omitempty" json:"actions,omitempty"`

	// TrafficTypes Filter the response by traffic types.
	TrafficTypes *[]TrafficType `form:"traffic_types,omitempty" json:"traffic_types,omitempty"`

	// Start Filter traffic starting from a specified date in ISO 8601 format
	Start time.Time `form:"start" json:"start"`

	// End Filter traffic up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time.
	End *time.Time `form:"end,omitempty" json:"end,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetRequestsV1DomainsDomainIdRequestsGetParamsActions defines parameters for GetRequestsV1DomainsDomainIdRequestsGet.
type GetRequestsV1DomainsDomainIdRequestsGetParamsActions string

// GetEventStatisticsV1DomainsDomainIdStatsGetParams defines parameters for GetEventStatisticsV1DomainsDomainIdStatsGet.
type GetEventStatisticsV1DomainsDomainIdStatsGetParams struct {
	// Start Filter traffic starting from a specified date in ISO 8601 format
	Start time.Time `form:"start" json:"start"`

	// End Filter traffic up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time.
	End *time.Time `form:"end,omitempty" json:"end,omitempty"`

	// Ip A list of IPs to filter event statistics.
	Ip *struct {
		// Embedded fields due to inline allOf schema
	} `form:"ip,omitempty" json:"ip,omitempty"`

	// ReferenceId A list of reference IDs to filter event statistics.
	ReferenceId *struct {
		// Embedded fields due to inline allOf schema
	} `form:"reference_id,omitempty" json:"reference_id,omitempty"`

	// Action A list of action names to filter on.
	Action *struct {
		// Embedded fields due to inline allOf schema
	} `form:"action,omitempty" json:"action,omitempty"`

	// Result A list of results to filter event statistics.
	Result *struct {
		// Embedded fields due to inline allOf schema
	} `form:"result,omitempty" json:"result,omitempty"`
}

// GetTrafficV1DomainsDomainIdTrafficGetParams defines parameters for GetTrafficV1DomainsDomainIdTrafficGet.
type GetTrafficV1DomainsDomainIdTrafficGetParams struct {
	// Resolution Specifies the granularity of the result data.
	Resolution struct {
		// Embedded struct due to allOf(#/components/schemas/Resolution)
		Resolution `yaml:",inline"`
	} `form:"resolution" json:"resolution"`

	// Start Filter traffic starting from a specified date in ISO 8601 format
	Start time.Time `form:"start" json:"start"`

	// End Filter traffic up to a specified end date in ISO 8601 format. If not provided, defaults to the current date and time.
	End *time.Time `form:"end,omitempty" json:"end,omitempty"`
}

// GetAttackMapV1IpInfoAttackMapGetParams defines parameters for GetAttackMapV1IpInfoAttackMapGet.
type GetAttackMapV1IpInfoAttackMapGetParams struct {
	// Ip The IP address to check
	Ip struct {
		union json.RawMessage
	} `form:"ip" json:"ip"`
}

// GetAttackMapV1IpInfoAttackMapGetParamsIp0 defines parameters for GetAttackMapV1IpInfoAttackMapGet.
type GetAttackMapV1IpInfoAttackMapGetParamsIp0 = string

// GetAttackMapV1IpInfoAttackMapGetParamsIp1 defines parameters for GetAttackMapV1IpInfoAttackMapGet.
type GetAttackMapV1IpInfoAttackMapGetParamsIp1 = string

// GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParams defines parameters for GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGet.
type GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParams struct {
	// Ip The IP address to check
	Ip struct {
		union json.RawMessage
	} `form:"ip" json:"ip"`
}

// GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParamsIp0 defines parameters for GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGet.
type GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParamsIp0 = string

// GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParamsIp1 defines parameters for GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGet.
type GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParamsIp1 = string

// GetBlockedRequestsV1IpInfoBlockedRequestsGetParams defines parameters for GetBlockedRequestsV1IpInfoBlockedRequestsGet.
type GetBlockedRequestsV1IpInfoBlockedRequestsGetParams struct {
	// Ip The IP address to check
	Ip struct {
		union json.RawMessage
	} `form:"ip" json:"ip"`

	// DomainId The domain ID
	DomainId int `form:"domain_id" json:"domain_id"`
}

// GetBlockedRequestsV1IpInfoBlockedRequestsGetParamsIp0 defines parameters for GetBlockedRequestsV1IpInfoBlockedRequestsGet.
type GetBlockedRequestsV1IpInfoBlockedRequestsGetParamsIp0 = string

// GetBlockedRequestsV1IpInfoBlockedRequestsGetParamsIp1 defines parameters for GetBlockedRequestsV1IpInfoBlockedRequestsGet.
type GetBlockedRequestsV1IpInfoBlockedRequestsGetParamsIp1 = string

// GetCountsV1IpInfoCountsGetParams defines parameters for GetCountsV1IpInfoCountsGet.
type GetCountsV1IpInfoCountsGetParams struct {
	// Ip The IP address to check
	Ip struct {
		union json.RawMessage
	} `form:"ip" json:"ip"`

	// DomainId The identifier for a domain. When specified, the response will exclusively contain data pertinent to the indicated domain, filtering out information from other domains.
	DomainId *int `form:"domain_id,omitempty" json:"domain_id,omitempty"`
}

// GetCountsV1IpInfoCountsGetParamsIp0 defines parameters for GetCountsV1IpInfoCountsGet.
type GetCountsV1IpInfoCountsGetParamsIp0 = string

// GetCountsV1IpInfoCountsGetParamsIp1 defines parameters for GetCountsV1IpInfoCountsGet.
type GetCountsV1IpInfoCountsGetParamsIp1 = string

// GetIpDdosInfoV1IpInfoDdosGetParams defines parameters for GetIpDdosInfoV1IpInfoDdosGet.
type GetIpDdosInfoV1IpInfoDdosGetParams struct {
	// Ip The IP address to check
	Ip struct {
		union json.RawMessage
	} `form:"ip" json:"ip"`
}

// GetIpDdosInfoV1IpInfoDdosGetParamsIp0 defines parameters for GetIpDdosInfoV1IpInfoDdosGet.
type GetIpDdosInfoV1IpInfoDdosGetParamsIp0 = string

// GetIpDdosInfoV1IpInfoDdosGetParamsIp1 defines parameters for GetIpDdosInfoV1IpInfoDdosGet.
type GetIpDdosInfoV1IpInfoDdosGetParamsIp1 = string

// GetIpInfoV1IpInfoIpInfoGetParams defines parameters for GetIpInfoV1IpInfoIpInfoGet.
type GetIpInfoV1IpInfoIpInfoGetParams struct {
	// Ip The IP address to check
	Ip struct {
		union json.RawMessage
	} `form:"ip" json:"ip"`
}

// GetIpInfoV1IpInfoIpInfoGetParamsIp0 defines parameters for GetIpInfoV1IpInfoIpInfoGet.
type GetIpInfoV1IpInfoIpInfoGetParamsIp0 = string

// GetIpInfoV1IpInfoIpInfoGetParamsIp1 defines parameters for GetIpInfoV1IpInfoIpInfoGet.
type GetIpInfoV1IpInfoIpInfoGetParamsIp1 = string

// GetTopSessionsV1IpInfoTopSessionsGetParams defines parameters for GetTopSessionsV1IpInfoTopSessionsGet.
type GetTopSessionsV1IpInfoTopSessionsGetParams struct {
	// Ip The IP address to check
	Ip struct {
		union json.RawMessage
	} `form:"ip" json:"ip"`

	// DomainId The domain ID
	DomainId int `form:"domain_id" json:"domain_id"`
}

// GetTopSessionsV1IpInfoTopSessionsGetParamsIp0 defines parameters for GetTopSessionsV1IpInfoTopSessionsGet.
type GetTopSessionsV1IpInfoTopSessionsGetParamsIp0 = string

// GetTopSessionsV1IpInfoTopSessionsGetParamsIp1 defines parameters for GetTopSessionsV1IpInfoTopSessionsGet.
type GetTopSessionsV1IpInfoTopSessionsGetParamsIp1 = string

// GetTopUrlsV1IpInfoTopUrlsGetParams defines parameters for GetTopUrlsV1IpInfoTopUrlsGet.
type GetTopUrlsV1IpInfoTopUrlsGetParams struct {
	// Ip The IP address to check
	Ip struct {
		union json.RawMessage
	} `form:"ip" json:"ip"`

	// DomainId The domain ID
	DomainId int `form:"domain_id" json:"domain_id"`
}

// GetTopUrlsV1IpInfoTopUrlsGetParamsIp0 defines parameters for GetTopUrlsV1IpInfoTopUrlsGet.
type GetTopUrlsV1IpInfoTopUrlsGetParamsIp0 = string

// GetTopUrlsV1IpInfoTopUrlsGetParamsIp1 defines parameters for GetTopUrlsV1IpInfoTopUrlsGet.
type GetTopUrlsV1IpInfoTopUrlsGetParamsIp1 = string

// GetTopUserAgentsV1IpInfoTopUserAgentsGetParams defines parameters for GetTopUserAgentsV1IpInfoTopUserAgentsGet.
type GetTopUserAgentsV1IpInfoTopUserAgentsGetParams struct {
	// Ip The IP address to check
	Ip struct {
		union json.RawMessage
	} `form:"ip" json:"ip"`

	// DomainId The domain ID
	DomainId int `form:"domain_id" json:"domain_id"`
}

// GetTopUserAgentsV1IpInfoTopUserAgentsGetParamsIp0 defines parameters for GetTopUserAgentsV1IpInfoTopUserAgentsGet.
type GetTopUserAgentsV1IpInfoTopUserAgentsGetParamsIp0 = string

// GetTopUserAgentsV1IpInfoTopUserAgentsGetParamsIp1 defines parameters for GetTopUserAgentsV1IpInfoTopUserAgentsGet.
type GetTopUserAgentsV1IpInfoTopUserAgentsGetParamsIp1 = string

// GetOrganizationsV1OrganizationsGetParams defines parameters for GetOrganizationsV1OrganizationsGet.
type GetOrganizationsV1OrganizationsGetParams struct {
	// Ordering Determine the field to order results by
	Ordering *struct {
		// Embedded fields due to inline allOf schema
	} `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Name Filter organizations by their name. Supports '*' as a wildcard character.
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PreviewCustomPageV1PreviewCustomPagePostParams defines parameters for PreviewCustomPageV1PreviewCustomPagePost.
type PreviewCustomPageV1PreviewCustomPagePostParams struct {
	PageType PageType `form:"page_type" json:"page_type"`
}

// GetInsightTypesV1SecurityInsightsTypesGetParams defines parameters for GetInsightTypesV1SecurityInsightsTypesGet.
type GetInsightTypesV1SecurityInsightsTypesGetParams struct {
	Ordering *GetInsightTypesV1SecurityInsightsTypesGetParamsOrdering `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Name Filter by the name of the insight type
	Name *struct {
		// Embedded fields due to inline allOf schema
	} `form:"name,omitempty" json:"name,omitempty"`

	// Slug Filter by the slug of the insight type
	Slug *struct {
		// Embedded fields due to inline allOf schema
	} `form:"slug,omitempty" json:"slug,omitempty"`

	// InsightFrequency Filter by the frequency of the insight type
	InsightFrequency *struct {
		// Embedded fields due to inline allOf schema
	} `form:"insight_frequency,omitempty" json:"insight_frequency,omitempty"`
}

// GetInsightTypesV1SecurityInsightsTypesGetParamsOrdering defines parameters for GetInsightTypesV1SecurityInsightsTypesGet.
type GetInsightTypesV1SecurityInsightsTypesGetParamsOrdering string

// GetStatisticsSeriesV1StatisticsSeriesGetParams defines parameters for GetStatisticsSeriesV1StatisticsSeriesGet.
type GetStatisticsSeriesV1StatisticsSeriesGetParams struct {
	// From Beginning of the requested time period (ISO 8601 format, UTC)
	From time.Time `form:"from" json:"from"`

	// To End of the requested time period (ISO 8601 format, UTC)
	To time.Time `form:"to" json:"to"`

	// Granularity Duration of the time blocks into which the data will be divided.
	Granularity GetStatisticsSeriesV1StatisticsSeriesGetParamsGranularity `form:"granularity" json:"granularity"`

	// Metrics List of metric types to retrieve statistics for.
	Metrics []GetStatisticsSeriesV1StatisticsSeriesGetParamsMetrics `form:"metrics" json:"metrics"`
}

// GetStatisticsSeriesV1StatisticsSeriesGetParamsGranularity defines parameters for GetStatisticsSeriesV1StatisticsSeriesGet.
type GetStatisticsSeriesV1StatisticsSeriesGetParamsGranularity string

// GetStatisticsSeriesV1StatisticsSeriesGetParamsMetrics defines parameters for GetStatisticsSeriesV1StatisticsSeriesGet.
type GetStatisticsSeriesV1StatisticsSeriesGetParamsMetrics string

// GetTagsV1TagsGetParams defines parameters for GetTagsV1TagsGet.
type GetTagsV1TagsGetParams struct {
	// Ordering Determine the field to order results by
	Ordering *struct {
		// Embedded fields due to inline allOf schema
	} `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Limit Number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Name Filter tags by their name. Supports '*' as a wildcard character.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Reserved Filter to include only reserved tags.
	Reserved *bool `form:"reserved,omitempty" json:"reserved,omitempty"`
}

// CreateCustomPageSetV1CustomPageSetsPostJSONRequestBody defines body for CreateCustomPageSetV1CustomPageSetsPost for application/json ContentType.
type CreateCustomPageSetV1CustomPageSetsPostJSONRequestBody = CustomPageSetCreate

// UpdateCustomPageSetV1CustomPageSetsSetIdPatchJSONRequestBody defines body for UpdateCustomPageSetV1CustomPageSetsSetIdPatch for application/json ContentType.
type UpdateCustomPageSetV1CustomPageSetsSetIdPatchJSONRequestBody = CustomPageSetUpdate

// UpdateDomainV1DomainsDomainIdPatchJSONRequestBody defines body for UpdateDomainV1DomainsDomainIdPatch for application/json ContentType.
type UpdateDomainV1DomainsDomainIdPatchJSONRequestBody = UpdateDomain

// CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostJSONRequestBody defines body for CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPost for application/json ContentType.
type CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostJSONRequestBody = AdvancedRule

// UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchJSONRequestBody defines body for UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatch for application/json ContentType.
type UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchJSONRequestBody = UpdateAdvancedRule

// UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchJSONRequestBody defines body for UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatch for application/json ContentType.
type UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchJSONRequestBody = AppModelsApiDiscoveryUpdateApiUrls

// UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchJSONRequestBody defines body for UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatch for application/json ContentType.
type UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchJSONRequestBody = UpdateApiDiscoverySettings

// UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostJSONRequestBody defines body for UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPost for application/json ContentType.
type UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostJSONRequestBody = ApiSpecFile

// CreateApiPathV1DomainsDomainIdApiPathsPostJSONRequestBody defines body for CreateApiPathV1DomainsDomainIdApiPathsPost for application/json ContentType.
type CreateApiPathV1DomainsDomainIdApiPathsPostJSONRequestBody = CreateApiPath

// UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchJSONRequestBody defines body for UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatch for application/json ContentType.
type UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchJSONRequestBody = UpdateApiPath

// CreateCustomRuleV1DomainsDomainIdCustomRulesPostJSONRequestBody defines body for CreateCustomRuleV1DomainsDomainIdCustomRulesPost for application/json ContentType.
type CreateCustomRuleV1DomainsDomainIdCustomRulesPostJSONRequestBody = CustomRule

// BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostJSONRequestBody defines body for BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePost for application/json ContentType.
type BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostJSONRequestBody = RulesBulkDelete

// UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchJSONRequestBody defines body for UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatch for application/json ContentType.
type UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchJSONRequestBody = UpdateCustomRule

// CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostJSONRequestBody defines body for CreateFirewallRuleV1DomainsDomainIdFirewallRulesPost for application/json ContentType.
type CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostJSONRequestBody = FirewallRule

// BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostJSONRequestBody defines body for BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePost for application/json ContentType.
type BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostJSONRequestBody = RulesBulkDelete

// UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchJSONRequestBody defines body for UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatch for application/json ContentType.
type UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchJSONRequestBody = UpdateFirewallRule

// CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostJSONRequestBody defines body for CreateInsightSilenceV1DomainsDomainIdInsightSilencesPost for application/json ContentType.
type CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostJSONRequestBody = CreateInsightSilencePayload

// UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchJSONRequestBody defines body for UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatch for application/json ContentType.
type UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchJSONRequestBody = UpdateInsightSilencePayload

// UpdateInsightV1DomainsDomainIdInsightsInsightIdPutJSONRequestBody defines body for UpdateInsightV1DomainsDomainIdInsightsInsightIdPut for application/json ContentType.
type UpdateInsightV1DomainsDomainIdInsightsInsightIdPutJSONRequestBody = UpdateInsightPayload

// UpdateDomainSettingsV1DomainsDomainIdSettingsPatchJSONRequestBody defines body for UpdateDomainSettingsV1DomainsDomainIdSettingsPatch for application/json ContentType.
type UpdateDomainSettingsV1DomainsDomainIdSettingsPatchJSONRequestBody = UpdateDomainSettings

// PreviewCustomPageV1PreviewCustomPagePostJSONRequestBody defines body for PreviewCustomPageV1PreviewCustomPagePost for application/json ContentType.
type PreviewCustomPageV1PreviewCustomPagePostJSONRequestBody = PreviewCustomPage

// AsAPIFieldErrorLoc00 returns the union data inside the APIFieldError_Loc_0_Item as a APIFieldErrorLoc00
func (t APIFieldError_Loc_0_Item) AsAPIFieldErrorLoc00() (APIFieldErrorLoc00, error) {
	var body APIFieldErrorLoc00
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAPIFieldErrorLoc00 overwrites any union data inside the APIFieldError_Loc_0_Item as the provided APIFieldErrorLoc00
func (t *APIFieldError_Loc_0_Item) FromAPIFieldErrorLoc00(v APIFieldErrorLoc00) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAPIFieldErrorLoc00 performs a merge with any union data inside the APIFieldError_Loc_0_Item, using the provided APIFieldErrorLoc00
func (t *APIFieldError_Loc_0_Item) MergeAPIFieldErrorLoc00(v APIFieldErrorLoc00) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAPIFieldErrorLoc01 returns the union data inside the APIFieldError_Loc_0_Item as a APIFieldErrorLoc01
func (t APIFieldError_Loc_0_Item) AsAPIFieldErrorLoc01() (APIFieldErrorLoc01, error) {
	var body APIFieldErrorLoc01
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAPIFieldErrorLoc01 overwrites any union data inside the APIFieldError_Loc_0_Item as the provided APIFieldErrorLoc01
func (t *APIFieldError_Loc_0_Item) FromAPIFieldErrorLoc01(v APIFieldErrorLoc01) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAPIFieldErrorLoc01 performs a merge with any union data inside the APIFieldError_Loc_0_Item, using the provided APIFieldErrorLoc01
func (t *APIFieldError_Loc_0_Item) MergeAPIFieldErrorLoc01(v APIFieldErrorLoc01) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t APIFieldError_Loc_0_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *APIFieldError_Loc_0_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAPIFieldErrorLoc0 returns the union data inside the APIFieldError_Loc as a APIFieldErrorLoc0
func (t APIFieldError_Loc) AsAPIFieldErrorLoc0() (APIFieldErrorLoc0, error) {
	var body APIFieldErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAPIFieldErrorLoc0 overwrites any union data inside the APIFieldError_Loc as the provided APIFieldErrorLoc0
func (t *APIFieldError_Loc) FromAPIFieldErrorLoc0(v APIFieldErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAPIFieldErrorLoc0 performs a merge with any union data inside the APIFieldError_Loc, using the provided APIFieldErrorLoc0
func (t *APIFieldError_Loc) MergeAPIFieldErrorLoc0(v APIFieldErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAPIFieldErrorLoc1 returns the union data inside the APIFieldError_Loc as a APIFieldErrorLoc1
func (t APIFieldError_Loc) AsAPIFieldErrorLoc1() (APIFieldErrorLoc1, error) {
	var body APIFieldErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAPIFieldErrorLoc1 overwrites any union data inside the APIFieldError_Loc as the provided APIFieldErrorLoc1
func (t *APIFieldError_Loc) FromAPIFieldErrorLoc1(v APIFieldErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAPIFieldErrorLoc1 performs a merge with any union data inside the APIFieldError_Loc, using the provided APIFieldErrorLoc1
func (t *APIFieldError_Loc) MergeAPIFieldErrorLoc1(v APIFieldErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t APIFieldError_Loc) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *APIFieldError_Loc) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBlockedAction0 returns the union data inside the Blocked_Action_Item as a BlockedAction0
func (t Blocked_Action_Item) AsBlockedAction0() (BlockedAction0, error) {
	var body BlockedAction0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlockedAction0 overwrites any union data inside the Blocked_Action_Item as the provided BlockedAction0
func (t *Blocked_Action_Item) FromBlockedAction0(v BlockedAction0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlockedAction0 performs a merge with any union data inside the Blocked_Action_Item, using the provided BlockedAction0
func (t *Blocked_Action_Item) MergeBlockedAction0(v BlockedAction0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlockedAction1 returns the union data inside the Blocked_Action_Item as a BlockedAction1
func (t Blocked_Action_Item) AsBlockedAction1() (BlockedAction1, error) {
	var body BlockedAction1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlockedAction1 overwrites any union data inside the Blocked_Action_Item as the provided BlockedAction1
func (t *Blocked_Action_Item) FromBlockedAction1(v BlockedAction1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlockedAction1 performs a merge with any union data inside the Blocked_Action_Item, using the provided BlockedAction1
func (t *Blocked_Action_Item) MergeBlockedAction1(v BlockedAction1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Blocked_Action_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Blocked_Action_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBlockedCountry0 returns the union data inside the Blocked_Country_Item as a BlockedCountry0
func (t Blocked_Country_Item) AsBlockedCountry0() (BlockedCountry0, error) {
	var body BlockedCountry0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlockedCountry0 overwrites any union data inside the Blocked_Country_Item as the provided BlockedCountry0
func (t *Blocked_Country_Item) FromBlockedCountry0(v BlockedCountry0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlockedCountry0 performs a merge with any union data inside the Blocked_Country_Item, using the provided BlockedCountry0
func (t *Blocked_Country_Item) MergeBlockedCountry0(v BlockedCountry0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlockedCountry1 returns the union data inside the Blocked_Country_Item as a BlockedCountry1
func (t Blocked_Country_Item) AsBlockedCountry1() (BlockedCountry1, error) {
	var body BlockedCountry1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlockedCountry1 overwrites any union data inside the Blocked_Country_Item as the provided BlockedCountry1
func (t *Blocked_Country_Item) FromBlockedCountry1(v BlockedCountry1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlockedCountry1 performs a merge with any union data inside the Blocked_Country_Item, using the provided BlockedCountry1
func (t *Blocked_Country_Item) MergeBlockedCountry1(v BlockedCountry1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Blocked_Country_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Blocked_Country_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBlockedOrg0 returns the union data inside the Blocked_Org_Item as a BlockedOrg0
func (t Blocked_Org_Item) AsBlockedOrg0() (BlockedOrg0, error) {
	var body BlockedOrg0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlockedOrg0 overwrites any union data inside the Blocked_Org_Item as the provided BlockedOrg0
func (t *Blocked_Org_Item) FromBlockedOrg0(v BlockedOrg0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlockedOrg0 performs a merge with any union data inside the Blocked_Org_Item, using the provided BlockedOrg0
func (t *Blocked_Org_Item) MergeBlockedOrg0(v BlockedOrg0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlockedOrg1 returns the union data inside the Blocked_Org_Item as a BlockedOrg1
func (t Blocked_Org_Item) AsBlockedOrg1() (BlockedOrg1, error) {
	var body BlockedOrg1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlockedOrg1 overwrites any union data inside the Blocked_Org_Item as the provided BlockedOrg1
func (t *Blocked_Org_Item) FromBlockedOrg1(v BlockedOrg1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlockedOrg1 performs a merge with any union data inside the Blocked_Org_Item, using the provided BlockedOrg1
func (t *Blocked_Org_Item) MergeBlockedOrg1(v BlockedOrg1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Blocked_Org_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Blocked_Org_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBlockedRuleName0 returns the union data inside the Blocked_RuleName_Item as a BlockedRuleName0
func (t Blocked_RuleName_Item) AsBlockedRuleName0() (BlockedRuleName0, error) {
	var body BlockedRuleName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlockedRuleName0 overwrites any union data inside the Blocked_RuleName_Item as the provided BlockedRuleName0
func (t *Blocked_RuleName_Item) FromBlockedRuleName0(v BlockedRuleName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlockedRuleName0 performs a merge with any union data inside the Blocked_RuleName_Item, using the provided BlockedRuleName0
func (t *Blocked_RuleName_Item) MergeBlockedRuleName0(v BlockedRuleName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBlockedRuleName1 returns the union data inside the Blocked_RuleName_Item as a BlockedRuleName1
func (t Blocked_RuleName_Item) AsBlockedRuleName1() (BlockedRuleName1, error) {
	var body BlockedRuleName1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBlockedRuleName1 overwrites any union data inside the Blocked_RuleName_Item as the provided BlockedRuleName1
func (t *Blocked_RuleName_Item) FromBlockedRuleName1(v BlockedRuleName1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBlockedRuleName1 performs a merge with any union data inside the Blocked_RuleName_Item, using the provided BlockedRuleName1
func (t *Blocked_RuleName_Item) MergeBlockedRuleName1(v BlockedRuleName1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Blocked_RuleName_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Blocked_RuleName_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCountAction0 returns the union data inside the Count_Action_Item as a CountAction0
func (t Count_Action_Item) AsCountAction0() (CountAction0, error) {
	var body CountAction0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCountAction0 overwrites any union data inside the Count_Action_Item as the provided CountAction0
func (t *Count_Action_Item) FromCountAction0(v CountAction0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCountAction0 performs a merge with any union data inside the Count_Action_Item, using the provided CountAction0
func (t *Count_Action_Item) MergeCountAction0(v CountAction0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCountAction1 returns the union data inside the Count_Action_Item as a CountAction1
func (t Count_Action_Item) AsCountAction1() (CountAction1, error) {
	var body CountAction1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCountAction1 overwrites any union data inside the Count_Action_Item as the provided CountAction1
func (t *Count_Action_Item) FromCountAction1(v CountAction1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCountAction1 performs a merge with any union data inside the Count_Action_Item, using the provided CountAction1
func (t *Count_Action_Item) MergeCountAction1(v CountAction1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Count_Action_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Count_Action_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCountCountry0 returns the union data inside the Count_Country_Item as a CountCountry0
func (t Count_Country_Item) AsCountCountry0() (CountCountry0, error) {
	var body CountCountry0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCountCountry0 overwrites any union data inside the Count_Country_Item as the provided CountCountry0
func (t *Count_Country_Item) FromCountCountry0(v CountCountry0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCountCountry0 performs a merge with any union data inside the Count_Country_Item, using the provided CountCountry0
func (t *Count_Country_Item) MergeCountCountry0(v CountCountry0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCountCountry1 returns the union data inside the Count_Country_Item as a CountCountry1
func (t Count_Country_Item) AsCountCountry1() (CountCountry1, error) {
	var body CountCountry1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCountCountry1 overwrites any union data inside the Count_Country_Item as the provided CountCountry1
func (t *Count_Country_Item) FromCountCountry1(v CountCountry1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCountCountry1 performs a merge with any union data inside the Count_Country_Item, using the provided CountCountry1
func (t *Count_Country_Item) MergeCountCountry1(v CountCountry1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Count_Country_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Count_Country_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCountOrg0 returns the union data inside the Count_Org_Item as a CountOrg0
func (t Count_Org_Item) AsCountOrg0() (CountOrg0, error) {
	var body CountOrg0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCountOrg0 overwrites any union data inside the Count_Org_Item as the provided CountOrg0
func (t *Count_Org_Item) FromCountOrg0(v CountOrg0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCountOrg0 performs a merge with any union data inside the Count_Org_Item, using the provided CountOrg0
func (t *Count_Org_Item) MergeCountOrg0(v CountOrg0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCountOrg1 returns the union data inside the Count_Org_Item as a CountOrg1
func (t Count_Org_Item) AsCountOrg1() (CountOrg1, error) {
	var body CountOrg1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCountOrg1 overwrites any union data inside the Count_Org_Item as the provided CountOrg1
func (t *Count_Org_Item) FromCountOrg1(v CountOrg1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCountOrg1 performs a merge with any union data inside the Count_Org_Item, using the provided CountOrg1
func (t *Count_Org_Item) MergeCountOrg1(v CountOrg1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Count_Org_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Count_Org_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCountRuleName0 returns the union data inside the Count_RuleName_Item as a CountRuleName0
func (t Count_RuleName_Item) AsCountRuleName0() (CountRuleName0, error) {
	var body CountRuleName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCountRuleName0 overwrites any union data inside the Count_RuleName_Item as the provided CountRuleName0
func (t *Count_RuleName_Item) FromCountRuleName0(v CountRuleName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCountRuleName0 performs a merge with any union data inside the Count_RuleName_Item, using the provided CountRuleName0
func (t *Count_RuleName_Item) MergeCountRuleName0(v CountRuleName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCountRuleName1 returns the union data inside the Count_RuleName_Item as a CountRuleName1
func (t Count_RuleName_Item) AsCountRuleName1() (CountRuleName1, error) {
	var body CountRuleName1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCountRuleName1 overwrites any union data inside the Count_RuleName_Item as the provided CountRuleName1
func (t *Count_RuleName_Item) FromCountRuleName1(v CountRuleName1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCountRuleName1 performs a merge with any union data inside the Count_RuleName_Item, using the provided CountRuleName1
func (t *Count_RuleName_Item) MergeCountRuleName1(v CountRuleName1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Count_RuleName_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Count_RuleName_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIpConditionIpAddress0 returns the union data inside the IpCondition_IpAddress as a IpConditionIpAddress0
func (t IpCondition_IpAddress) AsIpConditionIpAddress0() (IpConditionIpAddress0, error) {
	var body IpConditionIpAddress0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIpConditionIpAddress0 overwrites any union data inside the IpCondition_IpAddress as the provided IpConditionIpAddress0
func (t *IpCondition_IpAddress) FromIpConditionIpAddress0(v IpConditionIpAddress0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIpConditionIpAddress0 performs a merge with any union data inside the IpCondition_IpAddress, using the provided IpConditionIpAddress0
func (t *IpCondition_IpAddress) MergeIpConditionIpAddress0(v IpConditionIpAddress0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIpConditionIpAddress1 returns the union data inside the IpCondition_IpAddress as a IpConditionIpAddress1
func (t IpCondition_IpAddress) AsIpConditionIpAddress1() (IpConditionIpAddress1, error) {
	var body IpConditionIpAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIpConditionIpAddress1 overwrites any union data inside the IpCondition_IpAddress as the provided IpConditionIpAddress1
func (t *IpCondition_IpAddress) FromIpConditionIpAddress1(v IpConditionIpAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIpConditionIpAddress1 performs a merge with any union data inside the IpCondition_IpAddress, using the provided IpConditionIpAddress1
func (t *IpCondition_IpAddress) MergeIpConditionIpAddress1(v IpConditionIpAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IpCondition_IpAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IpCondition_IpAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIpRangeConditionLowerBound0 returns the union data inside the IpRangeCondition_LowerBound as a IpRangeConditionLowerBound0
func (t IpRangeCondition_LowerBound) AsIpRangeConditionLowerBound0() (IpRangeConditionLowerBound0, error) {
	var body IpRangeConditionLowerBound0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIpRangeConditionLowerBound0 overwrites any union data inside the IpRangeCondition_LowerBound as the provided IpRangeConditionLowerBound0
func (t *IpRangeCondition_LowerBound) FromIpRangeConditionLowerBound0(v IpRangeConditionLowerBound0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIpRangeConditionLowerBound0 performs a merge with any union data inside the IpRangeCondition_LowerBound, using the provided IpRangeConditionLowerBound0
func (t *IpRangeCondition_LowerBound) MergeIpRangeConditionLowerBound0(v IpRangeConditionLowerBound0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIpRangeConditionLowerBound1 returns the union data inside the IpRangeCondition_LowerBound as a IpRangeConditionLowerBound1
func (t IpRangeCondition_LowerBound) AsIpRangeConditionLowerBound1() (IpRangeConditionLowerBound1, error) {
	var body IpRangeConditionLowerBound1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIpRangeConditionLowerBound1 overwrites any union data inside the IpRangeCondition_LowerBound as the provided IpRangeConditionLowerBound1
func (t *IpRangeCondition_LowerBound) FromIpRangeConditionLowerBound1(v IpRangeConditionLowerBound1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIpRangeConditionLowerBound1 performs a merge with any union data inside the IpRangeCondition_LowerBound, using the provided IpRangeConditionLowerBound1
func (t *IpRangeCondition_LowerBound) MergeIpRangeConditionLowerBound1(v IpRangeConditionLowerBound1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IpRangeCondition_LowerBound) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IpRangeCondition_LowerBound) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIpRangeConditionUpperBound0 returns the union data inside the IpRangeCondition_UpperBound as a IpRangeConditionUpperBound0
func (t IpRangeCondition_UpperBound) AsIpRangeConditionUpperBound0() (IpRangeConditionUpperBound0, error) {
	var body IpRangeConditionUpperBound0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIpRangeConditionUpperBound0 overwrites any union data inside the IpRangeCondition_UpperBound as the provided IpRangeConditionUpperBound0
func (t *IpRangeCondition_UpperBound) FromIpRangeConditionUpperBound0(v IpRangeConditionUpperBound0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIpRangeConditionUpperBound0 performs a merge with any union data inside the IpRangeCondition_UpperBound, using the provided IpRangeConditionUpperBound0
func (t *IpRangeCondition_UpperBound) MergeIpRangeConditionUpperBound0(v IpRangeConditionUpperBound0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIpRangeConditionUpperBound1 returns the union data inside the IpRangeCondition_UpperBound as a IpRangeConditionUpperBound1
func (t IpRangeCondition_UpperBound) AsIpRangeConditionUpperBound1() (IpRangeConditionUpperBound1, error) {
	var body IpRangeConditionUpperBound1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIpRangeConditionUpperBound1 overwrites any union data inside the IpRangeCondition_UpperBound as the provided IpRangeConditionUpperBound1
func (t *IpRangeCondition_UpperBound) FromIpRangeConditionUpperBound1(v IpRangeConditionUpperBound1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIpRangeConditionUpperBound1 performs a merge with any union data inside the IpRangeCondition_UpperBound, using the provided IpRangeConditionUpperBound1
func (t *IpRangeCondition_UpperBound) MergeIpRangeConditionUpperBound1(v IpRangeConditionUpperBound1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t IpRangeCondition_UpperBound) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *IpRangeCondition_UpperBound) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// ClientSDK which conforms to the OpenAPI3 specification for this service.
type ClientSDK struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*ClientSDK) error

// Creates a new ClientSDK, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*ClientSDK, error) {
	// create a client with sane default values
	client := ClientSDK{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *ClientSDK) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *ClientSDK) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGet request
	GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClientInfoV1ClientsMeGet request
	GetClientInfoV1ClientsMeGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomPageSetsV1CustomPageSetsGet request
	GetCustomPageSetsV1CustomPageSetsGet(ctx context.Context, params *GetCustomPageSetsV1CustomPageSetsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomPageSetV1CustomPageSetsPostWithBody request with any body
	CreateCustomPageSetV1CustomPageSetsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomPageSetV1CustomPageSetsPost(ctx context.Context, body CreateCustomPageSetV1CustomPageSetsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomPageSetV1CustomPageSetsSetIdDelete request
	DeleteCustomPageSetV1CustomPageSetsSetIdDelete(ctx context.Context, setId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomPageSetV1CustomPageSetsSetIdGet request
	GetCustomPageSetV1CustomPageSetsSetIdGet(ctx context.Context, setId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithBody request with any body
	UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithBody(ctx context.Context, setId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomPageSetV1CustomPageSetsSetIdPatch(ctx context.Context, setId int, body UpdateCustomPageSetV1CustomPageSetsSetIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDomainsV1DomainsGet request
	GetDomainsV1DomainsGet(ctx context.Context, params *GetDomainsV1DomainsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDomainV1DomainsDomainIdDelete request
	DeleteDomainV1DomainsDomainIdDelete(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDomainV1DomainsDomainIdGet request
	GetDomainV1DomainsDomainIdGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDomainV1DomainsDomainIdPatchWithBody request with any body
	UpdateDomainV1DomainsDomainIdPatchWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDomainV1DomainsDomainIdPatch(ctx context.Context, domainId int, body UpdateDomainV1DomainsDomainIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGet request
	GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGet(ctx context.Context, domainId int, params *GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithBody request with any body
	CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPost(ctx context.Context, domainId int, body CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDelete request
	DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDelete(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGet request
	GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGet(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithBody request with any body
	UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithBody(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatch(ctx context.Context, domainId int, ruleId int, body UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatch request
	ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatch(ctx context.Context, domainId int, ruleId int, action struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
		CustomerRuleState `yaml:",inline"`
	}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGet request
	GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithBody request with any body
	UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatch(ctx context.Context, domainId int, body UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPost request
	ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPost(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGet request
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGet(ctx context.Context, domainId int, params *GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGet request
	GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGet(ctx context.Context, domainId int, scanId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGet request
	GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithBody request with any body
	UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatch(ctx context.Context, domainId int, body UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithBody request with any body
	UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPost(ctx context.Context, domainId int, body UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiGroupsV1DomainsDomainIdApiPathGroupsGet request
	GetApiGroupsV1DomainsDomainIdApiPathGroupsGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPathsV1DomainsDomainIdApiPathsGet request
	GetApiPathsV1DomainsDomainIdApiPathsGet(ctx context.Context, domainId int, params *GetApiPathsV1DomainsDomainIdApiPathsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiPathV1DomainsDomainIdApiPathsPostWithBody request with any body
	CreateApiPathV1DomainsDomainIdApiPathsPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiPathV1DomainsDomainIdApiPathsPost(ctx context.Context, domainId int, body CreateApiPathV1DomainsDomainIdApiPathsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiPathV1DomainsDomainIdApiPathsPathIdDelete request
	DeleteApiPathV1DomainsDomainIdApiPathsPathIdDelete(ctx context.Context, domainId int, pathId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiPathV1DomainsDomainIdApiPathsPathIdGet request
	GetApiPathV1DomainsDomainIdApiPathsPathIdGet(ctx context.Context, domainId int, pathId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithBody request with any body
	UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithBody(ctx context.Context, domainId int, pathId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatch(ctx context.Context, domainId int, pathId openapi_types.UUID, body UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomRulesV1DomainsDomainIdCustomRulesGet request
	GetCustomRulesV1DomainsDomainIdCustomRulesGet(ctx context.Context, domainId int, params *GetCustomRulesV1DomainsDomainIdCustomRulesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithBody request with any body
	CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomRuleV1DomainsDomainIdCustomRulesPost(ctx context.Context, domainId int, body CreateCustomRuleV1DomainsDomainIdCustomRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithBody request with any body
	BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePost(ctx context.Context, domainId int, body BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDelete request
	DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDelete(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGet request
	GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGet(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithBody request with any body
	UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithBody(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatch(ctx context.Context, domainId int, ruleId int, body UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatch request
	ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatch(ctx context.Context, domainId int, ruleId int, action struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
		CustomerRuleState `yaml:",inline"`
	}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDdosAttacksV1DomainsDomainIdDdosAttacksGet request
	GetDdosAttacksV1DomainsDomainIdDdosAttacksGet(ctx context.Context, domainId int, params *GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDdosInfoV1DomainsDomainIdDdosInfoGet request
	GetDdosInfoV1DomainsDomainIdDdosInfoGet(ctx context.Context, domainId int, params *GetDdosInfoV1DomainsDomainIdDdosInfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFirewallRulesV1DomainsDomainIdFirewallRulesGet request
	GetFirewallRulesV1DomainsDomainIdFirewallRulesGet(ctx context.Context, domainId int, params *GetFirewallRulesV1DomainsDomainIdFirewallRulesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithBody request with any body
	CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFirewallRuleV1DomainsDomainIdFirewallRulesPost(ctx context.Context, domainId int, body CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithBody request with any body
	BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePost(ctx context.Context, domainId int, body BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDelete request
	DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDelete(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGet request
	GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGet(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithBody request with any body
	UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithBody(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatch(ctx context.Context, domainId int, ruleId int, body UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatch request
	ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatch(ctx context.Context, domainId int, ruleId int, action struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
		CustomerRuleState `yaml:",inline"`
	}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInsightSilencesV1DomainsDomainIdInsightSilencesGet request
	GetInsightSilencesV1DomainsDomainIdInsightSilencesGet(ctx context.Context, domainId int, params *GetInsightSilencesV1DomainsDomainIdInsightSilencesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithBody request with any body
	CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInsightSilenceV1DomainsDomainIdInsightSilencesPost(ctx context.Context, domainId int, body CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDelete request
	DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDelete(ctx context.Context, domainId int, silenceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGet request
	GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGet(ctx context.Context, domainId int, silenceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithBody request with any body
	UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithBody(ctx context.Context, domainId int, silenceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatch(ctx context.Context, domainId int, silenceId openapi_types.UUID, body UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInsightsV1DomainsDomainIdInsightsGet request
	GetInsightsV1DomainsDomainIdInsightsGet(ctx context.Context, domainId int, params *GetInsightsV1DomainsDomainIdInsightsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInsightV1DomainsDomainIdInsightsInsightIdGet request
	GetInsightV1DomainsDomainIdInsightsInsightIdGet(ctx context.Context, domainId int, insightId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithBody request with any body
	UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithBody(ctx context.Context, domainId int, insightId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateInsightV1DomainsDomainIdInsightsInsightIdPut(ctx context.Context, domainId int, insightId openapi_types.UUID, body UpdateInsightV1DomainsDomainIdInsightsInsightIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatch request
	ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatch(ctx context.Context, domainId int, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestsV1DomainsDomainIdRequestsGet request
	GetRequestsV1DomainsDomainIdRequestsGet(ctx context.Context, domainId int, params *GetRequestsV1DomainsDomainIdRequestsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGet request
	GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGet(ctx context.Context, domainId int, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRuleSetListV1DomainsDomainIdRuleSetsGet request
	GetRuleSetListV1DomainsDomainIdRuleSetsGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDomainSettingsV1DomainsDomainIdSettingsGet request
	GetDomainSettingsV1DomainsDomainIdSettingsGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithBody request with any body
	UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDomainSettingsV1DomainsDomainIdSettingsPatch(ctx context.Context, domainId int, body UpdateDomainSettingsV1DomainsDomainIdSettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventStatisticsV1DomainsDomainIdStatsGet request
	GetEventStatisticsV1DomainsDomainIdStatsGet(ctx context.Context, domainId int, params *GetEventStatisticsV1DomainsDomainIdStatsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrafficV1DomainsDomainIdTrafficGet request
	GetTrafficV1DomainsDomainIdTrafficGet(ctx context.Context, domainId int, params *GetTrafficV1DomainsDomainIdTrafficGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttackMapV1IpInfoAttackMapGet request
	GetAttackMapV1IpInfoAttackMapGet(ctx context.Context, params *GetAttackMapV1IpInfoAttackMapGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGet request
	GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGet(ctx context.Context, params *GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBlockedRequestsV1IpInfoBlockedRequestsGet request
	GetBlockedRequestsV1IpInfoBlockedRequestsGet(ctx context.Context, params *GetBlockedRequestsV1IpInfoBlockedRequestsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCountsV1IpInfoCountsGet request
	GetCountsV1IpInfoCountsGet(ctx context.Context, params *GetCountsV1IpInfoCountsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpDdosInfoV1IpInfoDdosGet request
	GetIpDdosInfoV1IpInfoDdosGet(ctx context.Context, params *GetIpDdosInfoV1IpInfoDdosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIpInfoV1IpInfoIpInfoGet request
	GetIpInfoV1IpInfoIpInfoGet(ctx context.Context, params *GetIpInfoV1IpInfoIpInfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopSessionsV1IpInfoTopSessionsGet request
	GetTopSessionsV1IpInfoTopSessionsGet(ctx context.Context, params *GetTopSessionsV1IpInfoTopSessionsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopUrlsV1IpInfoTopUrlsGet request
	GetTopUrlsV1IpInfoTopUrlsGet(ctx context.Context, params *GetTopUrlsV1IpInfoTopUrlsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopUserAgentsV1IpInfoTopUserAgentsGet request
	GetTopUserAgentsV1IpInfoTopUserAgentsGet(ctx context.Context, params *GetTopUserAgentsV1IpInfoTopUserAgentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsV1OrganizationsGet request
	GetOrganizationsV1OrganizationsGet(ctx context.Context, params *GetOrganizationsV1OrganizationsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PreviewCustomPageV1PreviewCustomPagePostWithBody request with any body
	PreviewCustomPageV1PreviewCustomPagePostWithBody(ctx context.Context, params *PreviewCustomPageV1PreviewCustomPagePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PreviewCustomPageV1PreviewCustomPagePost(ctx context.Context, params *PreviewCustomPageV1PreviewCustomPagePostParams, body PreviewCustomPageV1PreviewCustomPagePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInsightTypesV1SecurityInsightsTypesGet request
	GetInsightTypesV1SecurityInsightsTypesGet(ctx context.Context, params *GetInsightTypesV1SecurityInsightsTypesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatisticsSeriesV1StatisticsSeriesGet request
	GetStatisticsSeriesV1StatisticsSeriesGet(ctx context.Context, params *GetStatisticsSeriesV1StatisticsSeriesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsV1TagsGet request
	GetTagsV1TagsGet(ctx context.Context, params *GetTagsV1TagsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *ClientSDK) GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetClientInfoV1ClientsMeGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientInfoV1ClientsMeGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetCustomPageSetsV1CustomPageSetsGet(ctx context.Context, params *GetCustomPageSetsV1CustomPageSetsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomPageSetsV1CustomPageSetsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateCustomPageSetV1CustomPageSetsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomPageSetV1CustomPageSetsPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateCustomPageSetV1CustomPageSetsPost(ctx context.Context, body CreateCustomPageSetV1CustomPageSetsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomPageSetV1CustomPageSetsPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) DeleteCustomPageSetV1CustomPageSetsSetIdDelete(ctx context.Context, setId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomPageSetV1CustomPageSetsSetIdDeleteRequest(c.Server, setId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetCustomPageSetV1CustomPageSetsSetIdGet(ctx context.Context, setId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomPageSetV1CustomPageSetsSetIdGetRequest(c.Server, setId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithBody(ctx context.Context, setId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomPageSetV1CustomPageSetsSetIdPatchRequestWithBody(c.Server, setId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateCustomPageSetV1CustomPageSetsSetIdPatch(ctx context.Context, setId int, body UpdateCustomPageSetV1CustomPageSetsSetIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomPageSetV1CustomPageSetsSetIdPatchRequest(c.Server, setId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetDomainsV1DomainsGet(ctx context.Context, params *GetDomainsV1DomainsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDomainsV1DomainsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) DeleteDomainV1DomainsDomainIdDelete(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDomainV1DomainsDomainIdDeleteRequest(c.Server, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetDomainV1DomainsDomainIdGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDomainV1DomainsDomainIdGetRequest(c.Server, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateDomainV1DomainsDomainIdPatchWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDomainV1DomainsDomainIdPatchRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateDomainV1DomainsDomainIdPatch(ctx context.Context, domainId int, body UpdateDomainV1DomainsDomainIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDomainV1DomainsDomainIdPatchRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGet(ctx context.Context, domainId int, params *GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPost(ctx context.Context, domainId int, body CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDelete(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteRequest(c.Server, domainId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGet(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetRequest(c.Server, domainId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithBody(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchRequestWithBody(c.Server, domainId, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatch(ctx context.Context, domainId int, ruleId int, body UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchRequest(c.Server, domainId, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatch(ctx context.Context, domainId int, ruleId int, action struct {
	// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
	CustomerRuleState `yaml:",inline"`
}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchRequest(c.Server, domainId, ruleId, action)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetRequest(c.Server, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatch(ctx context.Context, domainId int, body UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPost(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostRequest(c.Server, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGet(ctx context.Context, domainId int, params *GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGet(ctx context.Context, domainId int, scanId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetRequest(c.Server, domainId, scanId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetRequest(c.Server, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatch(ctx context.Context, domainId int, body UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPost(ctx context.Context, domainId int, body UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetApiGroupsV1DomainsDomainIdApiPathGroupsGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiGroupsV1DomainsDomainIdApiPathGroupsGetRequest(c.Server, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetApiPathsV1DomainsDomainIdApiPathsGet(ctx context.Context, domainId int, params *GetApiPathsV1DomainsDomainIdApiPathsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPathsV1DomainsDomainIdApiPathsGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateApiPathV1DomainsDomainIdApiPathsPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiPathV1DomainsDomainIdApiPathsPostRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateApiPathV1DomainsDomainIdApiPathsPost(ctx context.Context, domainId int, body CreateApiPathV1DomainsDomainIdApiPathsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiPathV1DomainsDomainIdApiPathsPostRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) DeleteApiPathV1DomainsDomainIdApiPathsPathIdDelete(ctx context.Context, domainId int, pathId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteRequest(c.Server, domainId, pathId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetApiPathV1DomainsDomainIdApiPathsPathIdGet(ctx context.Context, domainId int, pathId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiPathV1DomainsDomainIdApiPathsPathIdGetRequest(c.Server, domainId, pathId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithBody(ctx context.Context, domainId int, pathId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchRequestWithBody(c.Server, domainId, pathId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatch(ctx context.Context, domainId int, pathId openapi_types.UUID, body UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchRequest(c.Server, domainId, pathId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetCustomRulesV1DomainsDomainIdCustomRulesGet(ctx context.Context, domainId int, params *GetCustomRulesV1DomainsDomainIdCustomRulesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomRulesV1DomainsDomainIdCustomRulesGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomRuleV1DomainsDomainIdCustomRulesPostRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateCustomRuleV1DomainsDomainIdCustomRulesPost(ctx context.Context, domainId int, body CreateCustomRuleV1DomainsDomainIdCustomRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomRuleV1DomainsDomainIdCustomRulesPostRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePost(ctx context.Context, domainId int, body BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDelete(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteRequest(c.Server, domainId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGet(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetRequest(c.Server, domainId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithBody(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchRequestWithBody(c.Server, domainId, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatch(ctx context.Context, domainId int, ruleId int, body UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchRequest(c.Server, domainId, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatch(ctx context.Context, domainId int, ruleId int, action struct {
	// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
	CustomerRuleState `yaml:",inline"`
}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchRequest(c.Server, domainId, ruleId, action)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetDdosAttacksV1DomainsDomainIdDdosAttacksGet(ctx context.Context, domainId int, params *GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDdosAttacksV1DomainsDomainIdDdosAttacksGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetDdosInfoV1DomainsDomainIdDdosInfoGet(ctx context.Context, domainId int, params *GetDdosInfoV1DomainsDomainIdDdosInfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDdosInfoV1DomainsDomainIdDdosInfoGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetFirewallRulesV1DomainsDomainIdFirewallRulesGet(ctx context.Context, domainId int, params *GetFirewallRulesV1DomainsDomainIdFirewallRulesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFirewallRulesV1DomainsDomainIdFirewallRulesGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateFirewallRuleV1DomainsDomainIdFirewallRulesPost(ctx context.Context, domainId int, body CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePost(ctx context.Context, domainId int, body BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDelete(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteRequest(c.Server, domainId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGet(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetRequest(c.Server, domainId, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithBody(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchRequestWithBody(c.Server, domainId, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatch(ctx context.Context, domainId int, ruleId int, body UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchRequest(c.Server, domainId, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatch(ctx context.Context, domainId int, ruleId int, action struct {
	// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
	CustomerRuleState `yaml:",inline"`
}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchRequest(c.Server, domainId, ruleId, action)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetInsightSilencesV1DomainsDomainIdInsightSilencesGet(ctx context.Context, domainId int, params *GetInsightSilencesV1DomainsDomainIdInsightSilencesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInsightSilencesV1DomainsDomainIdInsightSilencesGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) CreateInsightSilenceV1DomainsDomainIdInsightSilencesPost(ctx context.Context, domainId int, body CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDelete(ctx context.Context, domainId int, silenceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteRequest(c.Server, domainId, silenceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGet(ctx context.Context, domainId int, silenceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetRequest(c.Server, domainId, silenceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithBody(ctx context.Context, domainId int, silenceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchRequestWithBody(c.Server, domainId, silenceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatch(ctx context.Context, domainId int, silenceId openapi_types.UUID, body UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchRequest(c.Server, domainId, silenceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetInsightsV1DomainsDomainIdInsightsGet(ctx context.Context, domainId int, params *GetInsightsV1DomainsDomainIdInsightsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInsightsV1DomainsDomainIdInsightsGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetInsightV1DomainsDomainIdInsightsInsightIdGet(ctx context.Context, domainId int, insightId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInsightV1DomainsDomainIdInsightsInsightIdGetRequest(c.Server, domainId, insightId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithBody(ctx context.Context, domainId int, insightId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInsightV1DomainsDomainIdInsightsInsightIdPutRequestWithBody(c.Server, domainId, insightId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateInsightV1DomainsDomainIdInsightsInsightIdPut(ctx context.Context, domainId int, insightId openapi_types.UUID, body UpdateInsightV1DomainsDomainIdInsightsInsightIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInsightV1DomainsDomainIdInsightsInsightIdPutRequest(c.Server, domainId, insightId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatch(ctx context.Context, domainId int, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchRequest(c.Server, domainId, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetRequestsV1DomainsDomainIdRequestsGet(ctx context.Context, domainId int, params *GetRequestsV1DomainsDomainIdRequestsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestsV1DomainsDomainIdRequestsGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGet(ctx context.Context, domainId int, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetRequest(c.Server, domainId, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetRuleSetListV1DomainsDomainIdRuleSetsGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRuleSetListV1DomainsDomainIdRuleSetsGetRequest(c.Server, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetDomainSettingsV1DomainsDomainIdSettingsGet(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDomainSettingsV1DomainsDomainIdSettingsGetRequest(c.Server, domainId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithBody(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDomainSettingsV1DomainsDomainIdSettingsPatchRequestWithBody(c.Server, domainId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) UpdateDomainSettingsV1DomainsDomainIdSettingsPatch(ctx context.Context, domainId int, body UpdateDomainSettingsV1DomainsDomainIdSettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDomainSettingsV1DomainsDomainIdSettingsPatchRequest(c.Server, domainId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetEventStatisticsV1DomainsDomainIdStatsGet(ctx context.Context, domainId int, params *GetEventStatisticsV1DomainsDomainIdStatsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventStatisticsV1DomainsDomainIdStatsGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetTrafficV1DomainsDomainIdTrafficGet(ctx context.Context, domainId int, params *GetTrafficV1DomainsDomainIdTrafficGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrafficV1DomainsDomainIdTrafficGetRequest(c.Server, domainId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetAttackMapV1IpInfoAttackMapGet(ctx context.Context, params *GetAttackMapV1IpInfoAttackMapGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttackMapV1IpInfoAttackMapGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGet(ctx context.Context, params *GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetBlockedRequestsV1IpInfoBlockedRequestsGet(ctx context.Context, params *GetBlockedRequestsV1IpInfoBlockedRequestsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBlockedRequestsV1IpInfoBlockedRequestsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetCountsV1IpInfoCountsGet(ctx context.Context, params *GetCountsV1IpInfoCountsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCountsV1IpInfoCountsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetIpDdosInfoV1IpInfoDdosGet(ctx context.Context, params *GetIpDdosInfoV1IpInfoDdosGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpDdosInfoV1IpInfoDdosGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetIpInfoV1IpInfoIpInfoGet(ctx context.Context, params *GetIpInfoV1IpInfoIpInfoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIpInfoV1IpInfoIpInfoGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetTopSessionsV1IpInfoTopSessionsGet(ctx context.Context, params *GetTopSessionsV1IpInfoTopSessionsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopSessionsV1IpInfoTopSessionsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetTopUrlsV1IpInfoTopUrlsGet(ctx context.Context, params *GetTopUrlsV1IpInfoTopUrlsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopUrlsV1IpInfoTopUrlsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetTopUserAgentsV1IpInfoTopUserAgentsGet(ctx context.Context, params *GetTopUserAgentsV1IpInfoTopUserAgentsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopUserAgentsV1IpInfoTopUserAgentsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetOrganizationsV1OrganizationsGet(ctx context.Context, params *GetOrganizationsV1OrganizationsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsV1OrganizationsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) PreviewCustomPageV1PreviewCustomPagePostWithBody(ctx context.Context, params *PreviewCustomPageV1PreviewCustomPagePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreviewCustomPageV1PreviewCustomPagePostRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) PreviewCustomPageV1PreviewCustomPagePost(ctx context.Context, params *PreviewCustomPageV1PreviewCustomPagePostParams, body PreviewCustomPageV1PreviewCustomPagePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPreviewCustomPageV1PreviewCustomPagePostRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetInsightTypesV1SecurityInsightsTypesGet(ctx context.Context, params *GetInsightTypesV1SecurityInsightsTypesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInsightTypesV1SecurityInsightsTypesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetStatisticsSeriesV1StatisticsSeriesGet(ctx context.Context, params *GetStatisticsSeriesV1StatisticsSeriesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatisticsSeriesV1StatisticsSeriesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *ClientSDK) GetTagsV1TagsGet(ctx context.Context, params *GetTagsV1TagsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsV1TagsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetRequest generates requests for GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGet
func NewGetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/advanced-rules/descriptor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientInfoV1ClientsMeGetRequest generates requests for GetClientInfoV1ClientsMeGet
func NewGetClientInfoV1ClientsMeGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/clients/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomPageSetsV1CustomPageSetsGetRequest generates requests for GetCustomPageSetsV1CustomPageSetsGet
func NewGetCustomPageSetsV1CustomPageSetsGetRequest(server string, params *GetCustomPageSetsV1CustomPageSetsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom-page-sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomPageSetV1CustomPageSetsPostRequest calls the generic CreateCustomPageSetV1CustomPageSetsPost builder with application/json body
func NewCreateCustomPageSetV1CustomPageSetsPostRequest(server string, body CreateCustomPageSetV1CustomPageSetsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomPageSetV1CustomPageSetsPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCustomPageSetV1CustomPageSetsPostRequestWithBody generates requests for CreateCustomPageSetV1CustomPageSetsPost with any type of body
func NewCreateCustomPageSetV1CustomPageSetsPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom-page-sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomPageSetV1CustomPageSetsSetIdDeleteRequest generates requests for DeleteCustomPageSetV1CustomPageSetsSetIdDelete
func NewDeleteCustomPageSetV1CustomPageSetsSetIdDeleteRequest(server string, setId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "set_id", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom-page-sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomPageSetV1CustomPageSetsSetIdGetRequest generates requests for GetCustomPageSetV1CustomPageSetsSetIdGet
func NewGetCustomPageSetV1CustomPageSetsSetIdGetRequest(server string, setId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "set_id", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom-page-sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomPageSetV1CustomPageSetsSetIdPatchRequest calls the generic UpdateCustomPageSetV1CustomPageSetsSetIdPatch builder with application/json body
func NewUpdateCustomPageSetV1CustomPageSetsSetIdPatchRequest(server string, setId int, body UpdateCustomPageSetV1CustomPageSetsSetIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomPageSetV1CustomPageSetsSetIdPatchRequestWithBody(server, setId, "application/json", bodyReader)
}

// NewUpdateCustomPageSetV1CustomPageSetsSetIdPatchRequestWithBody generates requests for UpdateCustomPageSetV1CustomPageSetsSetIdPatch with any type of body
func NewUpdateCustomPageSetV1CustomPageSetsSetIdPatchRequestWithBody(server string, setId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "set_id", runtime.ParamLocationPath, setId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/custom-page-sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDomainsV1DomainsGetRequest generates requests for GetDomainsV1DomainsGet
func NewGetDomainsV1DomainsGetRequest(server string, params *GetDomainsV1DomainsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDomainV1DomainsDomainIdDeleteRequest generates requests for DeleteDomainV1DomainsDomainIdDelete
func NewDeleteDomainV1DomainsDomainIdDeleteRequest(server string, domainId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDomainV1DomainsDomainIdGetRequest generates requests for GetDomainV1DomainsDomainIdGet
func NewGetDomainV1DomainsDomainIdGetRequest(server string, domainId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDomainV1DomainsDomainIdPatchRequest calls the generic UpdateDomainV1DomainsDomainIdPatch builder with application/json body
func NewUpdateDomainV1DomainsDomainIdPatchRequest(server string, domainId int, body UpdateDomainV1DomainsDomainIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDomainV1DomainsDomainIdPatchRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewUpdateDomainV1DomainsDomainIdPatchRequestWithBody generates requests for UpdateDomainV1DomainsDomainIdPatch with any type of body
func NewUpdateDomainV1DomainsDomainIdPatchRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetRequest generates requests for GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGet
func NewGetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetRequest(server string, domainId int, params *GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/advanced-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Phase != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "phase", runtime.ParamLocationQuery, *params.Phase); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostRequest calls the generic CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPost builder with application/json body
func NewCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostRequest(server string, domainId int, body CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostRequestWithBody generates requests for CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPost with any type of body
func NewCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/advanced-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteRequest generates requests for DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDelete
func NewDeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteRequest(server string, domainId int, ruleId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/advanced-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetRequest generates requests for GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGet
func NewGetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetRequest(server string, domainId int, ruleId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/advanced-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchRequest calls the generic UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatch builder with application/json body
func NewUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchRequest(server string, domainId int, ruleId int, body UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchRequestWithBody(server, domainId, ruleId, "application/json", bodyReader)
}

// NewUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchRequestWithBody generates requests for UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatch with any type of body
func NewUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchRequestWithBody(server string, domainId int, ruleId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/advanced-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchRequest generates requests for ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatch
func NewToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchRequest(server string, domainId int, ruleId int, action struct {
	// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
	CustomerRuleState `yaml:",inline"`
}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "action", runtime.ParamLocationPath, action)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/advanced-rules/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetRequest generates requests for GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGet
func NewGetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetRequest(server string, domainId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-discovery/api-urls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchRequest calls the generic UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatch builder with application/json body
func NewUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchRequest(server string, domainId int, body UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchRequestWithBody generates requests for UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatch with any type of body
func NewUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-discovery/api-urls", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostRequest generates requests for ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPost
func NewScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostRequest(server string, domainId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-discovery/scan", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetRequest generates requests for GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGet
func NewGetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetRequest(server string, domainId int, params *GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-discovery/scan-results", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Message != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, *params.Message); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetRequest generates requests for GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGet
func NewGetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetRequest(server string, domainId int, scanId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "scan_id", runtime.ParamLocationPath, scanId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-discovery/scan-results/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetRequest generates requests for GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGet
func NewGetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetRequest(server string, domainId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-discovery/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchRequest calls the generic UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatch builder with application/json body
func NewUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchRequest(server string, domainId int, body UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchRequestWithBody generates requests for UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatch with any type of body
func NewUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-discovery/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostRequest calls the generic UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPost builder with application/json body
func NewUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostRequest(server string, domainId int, body UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostRequestWithBody generates requests for UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPost with any type of body
func NewUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-discovery/upload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiGroupsV1DomainsDomainIdApiPathGroupsGetRequest generates requests for GetApiGroupsV1DomainsDomainIdApiPathGroupsGet
func NewGetApiGroupsV1DomainsDomainIdApiPathGroupsGetRequest(server string, domainId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-path-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPathsV1DomainsDomainIdApiPathsGetRequest generates requests for GetApiPathsV1DomainsDomainIdApiPathsGet
func NewGetApiPathsV1DomainsDomainIdApiPathsGetRequest(server string, domainId int, params *GetApiPathsV1DomainsDomainIdApiPathsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-paths", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Method != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "method", runtime.ParamLocationQuery, *params.Method); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api_version", runtime.ParamLocationQuery, *params.ApiVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HttpScheme != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "http_scheme", runtime.ParamLocationQuery, *params.HttpScheme); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ApiGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api_group", runtime.ParamLocationQuery, *params.ApiGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Source != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApiPathV1DomainsDomainIdApiPathsPostRequest calls the generic CreateApiPathV1DomainsDomainIdApiPathsPost builder with application/json body
func NewCreateApiPathV1DomainsDomainIdApiPathsPostRequest(server string, domainId int, body CreateApiPathV1DomainsDomainIdApiPathsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiPathV1DomainsDomainIdApiPathsPostRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewCreateApiPathV1DomainsDomainIdApiPathsPostRequestWithBody generates requests for CreateApiPathV1DomainsDomainIdApiPathsPost with any type of body
func NewCreateApiPathV1DomainsDomainIdApiPathsPostRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-paths", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteRequest generates requests for DeleteApiPathV1DomainsDomainIdApiPathsPathIdDelete
func NewDeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteRequest(server string, domainId int, pathId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path_id", runtime.ParamLocationPath, pathId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-paths/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiPathV1DomainsDomainIdApiPathsPathIdGetRequest generates requests for GetApiPathV1DomainsDomainIdApiPathsPathIdGet
func NewGetApiPathV1DomainsDomainIdApiPathsPathIdGetRequest(server string, domainId int, pathId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path_id", runtime.ParamLocationPath, pathId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-paths/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchRequest calls the generic UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatch builder with application/json body
func NewUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchRequest(server string, domainId int, pathId openapi_types.UUID, body UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchRequestWithBody(server, domainId, pathId, "application/json", bodyReader)
}

// NewUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchRequestWithBody generates requests for UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatch with any type of body
func NewUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchRequestWithBody(server string, domainId int, pathId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path_id", runtime.ParamLocationPath, pathId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/api-paths/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomRulesV1DomainsDomainIdCustomRulesGetRequest generates requests for GetCustomRulesV1DomainsDomainIdCustomRulesGet
func NewGetCustomRulesV1DomainsDomainIdCustomRulesGetRequest(server string, domainId int, params *GetCustomRulesV1DomainsDomainIdCustomRulesGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/custom-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomRuleV1DomainsDomainIdCustomRulesPostRequest calls the generic CreateCustomRuleV1DomainsDomainIdCustomRulesPost builder with application/json body
func NewCreateCustomRuleV1DomainsDomainIdCustomRulesPostRequest(server string, domainId int, body CreateCustomRuleV1DomainsDomainIdCustomRulesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomRuleV1DomainsDomainIdCustomRulesPostRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewCreateCustomRuleV1DomainsDomainIdCustomRulesPostRequestWithBody generates requests for CreateCustomRuleV1DomainsDomainIdCustomRulesPost with any type of body
func NewCreateCustomRuleV1DomainsDomainIdCustomRulesPostRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/custom-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostRequest calls the generic BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePost builder with application/json body
func NewBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostRequest(server string, domainId int, body BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostRequestWithBody generates requests for BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePost with any type of body
func NewBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/custom-rules/bulk_delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteRequest generates requests for DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDelete
func NewDeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteRequest(server string, domainId int, ruleId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/custom-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetRequest generates requests for GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGet
func NewGetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetRequest(server string, domainId int, ruleId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/custom-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchRequest calls the generic UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatch builder with application/json body
func NewUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchRequest(server string, domainId int, ruleId int, body UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchRequestWithBody(server, domainId, ruleId, "application/json", bodyReader)
}

// NewUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchRequestWithBody generates requests for UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatch with any type of body
func NewUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchRequestWithBody(server string, domainId int, ruleId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/custom-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchRequest generates requests for ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatch
func NewToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchRequest(server string, domainId int, ruleId int, action struct {
	// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
	CustomerRuleState `yaml:",inline"`
}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "action", runtime.ParamLocationPath, action)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/custom-rules/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDdosAttacksV1DomainsDomainIdDdosAttacksGetRequest generates requests for GetDdosAttacksV1DomainsDomainIdDdosAttacksGet
func NewGetDdosAttacksV1DomainsDomainIdDdosAttacksGetRequest(server string, domainId int, params *GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/ddos-attacks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_time", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EndTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_time", runtime.ParamLocationQuery, *params.EndTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDdosInfoV1DomainsDomainIdDdosInfoGetRequest generates requests for GetDdosInfoV1DomainsDomainIdDdosInfoGet
func NewGetDdosInfoV1DomainsDomainIdDdosInfoGetRequest(server string, domainId int, params *GetDdosInfoV1DomainsDomainIdDdosInfoGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/ddos-info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group_by", runtime.ParamLocationQuery, params.GroupBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFirewallRulesV1DomainsDomainIdFirewallRulesGetRequest generates requests for GetFirewallRulesV1DomainsDomainIdFirewallRulesGet
func NewGetFirewallRulesV1DomainsDomainIdFirewallRulesGetRequest(server string, domainId int, params *GetFirewallRulesV1DomainsDomainIdFirewallRulesGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/firewall-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostRequest calls the generic CreateFirewallRuleV1DomainsDomainIdFirewallRulesPost builder with application/json body
func NewCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostRequest(server string, domainId int, body CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostRequestWithBody generates requests for CreateFirewallRuleV1DomainsDomainIdFirewallRulesPost with any type of body
func NewCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/firewall-rules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostRequest calls the generic BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePost builder with application/json body
func NewBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostRequest(server string, domainId int, body BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostRequestWithBody generates requests for BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePost with any type of body
func NewBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/firewall-rules/bulk_delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteRequest generates requests for DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDelete
func NewDeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteRequest(server string, domainId int, ruleId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/firewall-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetRequest generates requests for GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGet
func NewGetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetRequest(server string, domainId int, ruleId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/firewall-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchRequest calls the generic UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatch builder with application/json body
func NewUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchRequest(server string, domainId int, ruleId int, body UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchRequestWithBody(server, domainId, ruleId, "application/json", bodyReader)
}

// NewUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchRequestWithBody generates requests for UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatch with any type of body
func NewUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchRequestWithBody(server string, domainId int, ruleId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/firewall-rules/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchRequest generates requests for ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatch
func NewToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchRequest(server string, domainId int, ruleId int, action struct {
	// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
	CustomerRuleState `yaml:",inline"`
}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rule_id", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "action", runtime.ParamLocationPath, action)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/firewall-rules/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInsightSilencesV1DomainsDomainIdInsightSilencesGetRequest generates requests for GetInsightSilencesV1DomainsDomainIdInsightSilencesGet
func NewGetInsightSilencesV1DomainsDomainIdInsightSilencesGetRequest(server string, domainId int, params *GetInsightSilencesV1DomainsDomainIdInsightSilencesGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/insight-silences", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InsightType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "insight_type", runtime.ParamLocationQuery, *params.InsightType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Comment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment", runtime.ParamLocationQuery, *params.Comment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostRequest calls the generic CreateInsightSilenceV1DomainsDomainIdInsightSilencesPost builder with application/json body
func NewCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostRequest(server string, domainId int, body CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostRequestWithBody generates requests for CreateInsightSilenceV1DomainsDomainIdInsightSilencesPost with any type of body
func NewCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/insight-silences", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteRequest generates requests for DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDelete
func NewDeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteRequest(server string, domainId int, silenceId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "silence_id", runtime.ParamLocationPath, silenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/insight-silences/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetRequest generates requests for GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGet
func NewGetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetRequest(server string, domainId int, silenceId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "silence_id", runtime.ParamLocationPath, silenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/insight-silences/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchRequest calls the generic UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatch builder with application/json body
func NewUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchRequest(server string, domainId int, silenceId openapi_types.UUID, body UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchRequestWithBody(server, domainId, silenceId, "application/json", bodyReader)
}

// NewUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchRequestWithBody generates requests for UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatch with any type of body
func NewUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchRequestWithBody(server string, domainId int, silenceId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "silence_id", runtime.ParamLocationPath, silenceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/insight-silences/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInsightsV1DomainsDomainIdInsightsGetRequest generates requests for GetInsightsV1DomainsDomainIdInsightsGet
func NewGetInsightsV1DomainsDomainIdInsightsGetRequest(server string, domainId int, params *GetInsightsV1DomainsDomainIdInsightsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/insights", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InsightType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "insight_type", runtime.ParamLocationQuery, *params.InsightType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInsightV1DomainsDomainIdInsightsInsightIdGetRequest generates requests for GetInsightV1DomainsDomainIdInsightsInsightIdGet
func NewGetInsightV1DomainsDomainIdInsightsInsightIdGetRequest(server string, domainId int, insightId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "insight_id", runtime.ParamLocationPath, insightId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/insights/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInsightV1DomainsDomainIdInsightsInsightIdPutRequest calls the generic UpdateInsightV1DomainsDomainIdInsightsInsightIdPut builder with application/json body
func NewUpdateInsightV1DomainsDomainIdInsightsInsightIdPutRequest(server string, domainId int, insightId openapi_types.UUID, body UpdateInsightV1DomainsDomainIdInsightsInsightIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInsightV1DomainsDomainIdInsightsInsightIdPutRequestWithBody(server, domainId, insightId, "application/json", bodyReader)
}

// NewUpdateInsightV1DomainsDomainIdInsightsInsightIdPutRequestWithBody generates requests for UpdateInsightV1DomainsDomainIdInsightsInsightIdPut with any type of body
func NewUpdateInsightV1DomainsDomainIdInsightsInsightIdPutRequestWithBody(server string, domainId int, insightId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "insight_id", runtime.ParamLocationPath, insightId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/insights/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchRequest generates requests for ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatch
func NewToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchRequest(server string, domainId int, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/policies/%s/toggle", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequestsV1DomainsDomainIdRequestsGetRequest generates requests for GetRequestsV1DomainsDomainIdRequestsGet
func NewGetRequestsV1DomainsDomainIdRequestsGetRequest(server string, domainId int, params *GetRequestsV1DomainsDomainIdRequestsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, *params.Ip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferenceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference_id", runtime.ParamLocationQuery, *params.ReferenceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_code", runtime.ParamLocationQuery, *params.StatusCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SecurityRuleName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "security_rule_name", runtime.ParamLocationQuery, *params.SecurityRuleName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Countries != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countries", runtime.ParamLocationQuery, *params.Countries); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Actions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actions", runtime.ParamLocationQuery, *params.Actions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TrafficTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "traffic_types", runtime.ParamLocationQuery, *params.TrafficTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetRequest generates requests for GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGet
func NewGetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetRequest(server string, domainId int, requestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "request_id", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/requests/%s/details", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRuleSetListV1DomainsDomainIdRuleSetsGetRequest generates requests for GetRuleSetListV1DomainsDomainIdRuleSetsGet
func NewGetRuleSetListV1DomainsDomainIdRuleSetsGetRequest(server string, domainId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/rule-sets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDomainSettingsV1DomainsDomainIdSettingsGetRequest generates requests for GetDomainSettingsV1DomainsDomainIdSettingsGet
func NewGetDomainSettingsV1DomainsDomainIdSettingsGetRequest(server string, domainId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDomainSettingsV1DomainsDomainIdSettingsPatchRequest calls the generic UpdateDomainSettingsV1DomainsDomainIdSettingsPatch builder with application/json body
func NewUpdateDomainSettingsV1DomainsDomainIdSettingsPatchRequest(server string, domainId int, body UpdateDomainSettingsV1DomainsDomainIdSettingsPatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDomainSettingsV1DomainsDomainIdSettingsPatchRequestWithBody(server, domainId, "application/json", bodyReader)
}

// NewUpdateDomainSettingsV1DomainsDomainIdSettingsPatchRequestWithBody generates requests for UpdateDomainSettingsV1DomainsDomainIdSettingsPatch with any type of body
func NewUpdateDomainSettingsV1DomainsDomainIdSettingsPatchRequestWithBody(server string, domainId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEventStatisticsV1DomainsDomainIdStatsGetRequest generates requests for GetEventStatisticsV1DomainsDomainIdStatsGet
func NewGetEventStatisticsV1DomainsDomainIdStatsGetRequest(server string, domainId int, params *GetEventStatisticsV1DomainsDomainIdStatsGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, *params.Ip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ReferenceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference_id", runtime.ParamLocationQuery, *params.ReferenceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Result != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "result", runtime.ParamLocationQuery, *params.Result); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrafficV1DomainsDomainIdTrafficGetRequest generates requests for GetTrafficV1DomainsDomainIdTrafficGet
func NewGetTrafficV1DomainsDomainIdTrafficGetRequest(server string, domainId int, params *GetTrafficV1DomainsDomainIdTrafficGetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain_id", runtime.ParamLocationPath, domainId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/domains/%s/traffic", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolution", runtime.ParamLocationQuery, params.Resolution); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAttackMapV1IpInfoAttackMapGetRequest generates requests for GetAttackMapV1IpInfoAttackMapGet
func NewGetAttackMapV1IpInfoAttackMapGetRequest(server string, params *GetAttackMapV1IpInfoAttackMapGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip-info/attack-map")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetRequest generates requests for GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGet
func NewGetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetRequest(server string, params *GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip-info/attack-time-series")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBlockedRequestsV1IpInfoBlockedRequestsGetRequest generates requests for GetBlockedRequestsV1IpInfoBlockedRequestsGet
func NewGetBlockedRequestsV1IpInfoBlockedRequestsGetRequest(server string, params *GetBlockedRequestsV1IpInfoBlockedRequestsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip-info/blocked-requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_id", runtime.ParamLocationQuery, params.DomainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCountsV1IpInfoCountsGetRequest generates requests for GetCountsV1IpInfoCountsGet
func NewGetCountsV1IpInfoCountsGetRequest(server string, params *GetCountsV1IpInfoCountsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip-info/counts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.DomainId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_id", runtime.ParamLocationQuery, *params.DomainId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIpDdosInfoV1IpInfoDdosGetRequest generates requests for GetIpDdosInfoV1IpInfoDdosGet
func NewGetIpDdosInfoV1IpInfoDdosGetRequest(server string, params *GetIpDdosInfoV1IpInfoDdosGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip-info/ddos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIpInfoV1IpInfoIpInfoGetRequest generates requests for GetIpInfoV1IpInfoIpInfoGet
func NewGetIpInfoV1IpInfoIpInfoGetRequest(server string, params *GetIpInfoV1IpInfoIpInfoGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip-info/ip-info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTopSessionsV1IpInfoTopSessionsGetRequest generates requests for GetTopSessionsV1IpInfoTopSessionsGet
func NewGetTopSessionsV1IpInfoTopSessionsGetRequest(server string, params *GetTopSessionsV1IpInfoTopSessionsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip-info/top-sessions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_id", runtime.ParamLocationQuery, params.DomainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTopUrlsV1IpInfoTopUrlsGetRequest generates requests for GetTopUrlsV1IpInfoTopUrlsGet
func NewGetTopUrlsV1IpInfoTopUrlsGetRequest(server string, params *GetTopUrlsV1IpInfoTopUrlsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip-info/top-urls")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_id", runtime.ParamLocationQuery, params.DomainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTopUserAgentsV1IpInfoTopUserAgentsGetRequest generates requests for GetTopUserAgentsV1IpInfoTopUserAgentsGet
func NewGetTopUserAgentsV1IpInfoTopUserAgentsGetRequest(server string, params *GetTopUserAgentsV1IpInfoTopUserAgentsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/ip-info/top-user-agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip", runtime.ParamLocationQuery, params.Ip); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domain_id", runtime.ParamLocationQuery, params.DomainId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsV1OrganizationsGetRequest generates requests for GetOrganizationsV1OrganizationsGet
func NewGetOrganizationsV1OrganizationsGetRequest(server string, params *GetOrganizationsV1OrganizationsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPreviewCustomPageV1PreviewCustomPagePostRequest calls the generic PreviewCustomPageV1PreviewCustomPagePost builder with application/json body
func NewPreviewCustomPageV1PreviewCustomPagePostRequest(server string, params *PreviewCustomPageV1PreviewCustomPagePostParams, body PreviewCustomPageV1PreviewCustomPagePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPreviewCustomPageV1PreviewCustomPagePostRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPreviewCustomPageV1PreviewCustomPagePostRequestWithBody generates requests for PreviewCustomPageV1PreviewCustomPagePost with any type of body
func NewPreviewCustomPageV1PreviewCustomPagePostRequestWithBody(server string, params *PreviewCustomPageV1PreviewCustomPagePostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/preview-custom-page")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_type", runtime.ParamLocationQuery, params.PageType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInsightTypesV1SecurityInsightsTypesGetRequest generates requests for GetInsightTypesV1SecurityInsightsTypesGet
func NewGetInsightTypesV1SecurityInsightsTypesGetRequest(server string, params *GetInsightTypesV1SecurityInsightsTypesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/security-insights/types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Slug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slug", runtime.ParamLocationQuery, *params.Slug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InsightFrequency != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "insight_frequency", runtime.ParamLocationQuery, *params.InsightFrequency); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatisticsSeriesV1StatisticsSeriesGetRequest generates requests for GetStatisticsSeriesV1StatisticsSeriesGet
func NewGetStatisticsSeriesV1StatisticsSeriesGetRequest(server string, params *GetStatisticsSeriesV1StatisticsSeriesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/statistics/series")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "granularity", runtime.ParamLocationQuery, params.Granularity); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metrics", runtime.ParamLocationQuery, params.Metrics); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsV1TagsGetRequest generates requests for GetTagsV1TagsGet
func NewGetTagsV1TagsGetRequest(server string, params *GetTagsV1TagsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reserved != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reserved", runtime.ParamLocationQuery, *params.Reserved); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *ClientSDK) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *ClientSDK) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetWithResponse request
	GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse, error)

	// GetClientInfoV1ClientsMeGetWithResponse request
	GetClientInfoV1ClientsMeGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClientInfoV1ClientsMeGetResponse, error)

	// GetCustomPageSetsV1CustomPageSetsGetWithResponse request
	GetCustomPageSetsV1CustomPageSetsGetWithResponse(ctx context.Context, params *GetCustomPageSetsV1CustomPageSetsGetParams, reqEditors ...RequestEditorFn) (*GetCustomPageSetsV1CustomPageSetsGetResponse, error)

	// CreateCustomPageSetV1CustomPageSetsPostWithBodyWithResponse request with any body
	CreateCustomPageSetV1CustomPageSetsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomPageSetV1CustomPageSetsPostResponse, error)

	CreateCustomPageSetV1CustomPageSetsPostWithResponse(ctx context.Context, body CreateCustomPageSetV1CustomPageSetsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomPageSetV1CustomPageSetsPostResponse, error)

	// DeleteCustomPageSetV1CustomPageSetsSetIdDeleteWithResponse request
	DeleteCustomPageSetV1CustomPageSetsSetIdDeleteWithResponse(ctx context.Context, setId int, reqEditors ...RequestEditorFn) (*DeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse, error)

	// GetCustomPageSetV1CustomPageSetsSetIdGetWithResponse request
	GetCustomPageSetV1CustomPageSetsSetIdGetWithResponse(ctx context.Context, setId int, reqEditors ...RequestEditorFn) (*GetCustomPageSetV1CustomPageSetsSetIdGetResponse, error)

	// UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithBodyWithResponse request with any body
	UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithBodyWithResponse(ctx context.Context, setId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse, error)

	UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithResponse(ctx context.Context, setId int, body UpdateCustomPageSetV1CustomPageSetsSetIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse, error)

	// GetDomainsV1DomainsGetWithResponse request
	GetDomainsV1DomainsGetWithResponse(ctx context.Context, params *GetDomainsV1DomainsGetParams, reqEditors ...RequestEditorFn) (*GetDomainsV1DomainsGetResponse, error)

	// DeleteDomainV1DomainsDomainIdDeleteWithResponse request
	DeleteDomainV1DomainsDomainIdDeleteWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*DeleteDomainV1DomainsDomainIdDeleteResponse, error)

	// GetDomainV1DomainsDomainIdGetWithResponse request
	GetDomainV1DomainsDomainIdGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetDomainV1DomainsDomainIdGetResponse, error)

	// UpdateDomainV1DomainsDomainIdPatchWithBodyWithResponse request with any body
	UpdateDomainV1DomainsDomainIdPatchWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainV1DomainsDomainIdPatchResponse, error)

	UpdateDomainV1DomainsDomainIdPatchWithResponse(ctx context.Context, domainId int, body UpdateDomainV1DomainsDomainIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainV1DomainsDomainIdPatchResponse, error)

	// GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetWithResponse request
	GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetWithResponse(ctx context.Context, domainId int, params *GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParams, reqEditors ...RequestEditorFn) (*GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse, error)

	// CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithBodyWithResponse request with any body
	CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse, error)

	CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithResponse(ctx context.Context, domainId int, body CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse, error)

	// DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteWithResponse request
	DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse, error)

	// GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetWithResponse request
	GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse, error)

	// UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithBodyWithResponse request with any body
	UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithBodyWithResponse(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse, error)

	UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithResponse(ctx context.Context, domainId int, ruleId int, body UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse, error)

	// ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchWithResponse request
	ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchWithResponse(ctx context.Context, domainId int, ruleId int, action struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
		CustomerRuleState `yaml:",inline"`
	}, reqEditors ...RequestEditorFn) (*ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse, error)

	// GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetWithResponse request
	GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse, error)

	// UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithBodyWithResponse request with any body
	UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse, error)

	UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithResponse(ctx context.Context, domainId int, body UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse, error)

	// ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostWithResponse request
	ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse, error)

	// GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetWithResponse request
	GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetWithResponse(ctx context.Context, domainId int, params *GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParams, reqEditors ...RequestEditorFn) (*GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse, error)

	// GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetWithResponse request
	GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetWithResponse(ctx context.Context, domainId int, scanId string, reqEditors ...RequestEditorFn) (*GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse, error)

	// GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetWithResponse request
	GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse, error)

	// UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithBodyWithResponse request with any body
	UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse, error)

	UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithResponse(ctx context.Context, domainId int, body UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse, error)

	// UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithBodyWithResponse request with any body
	UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse, error)

	UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithResponse(ctx context.Context, domainId int, body UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse, error)

	// GetApiGroupsV1DomainsDomainIdApiPathGroupsGetWithResponse request
	GetApiGroupsV1DomainsDomainIdApiPathGroupsGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse, error)

	// GetApiPathsV1DomainsDomainIdApiPathsGetWithResponse request
	GetApiPathsV1DomainsDomainIdApiPathsGetWithResponse(ctx context.Context, domainId int, params *GetApiPathsV1DomainsDomainIdApiPathsGetParams, reqEditors ...RequestEditorFn) (*GetApiPathsV1DomainsDomainIdApiPathsGetResponse, error)

	// CreateApiPathV1DomainsDomainIdApiPathsPostWithBodyWithResponse request with any body
	CreateApiPathV1DomainsDomainIdApiPathsPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiPathV1DomainsDomainIdApiPathsPostResponse, error)

	CreateApiPathV1DomainsDomainIdApiPathsPostWithResponse(ctx context.Context, domainId int, body CreateApiPathV1DomainsDomainIdApiPathsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiPathV1DomainsDomainIdApiPathsPostResponse, error)

	// DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteWithResponse request
	DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteWithResponse(ctx context.Context, domainId int, pathId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse, error)

	// GetApiPathV1DomainsDomainIdApiPathsPathIdGetWithResponse request
	GetApiPathV1DomainsDomainIdApiPathsPathIdGetWithResponse(ctx context.Context, domainId int, pathId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse, error)

	// UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithBodyWithResponse request with any body
	UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithBodyWithResponse(ctx context.Context, domainId int, pathId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse, error)

	UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithResponse(ctx context.Context, domainId int, pathId openapi_types.UUID, body UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse, error)

	// GetCustomRulesV1DomainsDomainIdCustomRulesGetWithResponse request
	GetCustomRulesV1DomainsDomainIdCustomRulesGetWithResponse(ctx context.Context, domainId int, params *GetCustomRulesV1DomainsDomainIdCustomRulesGetParams, reqEditors ...RequestEditorFn) (*GetCustomRulesV1DomainsDomainIdCustomRulesGetResponse, error)

	// CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithBodyWithResponse request with any body
	CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse, error)

	CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithResponse(ctx context.Context, domainId int, body CreateCustomRuleV1DomainsDomainIdCustomRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse, error)

	// BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithBodyWithResponse request with any body
	BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse, error)

	BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithResponse(ctx context.Context, domainId int, body BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse, error)

	// DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteWithResponse request
	DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse, error)

	// GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetWithResponse request
	GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse, error)

	// UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithBodyWithResponse request with any body
	UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithBodyWithResponse(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse, error)

	UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithResponse(ctx context.Context, domainId int, ruleId int, body UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse, error)

	// ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchWithResponse request
	ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchWithResponse(ctx context.Context, domainId int, ruleId int, action struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
		CustomerRuleState `yaml:",inline"`
	}, reqEditors ...RequestEditorFn) (*ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse, error)

	// GetDdosAttacksV1DomainsDomainIdDdosAttacksGetWithResponse request
	GetDdosAttacksV1DomainsDomainIdDdosAttacksGetWithResponse(ctx context.Context, domainId int, params *GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParams, reqEditors ...RequestEditorFn) (*GetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse, error)

	// GetDdosInfoV1DomainsDomainIdDdosInfoGetWithResponse request
	GetDdosInfoV1DomainsDomainIdDdosInfoGetWithResponse(ctx context.Context, domainId int, params *GetDdosInfoV1DomainsDomainIdDdosInfoGetParams, reqEditors ...RequestEditorFn) (*GetDdosInfoV1DomainsDomainIdDdosInfoGetResponse, error)

	// GetFirewallRulesV1DomainsDomainIdFirewallRulesGetWithResponse request
	GetFirewallRulesV1DomainsDomainIdFirewallRulesGetWithResponse(ctx context.Context, domainId int, params *GetFirewallRulesV1DomainsDomainIdFirewallRulesGetParams, reqEditors ...RequestEditorFn) (*GetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse, error)

	// CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithBodyWithResponse request with any body
	CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse, error)

	CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithResponse(ctx context.Context, domainId int, body CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse, error)

	// BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithBodyWithResponse request with any body
	BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse, error)

	BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithResponse(ctx context.Context, domainId int, body BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse, error)

	// DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteWithResponse request
	DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse, error)

	// GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetWithResponse request
	GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse, error)

	// UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithBodyWithResponse request with any body
	UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithBodyWithResponse(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse, error)

	UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithResponse(ctx context.Context, domainId int, ruleId int, body UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse, error)

	// ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchWithResponse request
	ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchWithResponse(ctx context.Context, domainId int, ruleId int, action struct {
		// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
		CustomerRuleState `yaml:",inline"`
	}, reqEditors ...RequestEditorFn) (*ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse, error)

	// GetInsightSilencesV1DomainsDomainIdInsightSilencesGetWithResponse request
	GetInsightSilencesV1DomainsDomainIdInsightSilencesGetWithResponse(ctx context.Context, domainId int, params *GetInsightSilencesV1DomainsDomainIdInsightSilencesGetParams, reqEditors ...RequestEditorFn) (*GetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse, error)

	// CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithBodyWithResponse request with any body
	CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse, error)

	CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithResponse(ctx context.Context, domainId int, body CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse, error)

	// DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteWithResponse request
	DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteWithResponse(ctx context.Context, domainId int, silenceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse, error)

	// GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetWithResponse request
	GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetWithResponse(ctx context.Context, domainId int, silenceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse, error)

	// UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithBodyWithResponse request with any body
	UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithBodyWithResponse(ctx context.Context, domainId int, silenceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse, error)

	UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithResponse(ctx context.Context, domainId int, silenceId openapi_types.UUID, body UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse, error)

	// GetInsightsV1DomainsDomainIdInsightsGetWithResponse request
	GetInsightsV1DomainsDomainIdInsightsGetWithResponse(ctx context.Context, domainId int, params *GetInsightsV1DomainsDomainIdInsightsGetParams, reqEditors ...RequestEditorFn) (*GetInsightsV1DomainsDomainIdInsightsGetResponse, error)

	// GetInsightV1DomainsDomainIdInsightsInsightIdGetWithResponse request
	GetInsightV1DomainsDomainIdInsightsInsightIdGetWithResponse(ctx context.Context, domainId int, insightId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInsightV1DomainsDomainIdInsightsInsightIdGetResponse, error)

	// UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithBodyWithResponse request with any body
	UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithBodyWithResponse(ctx context.Context, domainId int, insightId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse, error)

	UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithResponse(ctx context.Context, domainId int, insightId openapi_types.UUID, body UpdateInsightV1DomainsDomainIdInsightsInsightIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse, error)

	// ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchWithResponse request
	ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchWithResponse(ctx context.Context, domainId int, policyId string, reqEditors ...RequestEditorFn) (*ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse, error)

	// GetRequestsV1DomainsDomainIdRequestsGetWithResponse request
	GetRequestsV1DomainsDomainIdRequestsGetWithResponse(ctx context.Context, domainId int, params *GetRequestsV1DomainsDomainIdRequestsGetParams, reqEditors ...RequestEditorFn) (*GetRequestsV1DomainsDomainIdRequestsGetResponse, error)

	// GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetWithResponse request
	GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetWithResponse(ctx context.Context, domainId int, requestId string, reqEditors ...RequestEditorFn) (*GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse, error)

	// GetRuleSetListV1DomainsDomainIdRuleSetsGetWithResponse request
	GetRuleSetListV1DomainsDomainIdRuleSetsGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetRuleSetListV1DomainsDomainIdRuleSetsGetResponse, error)

	// GetDomainSettingsV1DomainsDomainIdSettingsGetWithResponse request
	GetDomainSettingsV1DomainsDomainIdSettingsGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetDomainSettingsV1DomainsDomainIdSettingsGetResponse, error)

	// UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithBodyWithResponse request with any body
	UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse, error)

	UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithResponse(ctx context.Context, domainId int, body UpdateDomainSettingsV1DomainsDomainIdSettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse, error)

	// GetEventStatisticsV1DomainsDomainIdStatsGetWithResponse request
	GetEventStatisticsV1DomainsDomainIdStatsGetWithResponse(ctx context.Context, domainId int, params *GetEventStatisticsV1DomainsDomainIdStatsGetParams, reqEditors ...RequestEditorFn) (*GetEventStatisticsV1DomainsDomainIdStatsGetResponse, error)

	// GetTrafficV1DomainsDomainIdTrafficGetWithResponse request
	GetTrafficV1DomainsDomainIdTrafficGetWithResponse(ctx context.Context, domainId int, params *GetTrafficV1DomainsDomainIdTrafficGetParams, reqEditors ...RequestEditorFn) (*GetTrafficV1DomainsDomainIdTrafficGetResponse, error)

	// GetAttackMapV1IpInfoAttackMapGetWithResponse request
	GetAttackMapV1IpInfoAttackMapGetWithResponse(ctx context.Context, params *GetAttackMapV1IpInfoAttackMapGetParams, reqEditors ...RequestEditorFn) (*GetAttackMapV1IpInfoAttackMapGetResponse, error)

	// GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetWithResponse request
	GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetWithResponse(ctx context.Context, params *GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParams, reqEditors ...RequestEditorFn) (*GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse, error)

	// GetBlockedRequestsV1IpInfoBlockedRequestsGetWithResponse request
	GetBlockedRequestsV1IpInfoBlockedRequestsGetWithResponse(ctx context.Context, params *GetBlockedRequestsV1IpInfoBlockedRequestsGetParams, reqEditors ...RequestEditorFn) (*GetBlockedRequestsV1IpInfoBlockedRequestsGetResponse, error)

	// GetCountsV1IpInfoCountsGetWithResponse request
	GetCountsV1IpInfoCountsGetWithResponse(ctx context.Context, params *GetCountsV1IpInfoCountsGetParams, reqEditors ...RequestEditorFn) (*GetCountsV1IpInfoCountsGetResponse, error)

	// GetIpDdosInfoV1IpInfoDdosGetWithResponse request
	GetIpDdosInfoV1IpInfoDdosGetWithResponse(ctx context.Context, params *GetIpDdosInfoV1IpInfoDdosGetParams, reqEditors ...RequestEditorFn) (*GetIpDdosInfoV1IpInfoDdosGetResponse, error)

	// GetIpInfoV1IpInfoIpInfoGetWithResponse request
	GetIpInfoV1IpInfoIpInfoGetWithResponse(ctx context.Context, params *GetIpInfoV1IpInfoIpInfoGetParams, reqEditors ...RequestEditorFn) (*GetIpInfoV1IpInfoIpInfoGetResponse, error)

	// GetTopSessionsV1IpInfoTopSessionsGetWithResponse request
	GetTopSessionsV1IpInfoTopSessionsGetWithResponse(ctx context.Context, params *GetTopSessionsV1IpInfoTopSessionsGetParams, reqEditors ...RequestEditorFn) (*GetTopSessionsV1IpInfoTopSessionsGetResponse, error)

	// GetTopUrlsV1IpInfoTopUrlsGetWithResponse request
	GetTopUrlsV1IpInfoTopUrlsGetWithResponse(ctx context.Context, params *GetTopUrlsV1IpInfoTopUrlsGetParams, reqEditors ...RequestEditorFn) (*GetTopUrlsV1IpInfoTopUrlsGetResponse, error)

	// GetTopUserAgentsV1IpInfoTopUserAgentsGetWithResponse request
	GetTopUserAgentsV1IpInfoTopUserAgentsGetWithResponse(ctx context.Context, params *GetTopUserAgentsV1IpInfoTopUserAgentsGetParams, reqEditors ...RequestEditorFn) (*GetTopUserAgentsV1IpInfoTopUserAgentsGetResponse, error)

	// GetOrganizationsV1OrganizationsGetWithResponse request
	GetOrganizationsV1OrganizationsGetWithResponse(ctx context.Context, params *GetOrganizationsV1OrganizationsGetParams, reqEditors ...RequestEditorFn) (*GetOrganizationsV1OrganizationsGetResponse, error)

	// PreviewCustomPageV1PreviewCustomPagePostWithBodyWithResponse request with any body
	PreviewCustomPageV1PreviewCustomPagePostWithBodyWithResponse(ctx context.Context, params *PreviewCustomPageV1PreviewCustomPagePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PreviewCustomPageV1PreviewCustomPagePostResponse, error)

	PreviewCustomPageV1PreviewCustomPagePostWithResponse(ctx context.Context, params *PreviewCustomPageV1PreviewCustomPagePostParams, body PreviewCustomPageV1PreviewCustomPagePostJSONRequestBody, reqEditors ...RequestEditorFn) (*PreviewCustomPageV1PreviewCustomPagePostResponse, error)

	// GetInsightTypesV1SecurityInsightsTypesGetWithResponse request
	GetInsightTypesV1SecurityInsightsTypesGetWithResponse(ctx context.Context, params *GetInsightTypesV1SecurityInsightsTypesGetParams, reqEditors ...RequestEditorFn) (*GetInsightTypesV1SecurityInsightsTypesGetResponse, error)

	// GetStatisticsSeriesV1StatisticsSeriesGetWithResponse request
	GetStatisticsSeriesV1StatisticsSeriesGetWithResponse(ctx context.Context, params *GetStatisticsSeriesV1StatisticsSeriesGetParams, reqEditors ...RequestEditorFn) (*GetStatisticsSeriesV1StatisticsSeriesGetResponse, error)

	// GetTagsV1TagsGetWithResponse request
	GetTagsV1TagsGetWithResponse(ctx context.Context, params *GetTagsV1TagsGetParams, reqEditors ...RequestEditorFn) (*GetTagsV1TagsGetResponse, error)
}

type GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AdvancedRuleDescriptorResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientInfoV1ClientsMeGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ClientInfo
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetClientInfoV1ClientsMeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientInfoV1ClientsMeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomPageSetsV1CustomPageSetsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseCustomPageSetResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetCustomPageSetsV1CustomPageSetsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomPageSetsV1CustomPageSetsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomPageSetV1CustomPageSetsPostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CustomPageSetResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r CreateCustomPageSetV1CustomPageSetsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomPageSetV1CustomPageSetsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r DeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomPageSetV1CustomPageSetsSetIdGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *CustomPageSetResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetCustomPageSetV1CustomPageSetsSetIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomPageSetV1CustomPageSetsSetIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainsV1DomainsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseSummaryDomainResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetDomainsV1DomainsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainsV1DomainsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDomainV1DomainsDomainIdDeleteResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
}

// Status returns HTTPResponse.Status
func (r DeleteDomainV1DomainsDomainIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDomainV1DomainsDomainIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainV1DomainsDomainIdGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DetailedDomainResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetDomainV1DomainsDomainIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainV1DomainsDomainIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDomainV1DomainsDomainIdPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateDomainV1DomainsDomainIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDomainV1DomainsDomainIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseAdvancedRuleResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *AdvancedRuleResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
}

// Status returns HTTPResponse.Status
func (r DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AdvancedRuleResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *AppModelsApiDiscoveryApiUrls
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *TaskResultId
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseApiScanResult
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ApiScanResult
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ApiDiscoverySettings
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ApiDiscoverySettings
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *TaskResultId
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ApiPathGroups
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPathsV1DomainsDomainIdApiPathsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseApiPathResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetApiPathsV1DomainsDomainIdApiPathsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPathsV1DomainsDomainIdApiPathsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiPathV1DomainsDomainIdApiPathsPostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *ApiPathResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r CreateApiPathV1DomainsDomainIdApiPathsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiPathV1DomainsDomainIdApiPathsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ApiPathResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomRulesV1DomainsDomainIdCustomRulesGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseCustomRuleResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetCustomRulesV1DomainsDomainIdCustomRulesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomRulesV1DomainsDomainIdCustomRulesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *CustomRuleResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r CreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
}

// Status returns HTTPResponse.Status
func (r BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
}

// Status returns HTTPResponse.Status
func (r DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *CustomRuleResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseDdosAttack
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDdosInfoV1DomainsDomainIdDdosInfoGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseDdosInfo
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetDdosInfoV1DomainsDomainIdDdosInfoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDdosInfoV1DomainsDomainIdDdosInfoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseFirewallRuleResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *FirewallRuleResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
}

// Status returns HTTPResponse.Status
func (r BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
}

// Status returns HTTPResponse.Status
func (r DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *FirewallRuleResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseInsightSilence
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *InsightSilence
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *InsightSilence
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *InsightSilence
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInsightsV1DomainsDomainIdInsightsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseInsight
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetInsightsV1DomainsDomainIdInsightsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInsightsV1DomainsDomainIdInsightsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInsightV1DomainsDomainIdInsightsInsightIdGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Insight
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetInsightV1DomainsDomainIdInsightsInsightIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInsightV1DomainsDomainIdInsightsInsightIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *Insight
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PolicyMode
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestsV1DomainsDomainIdRequestsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseRequestSummary
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetRequestsV1DomainsDomainIdRequestsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestsV1DomainsDomainIdRequestsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RequestDetails
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRuleSetListV1DomainsDomainIdRuleSetsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]RuleSet
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetRuleSetListV1DomainsDomainIdRuleSetsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRuleSetListV1DomainsDomainIdRuleSetsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainSettingsV1DomainsDomainIdSettingsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *DomainSettings
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetDomainSettingsV1DomainsDomainIdSettingsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainSettingsV1DomainsDomainIdSettingsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r UpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventStatisticsV1DomainsDomainIdStatsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *EventStatistics
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetEventStatisticsV1DomainsDomainIdStatsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventStatisticsV1DomainsDomainIdStatsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrafficV1DomainsDomainIdTrafficGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]TrafficMetrics
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetTrafficV1DomainsDomainIdTrafficGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrafficV1DomainsDomainIdTrafficGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttackMapV1IpInfoAttackMapGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]IpCountryAttack
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetAttackMapV1IpInfoAttackMapGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttackMapV1IpInfoAttackMapGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]TimeSeriesAttack
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBlockedRequestsV1IpInfoBlockedRequestsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]RuleBlockedRequests
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetBlockedRequestsV1IpInfoBlockedRequestsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBlockedRequestsV1IpInfoBlockedRequestsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCountsV1IpInfoCountsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *IpInfoCounts
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetCountsV1IpInfoCountsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCountsV1IpInfoCountsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpDdosInfoV1IpInfoDdosGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *IpDdosInfo
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetIpDdosInfoV1IpInfoDdosGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpDdosInfoV1IpInfoDdosGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIpInfoV1IpInfoIpInfoGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *IpInfo
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetIpInfoV1IpInfoIpInfoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIpInfoV1IpInfoIpInfoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopSessionsV1IpInfoTopSessionsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]TopSession
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetTopSessionsV1IpInfoTopSessionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopSessionsV1IpInfoTopSessionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopUrlsV1IpInfoTopUrlsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]TopUrl
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetTopUrlsV1IpInfoTopUrlsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopUrlsV1IpInfoTopUrlsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopUserAgentsV1IpInfoTopUserAgentsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *[]TopUserAgent
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetTopUserAgentsV1IpInfoTopUserAgentsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopUserAgentsV1IpInfoTopUserAgentsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsV1OrganizationsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseOrganization
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsV1OrganizationsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsV1OrganizationsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PreviewCustomPageV1PreviewCustomPagePostResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *CustomPagePreviewResponse
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r PreviewCustomPageV1PreviewCustomPagePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PreviewCustomPageV1PreviewCustomPagePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInsightTypesV1SecurityInsightsTypesGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseInsightType
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetInsightTypesV1SecurityInsightsTypesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInsightTypesV1SecurityInsightsTypesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatisticsSeriesV1StatisticsSeriesGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *StatisticsSeries
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetStatisticsSeriesV1StatisticsSeriesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatisticsSeriesV1StatisticsSeriesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsV1TagsGetResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *PaginatedResponseTag
	ApplicationproblemJSON400 *APIError
	ApplicationproblemJSON404 *APIError
	ApplicationproblemJSON422 *APICompositeError
	ApplicationproblemJSON500 *APIError
}

// Status returns HTTPResponse.Status
func (r GetTagsV1TagsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsV1TagsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetWithResponse request returning *GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse
func (c *ClientWithResponses) GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse, error) {
	rsp, err := c.GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse(rsp)
}

// GetClientInfoV1ClientsMeGetWithResponse request returning *GetClientInfoV1ClientsMeGetResponse
func (c *ClientWithResponses) GetClientInfoV1ClientsMeGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClientInfoV1ClientsMeGetResponse, error) {
	rsp, err := c.GetClientInfoV1ClientsMeGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientInfoV1ClientsMeGetResponse(rsp)
}

// GetCustomPageSetsV1CustomPageSetsGetWithResponse request returning *GetCustomPageSetsV1CustomPageSetsGetResponse
func (c *ClientWithResponses) GetCustomPageSetsV1CustomPageSetsGetWithResponse(ctx context.Context, params *GetCustomPageSetsV1CustomPageSetsGetParams, reqEditors ...RequestEditorFn) (*GetCustomPageSetsV1CustomPageSetsGetResponse, error) {
	rsp, err := c.GetCustomPageSetsV1CustomPageSetsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomPageSetsV1CustomPageSetsGetResponse(rsp)
}

// CreateCustomPageSetV1CustomPageSetsPostWithBodyWithResponse request with arbitrary body returning *CreateCustomPageSetV1CustomPageSetsPostResponse
func (c *ClientWithResponses) CreateCustomPageSetV1CustomPageSetsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomPageSetV1CustomPageSetsPostResponse, error) {
	rsp, err := c.CreateCustomPageSetV1CustomPageSetsPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomPageSetV1CustomPageSetsPostResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomPageSetV1CustomPageSetsPostWithResponse(ctx context.Context, body CreateCustomPageSetV1CustomPageSetsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomPageSetV1CustomPageSetsPostResponse, error) {
	rsp, err := c.CreateCustomPageSetV1CustomPageSetsPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomPageSetV1CustomPageSetsPostResponse(rsp)
}

// DeleteCustomPageSetV1CustomPageSetsSetIdDeleteWithResponse request returning *DeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse
func (c *ClientWithResponses) DeleteCustomPageSetV1CustomPageSetsSetIdDeleteWithResponse(ctx context.Context, setId int, reqEditors ...RequestEditorFn) (*DeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse, error) {
	rsp, err := c.DeleteCustomPageSetV1CustomPageSetsSetIdDelete(ctx, setId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse(rsp)
}

// GetCustomPageSetV1CustomPageSetsSetIdGetWithResponse request returning *GetCustomPageSetV1CustomPageSetsSetIdGetResponse
func (c *ClientWithResponses) GetCustomPageSetV1CustomPageSetsSetIdGetWithResponse(ctx context.Context, setId int, reqEditors ...RequestEditorFn) (*GetCustomPageSetV1CustomPageSetsSetIdGetResponse, error) {
	rsp, err := c.GetCustomPageSetV1CustomPageSetsSetIdGet(ctx, setId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomPageSetV1CustomPageSetsSetIdGetResponse(rsp)
}

// UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithBodyWithResponse request with arbitrary body returning *UpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse
func (c *ClientWithResponses) UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithBodyWithResponse(ctx context.Context, setId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse, error) {
	rsp, err := c.UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithBody(ctx, setId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithResponse(ctx context.Context, setId int, body UpdateCustomPageSetV1CustomPageSetsSetIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse, error) {
	rsp, err := c.UpdateCustomPageSetV1CustomPageSetsSetIdPatch(ctx, setId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse(rsp)
}

// GetDomainsV1DomainsGetWithResponse request returning *GetDomainsV1DomainsGetResponse
func (c *ClientWithResponses) GetDomainsV1DomainsGetWithResponse(ctx context.Context, params *GetDomainsV1DomainsGetParams, reqEditors ...RequestEditorFn) (*GetDomainsV1DomainsGetResponse, error) {
	rsp, err := c.GetDomainsV1DomainsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainsV1DomainsGetResponse(rsp)
}

// DeleteDomainV1DomainsDomainIdDeleteWithResponse request returning *DeleteDomainV1DomainsDomainIdDeleteResponse
func (c *ClientWithResponses) DeleteDomainV1DomainsDomainIdDeleteWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*DeleteDomainV1DomainsDomainIdDeleteResponse, error) {
	rsp, err := c.DeleteDomainV1DomainsDomainIdDelete(ctx, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDomainV1DomainsDomainIdDeleteResponse(rsp)
}

// GetDomainV1DomainsDomainIdGetWithResponse request returning *GetDomainV1DomainsDomainIdGetResponse
func (c *ClientWithResponses) GetDomainV1DomainsDomainIdGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetDomainV1DomainsDomainIdGetResponse, error) {
	rsp, err := c.GetDomainV1DomainsDomainIdGet(ctx, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainV1DomainsDomainIdGetResponse(rsp)
}

// UpdateDomainV1DomainsDomainIdPatchWithBodyWithResponse request with arbitrary body returning *UpdateDomainV1DomainsDomainIdPatchResponse
func (c *ClientWithResponses) UpdateDomainV1DomainsDomainIdPatchWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainV1DomainsDomainIdPatchResponse, error) {
	rsp, err := c.UpdateDomainV1DomainsDomainIdPatchWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainV1DomainsDomainIdPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateDomainV1DomainsDomainIdPatchWithResponse(ctx context.Context, domainId int, body UpdateDomainV1DomainsDomainIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainV1DomainsDomainIdPatchResponse, error) {
	rsp, err := c.UpdateDomainV1DomainsDomainIdPatch(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainV1DomainsDomainIdPatchResponse(rsp)
}

// GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetWithResponse request returning *GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse
func (c *ClientWithResponses) GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetWithResponse(ctx context.Context, domainId int, params *GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetParams, reqEditors ...RequestEditorFn) (*GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse, error) {
	rsp, err := c.GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse(rsp)
}

// CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithBodyWithResponse request with arbitrary body returning *CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse
func (c *ClientWithResponses) CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse, error) {
	rsp, err := c.CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse(rsp)
}

func (c *ClientWithResponses) CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithResponse(ctx context.Context, domainId int, body CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse, error) {
	rsp, err := c.CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPost(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse(rsp)
}

// DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteWithResponse request returning *DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse
func (c *ClientWithResponses) DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse, error) {
	rsp, err := c.DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDelete(ctx, domainId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse(rsp)
}

// GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetWithResponse request returning *GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse
func (c *ClientWithResponses) GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse, error) {
	rsp, err := c.GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGet(ctx, domainId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse(rsp)
}

// UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithBodyWithResponse request with arbitrary body returning *UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse
func (c *ClientWithResponses) UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithBodyWithResponse(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse, error) {
	rsp, err := c.UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithBody(ctx, domainId, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithResponse(ctx context.Context, domainId int, ruleId int, body UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse, error) {
	rsp, err := c.UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatch(ctx, domainId, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse(rsp)
}

// ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchWithResponse request returning *ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse
func (c *ClientWithResponses) ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchWithResponse(ctx context.Context, domainId int, ruleId int, action struct {
	// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
	CustomerRuleState `yaml:",inline"`
}, reqEditors ...RequestEditorFn) (*ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse, error) {
	rsp, err := c.ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatch(ctx, domainId, ruleId, action, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse(rsp)
}

// GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetWithResponse request returning *GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse
func (c *ClientWithResponses) GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse, error) {
	rsp, err := c.GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGet(ctx, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse(rsp)
}

// UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithBodyWithResponse request with arbitrary body returning *UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse
func (c *ClientWithResponses) UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse, error) {
	rsp, err := c.UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithResponse(ctx context.Context, domainId int, body UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse, error) {
	rsp, err := c.UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatch(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse(rsp)
}

// ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostWithResponse request returning *ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse
func (c *ClientWithResponses) ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse, error) {
	rsp, err := c.ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPost(ctx, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse(rsp)
}

// GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetWithResponse request returning *GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse
func (c *ClientWithResponses) GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetWithResponse(ctx context.Context, domainId int, params *GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetParams, reqEditors ...RequestEditorFn) (*GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse, error) {
	rsp, err := c.GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse(rsp)
}

// GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetWithResponse request returning *GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse
func (c *ClientWithResponses) GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetWithResponse(ctx context.Context, domainId int, scanId string, reqEditors ...RequestEditorFn) (*GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse, error) {
	rsp, err := c.GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGet(ctx, domainId, scanId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse(rsp)
}

// GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetWithResponse request returning *GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse
func (c *ClientWithResponses) GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse, error) {
	rsp, err := c.GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGet(ctx, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse(rsp)
}

// UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithBodyWithResponse request with arbitrary body returning *UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse
func (c *ClientWithResponses) UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse, error) {
	rsp, err := c.UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithResponse(ctx context.Context, domainId int, body UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse, error) {
	rsp, err := c.UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatch(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse(rsp)
}

// UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithBodyWithResponse request with arbitrary body returning *UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse
func (c *ClientWithResponses) UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse, error) {
	rsp, err := c.UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse(rsp)
}

func (c *ClientWithResponses) UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithResponse(ctx context.Context, domainId int, body UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse, error) {
	rsp, err := c.UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPost(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse(rsp)
}

// GetApiGroupsV1DomainsDomainIdApiPathGroupsGetWithResponse request returning *GetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse
func (c *ClientWithResponses) GetApiGroupsV1DomainsDomainIdApiPathGroupsGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse, error) {
	rsp, err := c.GetApiGroupsV1DomainsDomainIdApiPathGroupsGet(ctx, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse(rsp)
}

// GetApiPathsV1DomainsDomainIdApiPathsGetWithResponse request returning *GetApiPathsV1DomainsDomainIdApiPathsGetResponse
func (c *ClientWithResponses) GetApiPathsV1DomainsDomainIdApiPathsGetWithResponse(ctx context.Context, domainId int, params *GetApiPathsV1DomainsDomainIdApiPathsGetParams, reqEditors ...RequestEditorFn) (*GetApiPathsV1DomainsDomainIdApiPathsGetResponse, error) {
	rsp, err := c.GetApiPathsV1DomainsDomainIdApiPathsGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPathsV1DomainsDomainIdApiPathsGetResponse(rsp)
}

// CreateApiPathV1DomainsDomainIdApiPathsPostWithBodyWithResponse request with arbitrary body returning *CreateApiPathV1DomainsDomainIdApiPathsPostResponse
func (c *ClientWithResponses) CreateApiPathV1DomainsDomainIdApiPathsPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiPathV1DomainsDomainIdApiPathsPostResponse, error) {
	rsp, err := c.CreateApiPathV1DomainsDomainIdApiPathsPostWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiPathV1DomainsDomainIdApiPathsPostResponse(rsp)
}

func (c *ClientWithResponses) CreateApiPathV1DomainsDomainIdApiPathsPostWithResponse(ctx context.Context, domainId int, body CreateApiPathV1DomainsDomainIdApiPathsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiPathV1DomainsDomainIdApiPathsPostResponse, error) {
	rsp, err := c.CreateApiPathV1DomainsDomainIdApiPathsPost(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiPathV1DomainsDomainIdApiPathsPostResponse(rsp)
}

// DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteWithResponse request returning *DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse
func (c *ClientWithResponses) DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteWithResponse(ctx context.Context, domainId int, pathId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse, error) {
	rsp, err := c.DeleteApiPathV1DomainsDomainIdApiPathsPathIdDelete(ctx, domainId, pathId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse(rsp)
}

// GetApiPathV1DomainsDomainIdApiPathsPathIdGetWithResponse request returning *GetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse
func (c *ClientWithResponses) GetApiPathV1DomainsDomainIdApiPathsPathIdGetWithResponse(ctx context.Context, domainId int, pathId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse, error) {
	rsp, err := c.GetApiPathV1DomainsDomainIdApiPathsPathIdGet(ctx, domainId, pathId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse(rsp)
}

// UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithBodyWithResponse request with arbitrary body returning *UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse
func (c *ClientWithResponses) UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithBodyWithResponse(ctx context.Context, domainId int, pathId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse, error) {
	rsp, err := c.UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithBody(ctx, domainId, pathId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithResponse(ctx context.Context, domainId int, pathId openapi_types.UUID, body UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse, error) {
	rsp, err := c.UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatch(ctx, domainId, pathId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse(rsp)
}

// GetCustomRulesV1DomainsDomainIdCustomRulesGetWithResponse request returning *GetCustomRulesV1DomainsDomainIdCustomRulesGetResponse
func (c *ClientWithResponses) GetCustomRulesV1DomainsDomainIdCustomRulesGetWithResponse(ctx context.Context, domainId int, params *GetCustomRulesV1DomainsDomainIdCustomRulesGetParams, reqEditors ...RequestEditorFn) (*GetCustomRulesV1DomainsDomainIdCustomRulesGetResponse, error) {
	rsp, err := c.GetCustomRulesV1DomainsDomainIdCustomRulesGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomRulesV1DomainsDomainIdCustomRulesGetResponse(rsp)
}

// CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithBodyWithResponse request with arbitrary body returning *CreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse
func (c *ClientWithResponses) CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse, error) {
	rsp, err := c.CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithResponse(ctx context.Context, domainId int, body CreateCustomRuleV1DomainsDomainIdCustomRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse, error) {
	rsp, err := c.CreateCustomRuleV1DomainsDomainIdCustomRulesPost(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse(rsp)
}

// BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithBodyWithResponse request with arbitrary body returning *BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse
func (c *ClientWithResponses) BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse, error) {
	rsp, err := c.BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse(rsp)
}

func (c *ClientWithResponses) BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithResponse(ctx context.Context, domainId int, body BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse, error) {
	rsp, err := c.BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePost(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse(rsp)
}

// DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteWithResponse request returning *DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse
func (c *ClientWithResponses) DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse, error) {
	rsp, err := c.DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDelete(ctx, domainId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse(rsp)
}

// GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetWithResponse request returning *GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse
func (c *ClientWithResponses) GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse, error) {
	rsp, err := c.GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGet(ctx, domainId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse(rsp)
}

// UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithBodyWithResponse request with arbitrary body returning *UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse
func (c *ClientWithResponses) UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithBodyWithResponse(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse, error) {
	rsp, err := c.UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithBody(ctx, domainId, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithResponse(ctx context.Context, domainId int, ruleId int, body UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse, error) {
	rsp, err := c.UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatch(ctx, domainId, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse(rsp)
}

// ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchWithResponse request returning *ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse
func (c *ClientWithResponses) ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchWithResponse(ctx context.Context, domainId int, ruleId int, action struct {
	// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
	CustomerRuleState `yaml:",inline"`
}, reqEditors ...RequestEditorFn) (*ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse, error) {
	rsp, err := c.ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatch(ctx, domainId, ruleId, action, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse(rsp)
}

// GetDdosAttacksV1DomainsDomainIdDdosAttacksGetWithResponse request returning *GetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse
func (c *ClientWithResponses) GetDdosAttacksV1DomainsDomainIdDdosAttacksGetWithResponse(ctx context.Context, domainId int, params *GetDdosAttacksV1DomainsDomainIdDdosAttacksGetParams, reqEditors ...RequestEditorFn) (*GetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse, error) {
	rsp, err := c.GetDdosAttacksV1DomainsDomainIdDdosAttacksGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse(rsp)
}

// GetDdosInfoV1DomainsDomainIdDdosInfoGetWithResponse request returning *GetDdosInfoV1DomainsDomainIdDdosInfoGetResponse
func (c *ClientWithResponses) GetDdosInfoV1DomainsDomainIdDdosInfoGetWithResponse(ctx context.Context, domainId int, params *GetDdosInfoV1DomainsDomainIdDdosInfoGetParams, reqEditors ...RequestEditorFn) (*GetDdosInfoV1DomainsDomainIdDdosInfoGetResponse, error) {
	rsp, err := c.GetDdosInfoV1DomainsDomainIdDdosInfoGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDdosInfoV1DomainsDomainIdDdosInfoGetResponse(rsp)
}

// GetFirewallRulesV1DomainsDomainIdFirewallRulesGetWithResponse request returning *GetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse
func (c *ClientWithResponses) GetFirewallRulesV1DomainsDomainIdFirewallRulesGetWithResponse(ctx context.Context, domainId int, params *GetFirewallRulesV1DomainsDomainIdFirewallRulesGetParams, reqEditors ...RequestEditorFn) (*GetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse, error) {
	rsp, err := c.GetFirewallRulesV1DomainsDomainIdFirewallRulesGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse(rsp)
}

// CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithBodyWithResponse request with arbitrary body returning *CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse
func (c *ClientWithResponses) CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse, error) {
	rsp, err := c.CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse(rsp)
}

func (c *ClientWithResponses) CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithResponse(ctx context.Context, domainId int, body CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse, error) {
	rsp, err := c.CreateFirewallRuleV1DomainsDomainIdFirewallRulesPost(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse(rsp)
}

// BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithBodyWithResponse request with arbitrary body returning *BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse
func (c *ClientWithResponses) BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse, error) {
	rsp, err := c.BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse(rsp)
}

func (c *ClientWithResponses) BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithResponse(ctx context.Context, domainId int, body BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse, error) {
	rsp, err := c.BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePost(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse(rsp)
}

// DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteWithResponse request returning *DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse
func (c *ClientWithResponses) DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse, error) {
	rsp, err := c.DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDelete(ctx, domainId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse(rsp)
}

// GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetWithResponse request returning *GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse
func (c *ClientWithResponses) GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetWithResponse(ctx context.Context, domainId int, ruleId int, reqEditors ...RequestEditorFn) (*GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse, error) {
	rsp, err := c.GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGet(ctx, domainId, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse(rsp)
}

// UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithBodyWithResponse request with arbitrary body returning *UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse
func (c *ClientWithResponses) UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithBodyWithResponse(ctx context.Context, domainId int, ruleId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse, error) {
	rsp, err := c.UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithBody(ctx, domainId, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithResponse(ctx context.Context, domainId int, ruleId int, body UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse, error) {
	rsp, err := c.UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatch(ctx, domainId, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse(rsp)
}

// ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchWithResponse request returning *ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse
func (c *ClientWithResponses) ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchWithResponse(ctx context.Context, domainId int, ruleId int, action struct {
	// Embedded struct due to allOf(#/components/schemas/CustomerRuleState)
	CustomerRuleState `yaml:",inline"`
}, reqEditors ...RequestEditorFn) (*ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse, error) {
	rsp, err := c.ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatch(ctx, domainId, ruleId, action, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse(rsp)
}

// GetInsightSilencesV1DomainsDomainIdInsightSilencesGetWithResponse request returning *GetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse
func (c *ClientWithResponses) GetInsightSilencesV1DomainsDomainIdInsightSilencesGetWithResponse(ctx context.Context, domainId int, params *GetInsightSilencesV1DomainsDomainIdInsightSilencesGetParams, reqEditors ...RequestEditorFn) (*GetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse, error) {
	rsp, err := c.GetInsightSilencesV1DomainsDomainIdInsightSilencesGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse(rsp)
}

// CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithBodyWithResponse request with arbitrary body returning *CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse
func (c *ClientWithResponses) CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse, error) {
	rsp, err := c.CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse(rsp)
}

func (c *ClientWithResponses) CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithResponse(ctx context.Context, domainId int, body CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse, error) {
	rsp, err := c.CreateInsightSilenceV1DomainsDomainIdInsightSilencesPost(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse(rsp)
}

// DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteWithResponse request returning *DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse
func (c *ClientWithResponses) DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteWithResponse(ctx context.Context, domainId int, silenceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse, error) {
	rsp, err := c.DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDelete(ctx, domainId, silenceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse(rsp)
}

// GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetWithResponse request returning *GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse
func (c *ClientWithResponses) GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetWithResponse(ctx context.Context, domainId int, silenceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse, error) {
	rsp, err := c.GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGet(ctx, domainId, silenceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse(rsp)
}

// UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithBodyWithResponse request with arbitrary body returning *UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse
func (c *ClientWithResponses) UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithBodyWithResponse(ctx context.Context, domainId int, silenceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse, error) {
	rsp, err := c.UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithBody(ctx, domainId, silenceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithResponse(ctx context.Context, domainId int, silenceId openapi_types.UUID, body UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse, error) {
	rsp, err := c.UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatch(ctx, domainId, silenceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse(rsp)
}

// GetInsightsV1DomainsDomainIdInsightsGetWithResponse request returning *GetInsightsV1DomainsDomainIdInsightsGetResponse
func (c *ClientWithResponses) GetInsightsV1DomainsDomainIdInsightsGetWithResponse(ctx context.Context, domainId int, params *GetInsightsV1DomainsDomainIdInsightsGetParams, reqEditors ...RequestEditorFn) (*GetInsightsV1DomainsDomainIdInsightsGetResponse, error) {
	rsp, err := c.GetInsightsV1DomainsDomainIdInsightsGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInsightsV1DomainsDomainIdInsightsGetResponse(rsp)
}

// GetInsightV1DomainsDomainIdInsightsInsightIdGetWithResponse request returning *GetInsightV1DomainsDomainIdInsightsInsightIdGetResponse
func (c *ClientWithResponses) GetInsightV1DomainsDomainIdInsightsInsightIdGetWithResponse(ctx context.Context, domainId int, insightId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInsightV1DomainsDomainIdInsightsInsightIdGetResponse, error) {
	rsp, err := c.GetInsightV1DomainsDomainIdInsightsInsightIdGet(ctx, domainId, insightId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInsightV1DomainsDomainIdInsightsInsightIdGetResponse(rsp)
}

// UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithBodyWithResponse request with arbitrary body returning *UpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse
func (c *ClientWithResponses) UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithBodyWithResponse(ctx context.Context, domainId int, insightId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse, error) {
	rsp, err := c.UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithBody(ctx, domainId, insightId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithResponse(ctx context.Context, domainId int, insightId openapi_types.UUID, body UpdateInsightV1DomainsDomainIdInsightsInsightIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse, error) {
	rsp, err := c.UpdateInsightV1DomainsDomainIdInsightsInsightIdPut(ctx, domainId, insightId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse(rsp)
}

// ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchWithResponse request returning *ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse
func (c *ClientWithResponses) ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchWithResponse(ctx context.Context, domainId int, policyId string, reqEditors ...RequestEditorFn) (*ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse, error) {
	rsp, err := c.ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatch(ctx, domainId, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse(rsp)
}

// GetRequestsV1DomainsDomainIdRequestsGetWithResponse request returning *GetRequestsV1DomainsDomainIdRequestsGetResponse
func (c *ClientWithResponses) GetRequestsV1DomainsDomainIdRequestsGetWithResponse(ctx context.Context, domainId int, params *GetRequestsV1DomainsDomainIdRequestsGetParams, reqEditors ...RequestEditorFn) (*GetRequestsV1DomainsDomainIdRequestsGetResponse, error) {
	rsp, err := c.GetRequestsV1DomainsDomainIdRequestsGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestsV1DomainsDomainIdRequestsGetResponse(rsp)
}

// GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetWithResponse request returning *GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse
func (c *ClientWithResponses) GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetWithResponse(ctx context.Context, domainId int, requestId string, reqEditors ...RequestEditorFn) (*GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse, error) {
	rsp, err := c.GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGet(ctx, domainId, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse(rsp)
}

// GetRuleSetListV1DomainsDomainIdRuleSetsGetWithResponse request returning *GetRuleSetListV1DomainsDomainIdRuleSetsGetResponse
func (c *ClientWithResponses) GetRuleSetListV1DomainsDomainIdRuleSetsGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetRuleSetListV1DomainsDomainIdRuleSetsGetResponse, error) {
	rsp, err := c.GetRuleSetListV1DomainsDomainIdRuleSetsGet(ctx, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRuleSetListV1DomainsDomainIdRuleSetsGetResponse(rsp)
}

// GetDomainSettingsV1DomainsDomainIdSettingsGetWithResponse request returning *GetDomainSettingsV1DomainsDomainIdSettingsGetResponse
func (c *ClientWithResponses) GetDomainSettingsV1DomainsDomainIdSettingsGetWithResponse(ctx context.Context, domainId int, reqEditors ...RequestEditorFn) (*GetDomainSettingsV1DomainsDomainIdSettingsGetResponse, error) {
	rsp, err := c.GetDomainSettingsV1DomainsDomainIdSettingsGet(ctx, domainId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainSettingsV1DomainsDomainIdSettingsGetResponse(rsp)
}

// UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithBodyWithResponse request with arbitrary body returning *UpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse
func (c *ClientWithResponses) UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithBodyWithResponse(ctx context.Context, domainId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse, error) {
	rsp, err := c.UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithBody(ctx, domainId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse(rsp)
}

func (c *ClientWithResponses) UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithResponse(ctx context.Context, domainId int, body UpdateDomainSettingsV1DomainsDomainIdSettingsPatchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse, error) {
	rsp, err := c.UpdateDomainSettingsV1DomainsDomainIdSettingsPatch(ctx, domainId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse(rsp)
}

// GetEventStatisticsV1DomainsDomainIdStatsGetWithResponse request returning *GetEventStatisticsV1DomainsDomainIdStatsGetResponse
func (c *ClientWithResponses) GetEventStatisticsV1DomainsDomainIdStatsGetWithResponse(ctx context.Context, domainId int, params *GetEventStatisticsV1DomainsDomainIdStatsGetParams, reqEditors ...RequestEditorFn) (*GetEventStatisticsV1DomainsDomainIdStatsGetResponse, error) {
	rsp, err := c.GetEventStatisticsV1DomainsDomainIdStatsGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventStatisticsV1DomainsDomainIdStatsGetResponse(rsp)
}

// GetTrafficV1DomainsDomainIdTrafficGetWithResponse request returning *GetTrafficV1DomainsDomainIdTrafficGetResponse
func (c *ClientWithResponses) GetTrafficV1DomainsDomainIdTrafficGetWithResponse(ctx context.Context, domainId int, params *GetTrafficV1DomainsDomainIdTrafficGetParams, reqEditors ...RequestEditorFn) (*GetTrafficV1DomainsDomainIdTrafficGetResponse, error) {
	rsp, err := c.GetTrafficV1DomainsDomainIdTrafficGet(ctx, domainId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrafficV1DomainsDomainIdTrafficGetResponse(rsp)
}

// GetAttackMapV1IpInfoAttackMapGetWithResponse request returning *GetAttackMapV1IpInfoAttackMapGetResponse
func (c *ClientWithResponses) GetAttackMapV1IpInfoAttackMapGetWithResponse(ctx context.Context, params *GetAttackMapV1IpInfoAttackMapGetParams, reqEditors ...RequestEditorFn) (*GetAttackMapV1IpInfoAttackMapGetResponse, error) {
	rsp, err := c.GetAttackMapV1IpInfoAttackMapGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttackMapV1IpInfoAttackMapGetResponse(rsp)
}

// GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetWithResponse request returning *GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse
func (c *ClientWithResponses) GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetWithResponse(ctx context.Context, params *GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetParams, reqEditors ...RequestEditorFn) (*GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse, error) {
	rsp, err := c.GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse(rsp)
}

// GetBlockedRequestsV1IpInfoBlockedRequestsGetWithResponse request returning *GetBlockedRequestsV1IpInfoBlockedRequestsGetResponse
func (c *ClientWithResponses) GetBlockedRequestsV1IpInfoBlockedRequestsGetWithResponse(ctx context.Context, params *GetBlockedRequestsV1IpInfoBlockedRequestsGetParams, reqEditors ...RequestEditorFn) (*GetBlockedRequestsV1IpInfoBlockedRequestsGetResponse, error) {
	rsp, err := c.GetBlockedRequestsV1IpInfoBlockedRequestsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBlockedRequestsV1IpInfoBlockedRequestsGetResponse(rsp)
}

// GetCountsV1IpInfoCountsGetWithResponse request returning *GetCountsV1IpInfoCountsGetResponse
func (c *ClientWithResponses) GetCountsV1IpInfoCountsGetWithResponse(ctx context.Context, params *GetCountsV1IpInfoCountsGetParams, reqEditors ...RequestEditorFn) (*GetCountsV1IpInfoCountsGetResponse, error) {
	rsp, err := c.GetCountsV1IpInfoCountsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCountsV1IpInfoCountsGetResponse(rsp)
}

// GetIpDdosInfoV1IpInfoDdosGetWithResponse request returning *GetIpDdosInfoV1IpInfoDdosGetResponse
func (c *ClientWithResponses) GetIpDdosInfoV1IpInfoDdosGetWithResponse(ctx context.Context, params *GetIpDdosInfoV1IpInfoDdosGetParams, reqEditors ...RequestEditorFn) (*GetIpDdosInfoV1IpInfoDdosGetResponse, error) {
	rsp, err := c.GetIpDdosInfoV1IpInfoDdosGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpDdosInfoV1IpInfoDdosGetResponse(rsp)
}

// GetIpInfoV1IpInfoIpInfoGetWithResponse request returning *GetIpInfoV1IpInfoIpInfoGetResponse
func (c *ClientWithResponses) GetIpInfoV1IpInfoIpInfoGetWithResponse(ctx context.Context, params *GetIpInfoV1IpInfoIpInfoGetParams, reqEditors ...RequestEditorFn) (*GetIpInfoV1IpInfoIpInfoGetResponse, error) {
	rsp, err := c.GetIpInfoV1IpInfoIpInfoGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIpInfoV1IpInfoIpInfoGetResponse(rsp)
}

// GetTopSessionsV1IpInfoTopSessionsGetWithResponse request returning *GetTopSessionsV1IpInfoTopSessionsGetResponse
func (c *ClientWithResponses) GetTopSessionsV1IpInfoTopSessionsGetWithResponse(ctx context.Context, params *GetTopSessionsV1IpInfoTopSessionsGetParams, reqEditors ...RequestEditorFn) (*GetTopSessionsV1IpInfoTopSessionsGetResponse, error) {
	rsp, err := c.GetTopSessionsV1IpInfoTopSessionsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopSessionsV1IpInfoTopSessionsGetResponse(rsp)
}

// GetTopUrlsV1IpInfoTopUrlsGetWithResponse request returning *GetTopUrlsV1IpInfoTopUrlsGetResponse
func (c *ClientWithResponses) GetTopUrlsV1IpInfoTopUrlsGetWithResponse(ctx context.Context, params *GetTopUrlsV1IpInfoTopUrlsGetParams, reqEditors ...RequestEditorFn) (*GetTopUrlsV1IpInfoTopUrlsGetResponse, error) {
	rsp, err := c.GetTopUrlsV1IpInfoTopUrlsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopUrlsV1IpInfoTopUrlsGetResponse(rsp)
}

// GetTopUserAgentsV1IpInfoTopUserAgentsGetWithResponse request returning *GetTopUserAgentsV1IpInfoTopUserAgentsGetResponse
func (c *ClientWithResponses) GetTopUserAgentsV1IpInfoTopUserAgentsGetWithResponse(ctx context.Context, params *GetTopUserAgentsV1IpInfoTopUserAgentsGetParams, reqEditors ...RequestEditorFn) (*GetTopUserAgentsV1IpInfoTopUserAgentsGetResponse, error) {
	rsp, err := c.GetTopUserAgentsV1IpInfoTopUserAgentsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopUserAgentsV1IpInfoTopUserAgentsGetResponse(rsp)
}

// GetOrganizationsV1OrganizationsGetWithResponse request returning *GetOrganizationsV1OrganizationsGetResponse
func (c *ClientWithResponses) GetOrganizationsV1OrganizationsGetWithResponse(ctx context.Context, params *GetOrganizationsV1OrganizationsGetParams, reqEditors ...RequestEditorFn) (*GetOrganizationsV1OrganizationsGetResponse, error) {
	rsp, err := c.GetOrganizationsV1OrganizationsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsV1OrganizationsGetResponse(rsp)
}

// PreviewCustomPageV1PreviewCustomPagePostWithBodyWithResponse request with arbitrary body returning *PreviewCustomPageV1PreviewCustomPagePostResponse
func (c *ClientWithResponses) PreviewCustomPageV1PreviewCustomPagePostWithBodyWithResponse(ctx context.Context, params *PreviewCustomPageV1PreviewCustomPagePostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PreviewCustomPageV1PreviewCustomPagePostResponse, error) {
	rsp, err := c.PreviewCustomPageV1PreviewCustomPagePostWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreviewCustomPageV1PreviewCustomPagePostResponse(rsp)
}

func (c *ClientWithResponses) PreviewCustomPageV1PreviewCustomPagePostWithResponse(ctx context.Context, params *PreviewCustomPageV1PreviewCustomPagePostParams, body PreviewCustomPageV1PreviewCustomPagePostJSONRequestBody, reqEditors ...RequestEditorFn) (*PreviewCustomPageV1PreviewCustomPagePostResponse, error) {
	rsp, err := c.PreviewCustomPageV1PreviewCustomPagePost(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePreviewCustomPageV1PreviewCustomPagePostResponse(rsp)
}

// GetInsightTypesV1SecurityInsightsTypesGetWithResponse request returning *GetInsightTypesV1SecurityInsightsTypesGetResponse
func (c *ClientWithResponses) GetInsightTypesV1SecurityInsightsTypesGetWithResponse(ctx context.Context, params *GetInsightTypesV1SecurityInsightsTypesGetParams, reqEditors ...RequestEditorFn) (*GetInsightTypesV1SecurityInsightsTypesGetResponse, error) {
	rsp, err := c.GetInsightTypesV1SecurityInsightsTypesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInsightTypesV1SecurityInsightsTypesGetResponse(rsp)
}

// GetStatisticsSeriesV1StatisticsSeriesGetWithResponse request returning *GetStatisticsSeriesV1StatisticsSeriesGetResponse
func (c *ClientWithResponses) GetStatisticsSeriesV1StatisticsSeriesGetWithResponse(ctx context.Context, params *GetStatisticsSeriesV1StatisticsSeriesGetParams, reqEditors ...RequestEditorFn) (*GetStatisticsSeriesV1StatisticsSeriesGetResponse, error) {
	rsp, err := c.GetStatisticsSeriesV1StatisticsSeriesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatisticsSeriesV1StatisticsSeriesGetResponse(rsp)
}

// GetTagsV1TagsGetWithResponse request returning *GetTagsV1TagsGetResponse
func (c *ClientWithResponses) GetTagsV1TagsGetWithResponse(ctx context.Context, params *GetTagsV1TagsGetParams, reqEditors ...RequestEditorFn) (*GetTagsV1TagsGetResponse, error) {
	rsp, err := c.GetTagsV1TagsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsV1TagsGetResponse(rsp)
}

// ParseGetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse parses an HTTP response from a GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetWithResponse call
func ParseGetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse(rsp *http.Response) (*GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdvancedRuleDescriptorV1AdvancedRulesDescriptorGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedRuleDescriptorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetClientInfoV1ClientsMeGetResponse parses an HTTP response from a GetClientInfoV1ClientsMeGetWithResponse call
func ParseGetClientInfoV1ClientsMeGetResponse(rsp *http.Response) (*GetClientInfoV1ClientsMeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientInfoV1ClientsMeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomPageSetsV1CustomPageSetsGetResponse parses an HTTP response from a GetCustomPageSetsV1CustomPageSetsGetWithResponse call
func ParseGetCustomPageSetsV1CustomPageSetsGetResponse(rsp *http.Response) (*GetCustomPageSetsV1CustomPageSetsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomPageSetsV1CustomPageSetsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseCustomPageSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateCustomPageSetV1CustomPageSetsPostResponse parses an HTTP response from a CreateCustomPageSetV1CustomPageSetsPostWithResponse call
func ParseCreateCustomPageSetV1CustomPageSetsPostResponse(rsp *http.Response) (*CreateCustomPageSetV1CustomPageSetsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomPageSetV1CustomPageSetsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CustomPageSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse parses an HTTP response from a DeleteCustomPageSetV1CustomPageSetsSetIdDeleteWithResponse call
func ParseDeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse(rsp *http.Response) (*DeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomPageSetV1CustomPageSetsSetIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomPageSetV1CustomPageSetsSetIdGetResponse parses an HTTP response from a GetCustomPageSetV1CustomPageSetsSetIdGetWithResponse call
func ParseGetCustomPageSetV1CustomPageSetsSetIdGetResponse(rsp *http.Response) (*GetCustomPageSetV1CustomPageSetsSetIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomPageSetV1CustomPageSetsSetIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomPageSetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse parses an HTTP response from a UpdateCustomPageSetV1CustomPageSetsSetIdPatchWithResponse call
func ParseUpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse(rsp *http.Response) (*UpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomPageSetV1CustomPageSetsSetIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDomainsV1DomainsGetResponse parses an HTTP response from a GetDomainsV1DomainsGetWithResponse call
func ParseGetDomainsV1DomainsGetResponse(rsp *http.Response) (*GetDomainsV1DomainsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDomainsV1DomainsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseSummaryDomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDomainV1DomainsDomainIdDeleteResponse parses an HTTP response from a DeleteDomainV1DomainsDomainIdDeleteWithResponse call
func ParseDeleteDomainV1DomainsDomainIdDeleteResponse(rsp *http.Response) (*DeleteDomainV1DomainsDomainIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDomainV1DomainsDomainIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	}

	return response, nil
}

// ParseGetDomainV1DomainsDomainIdGetResponse parses an HTTP response from a GetDomainV1DomainsDomainIdGetWithResponse call
func ParseGetDomainV1DomainsDomainIdGetResponse(rsp *http.Response) (*GetDomainV1DomainsDomainIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDomainV1DomainsDomainIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DetailedDomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDomainV1DomainsDomainIdPatchResponse parses an HTTP response from a UpdateDomainV1DomainsDomainIdPatchWithResponse call
func ParseUpdateDomainV1DomainsDomainIdPatchResponse(rsp *http.Response) (*UpdateDomainV1DomainsDomainIdPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDomainV1DomainsDomainIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse parses an HTTP response from a GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetWithResponse call
func ParseGetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse(rsp *http.Response) (*GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdvancedRulesV1DomainsDomainIdAdvancedRulesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseAdvancedRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse parses an HTTP response from a CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostWithResponse call
func ParseCreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse(rsp *http.Response) (*CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAdvancedRuleV1DomainsDomainIdAdvancedRulesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AdvancedRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse parses an HTTP response from a DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteWithResponse call
func ParseDeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse(rsp *http.Response) (*DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	}

	return response, nil
}

// ParseGetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse parses an HTTP response from a GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetWithResponse call
func ParseGetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse(rsp *http.Response) (*GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdvancedRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse parses an HTTP response from a UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchWithResponse call
func ParseUpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse(rsp *http.Response) (*UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAdvancedRuleV1DomainsDomainIdAdvancedRulesRuleIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse parses an HTTP response from a ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchWithResponse call
func ParseToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse(rsp *http.Response) (*ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleRuleV1DomainsDomainIdAdvancedRulesRuleIdActionPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse parses an HTTP response from a GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetWithResponse call
func ParseGetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse(rsp *http.Response) (*GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppModelsApiDiscoveryApiUrls
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse parses an HTTP response from a UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchWithResponse call
func ParseUpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse(rsp *http.Response) (*UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiUrlsV1DomainsDomainIdApiDiscoveryApiUrlsPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse parses an HTTP response from a ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostWithResponse call
func ParseScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse(rsp *http.Response) (*ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScanSpecFileV1DomainsDomainIdApiDiscoveryScanPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResultId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse parses an HTTP response from a GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetWithResponse call
func ParseGetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse(rsp *http.Response) (*GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScanResultsV1DomainsDomainIdApiDiscoveryScanResultsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiScanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse parses an HTTP response from a GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetWithResponse call
func ParseGetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse(rsp *http.Response) (*GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScanResultV1DomainsDomainIdApiDiscoveryScanResultsScanIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiScanResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse parses an HTTP response from a GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetWithResponse call
func ParseGetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse(rsp *http.Response) (*GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiDiscoverySettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse parses an HTTP response from a UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchWithResponse call
func ParseUpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse(rsp *http.Response) (*UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiDiscoverySettingsV1DomainsDomainIdApiDiscoverySettingsPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiDiscoverySettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse parses an HTTP response from a UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostWithResponse call
func ParseUploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse(rsp *http.Response) (*UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadSpecFileV1DomainsDomainIdApiDiscoveryUploadPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaskResultId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse parses an HTTP response from a GetApiGroupsV1DomainsDomainIdApiPathGroupsGetWithResponse call
func ParseGetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse(rsp *http.Response) (*GetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiGroupsV1DomainsDomainIdApiPathGroupsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiPathGroups
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetApiPathsV1DomainsDomainIdApiPathsGetResponse parses an HTTP response from a GetApiPathsV1DomainsDomainIdApiPathsGetWithResponse call
func ParseGetApiPathsV1DomainsDomainIdApiPathsGetResponse(rsp *http.Response) (*GetApiPathsV1DomainsDomainIdApiPathsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPathsV1DomainsDomainIdApiPathsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseApiPathResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateApiPathV1DomainsDomainIdApiPathsPostResponse parses an HTTP response from a CreateApiPathV1DomainsDomainIdApiPathsPostWithResponse call
func ParseCreateApiPathV1DomainsDomainIdApiPathsPostResponse(rsp *http.Response) (*CreateApiPathV1DomainsDomainIdApiPathsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiPathV1DomainsDomainIdApiPathsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiPathResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse parses an HTTP response from a DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteWithResponse call
func ParseDeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse(rsp *http.Response) (*DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiPathV1DomainsDomainIdApiPathsPathIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse parses an HTTP response from a GetApiPathV1DomainsDomainIdApiPathsPathIdGetWithResponse call
func ParseGetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse(rsp *http.Response) (*GetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiPathV1DomainsDomainIdApiPathsPathIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiPathResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse parses an HTTP response from a UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchWithResponse call
func ParseUpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse(rsp *http.Response) (*UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiPathV1DomainsDomainIdApiPathsPathIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetCustomRulesV1DomainsDomainIdCustomRulesGetResponse parses an HTTP response from a GetCustomRulesV1DomainsDomainIdCustomRulesGetWithResponse call
func ParseGetCustomRulesV1DomainsDomainIdCustomRulesGetResponse(rsp *http.Response) (*GetCustomRulesV1DomainsDomainIdCustomRulesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomRulesV1DomainsDomainIdCustomRulesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseCustomRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse parses an HTTP response from a CreateCustomRuleV1DomainsDomainIdCustomRulesPostWithResponse call
func ParseCreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse(rsp *http.Response) (*CreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomRuleV1DomainsDomainIdCustomRulesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CustomRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse parses an HTTP response from a BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostWithResponse call
func ParseBulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse(rsp *http.Response) (*BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkDeleteCustomRuleV1DomainsDomainIdCustomRulesBulkDeletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse parses an HTTP response from a DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteWithResponse call
func ParseDeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse(rsp *http.Response) (*DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomRuleV1DomainsDomainIdCustomRulesRuleIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	}

	return response, nil
}

// ParseGetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse parses an HTTP response from a GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetWithResponse call
func ParseGetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse(rsp *http.Response) (*GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomRuleV1DomainsDomainIdCustomRulesRuleIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse parses an HTTP response from a UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchWithResponse call
func ParseUpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse(rsp *http.Response) (*UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomRuleV1DomainsDomainIdCustomRulesRuleIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse parses an HTTP response from a ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchWithResponse call
func ParseToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse(rsp *http.Response) (*ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleRuleV1DomainsDomainIdCustomRulesRuleIdActionPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse parses an HTTP response from a GetDdosAttacksV1DomainsDomainIdDdosAttacksGetWithResponse call
func ParseGetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse(rsp *http.Response) (*GetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDdosAttacksV1DomainsDomainIdDdosAttacksGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseDdosAttack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDdosInfoV1DomainsDomainIdDdosInfoGetResponse parses an HTTP response from a GetDdosInfoV1DomainsDomainIdDdosInfoGetWithResponse call
func ParseGetDdosInfoV1DomainsDomainIdDdosInfoGetResponse(rsp *http.Response) (*GetDdosInfoV1DomainsDomainIdDdosInfoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDdosInfoV1DomainsDomainIdDdosInfoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseDdosInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse parses an HTTP response from a GetFirewallRulesV1DomainsDomainIdFirewallRulesGetWithResponse call
func ParseGetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse(rsp *http.Response) (*GetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFirewallRulesV1DomainsDomainIdFirewallRulesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseFirewallRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse parses an HTTP response from a CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostWithResponse call
func ParseCreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse(rsp *http.Response) (*CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFirewallRuleV1DomainsDomainIdFirewallRulesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FirewallRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse parses an HTTP response from a BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostWithResponse call
func ParseBulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse(rsp *http.Response) (*BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkDeleteFirewallRuleV1DomainsDomainIdFirewallRulesBulkDeletePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	}

	return response, nil
}

// ParseDeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse parses an HTTP response from a DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteWithResponse call
func ParseDeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse(rsp *http.Response) (*DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	}

	return response, nil
}

// ParseGetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse parses an HTTP response from a GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetWithResponse call
func ParseGetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse(rsp *http.Response) (*GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FirewallRuleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse parses an HTTP response from a UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchWithResponse call
func ParseUpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse(rsp *http.Response) (*UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFirewallRuleV1DomainsDomainIdFirewallRulesRuleIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse parses an HTTP response from a ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchWithResponse call
func ParseToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse(rsp *http.Response) (*ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleRuleV1DomainsDomainIdFirewallRulesRuleIdActionPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse parses an HTTP response from a GetInsightSilencesV1DomainsDomainIdInsightSilencesGetWithResponse call
func ParseGetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse(rsp *http.Response) (*GetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInsightSilencesV1DomainsDomainIdInsightSilencesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseInsightSilence
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse parses an HTTP response from a CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostWithResponse call
func ParseCreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse(rsp *http.Response) (*CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInsightSilenceV1DomainsDomainIdInsightSilencesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightSilence
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseDeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse parses an HTTP response from a DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteWithResponse call
func ParseDeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse(rsp *http.Response) (*DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse parses an HTTP response from a GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetWithResponse call
func ParseGetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse(rsp *http.Response) (*GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightSilence
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse parses an HTTP response from a UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchWithResponse call
func ParseUpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse(rsp *http.Response) (*UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateInsightSilenceV1DomainsDomainIdInsightSilencesSilenceIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InsightSilence
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetInsightsV1DomainsDomainIdInsightsGetResponse parses an HTTP response from a GetInsightsV1DomainsDomainIdInsightsGetWithResponse call
func ParseGetInsightsV1DomainsDomainIdInsightsGetResponse(rsp *http.Response) (*GetInsightsV1DomainsDomainIdInsightsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInsightsV1DomainsDomainIdInsightsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseInsight
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetInsightV1DomainsDomainIdInsightsInsightIdGetResponse parses an HTTP response from a GetInsightV1DomainsDomainIdInsightsInsightIdGetWithResponse call
func ParseGetInsightV1DomainsDomainIdInsightsInsightIdGetResponse(rsp *http.Response) (*GetInsightV1DomainsDomainIdInsightsInsightIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInsightV1DomainsDomainIdInsightsInsightIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Insight
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse parses an HTTP response from a UpdateInsightV1DomainsDomainIdInsightsInsightIdPutWithResponse call
func ParseUpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse(rsp *http.Response) (*UpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateInsightV1DomainsDomainIdInsightsInsightIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Insight
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse parses an HTTP response from a ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchWithResponse call
func ParseToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse(rsp *http.Response) (*ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleDomainPolicyV1DomainsDomainIdPoliciesPolicyIdTogglePatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyMode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetRequestsV1DomainsDomainIdRequestsGetResponse parses an HTTP response from a GetRequestsV1DomainsDomainIdRequestsGetWithResponse call
func ParseGetRequestsV1DomainsDomainIdRequestsGetResponse(rsp *http.Response) (*GetRequestsV1DomainsDomainIdRequestsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestsV1DomainsDomainIdRequestsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseRequestSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse parses an HTTP response from a GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetWithResponse call
func ParseGetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse(rsp *http.Response) (*GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRequestDetailsV1DomainsDomainIdRequestsRequestIdDetailsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequestDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetRuleSetListV1DomainsDomainIdRuleSetsGetResponse parses an HTTP response from a GetRuleSetListV1DomainsDomainIdRuleSetsGetWithResponse call
func ParseGetRuleSetListV1DomainsDomainIdRuleSetsGetResponse(rsp *http.Response) (*GetRuleSetListV1DomainsDomainIdRuleSetsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRuleSetListV1DomainsDomainIdRuleSetsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RuleSet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetDomainSettingsV1DomainsDomainIdSettingsGetResponse parses an HTTP response from a GetDomainSettingsV1DomainsDomainIdSettingsGetWithResponse call
func ParseGetDomainSettingsV1DomainsDomainIdSettingsGetResponse(rsp *http.Response) (*GetDomainSettingsV1DomainsDomainIdSettingsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDomainSettingsV1DomainsDomainIdSettingsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DomainSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse parses an HTTP response from a UpdateDomainSettingsV1DomainsDomainIdSettingsPatchWithResponse call
func ParseUpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse(rsp *http.Response) (*UpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDomainSettingsV1DomainsDomainIdSettingsPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetEventStatisticsV1DomainsDomainIdStatsGetResponse parses an HTTP response from a GetEventStatisticsV1DomainsDomainIdStatsGetWithResponse call
func ParseGetEventStatisticsV1DomainsDomainIdStatsGetResponse(rsp *http.Response) (*GetEventStatisticsV1DomainsDomainIdStatsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventStatisticsV1DomainsDomainIdStatsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetTrafficV1DomainsDomainIdTrafficGetResponse parses an HTTP response from a GetTrafficV1DomainsDomainIdTrafficGetWithResponse call
func ParseGetTrafficV1DomainsDomainIdTrafficGetResponse(rsp *http.Response) (*GetTrafficV1DomainsDomainIdTrafficGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrafficV1DomainsDomainIdTrafficGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TrafficMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetAttackMapV1IpInfoAttackMapGetResponse parses an HTTP response from a GetAttackMapV1IpInfoAttackMapGetWithResponse call
func ParseGetAttackMapV1IpInfoAttackMapGetResponse(rsp *http.Response) (*GetAttackMapV1IpInfoAttackMapGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttackMapV1IpInfoAttackMapGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IpCountryAttack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse parses an HTTP response from a GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetWithResponse call
func ParseGetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse(rsp *http.Response) (*GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttackTimeSeriesV1IpInfoAttackTimeSeriesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TimeSeriesAttack
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetBlockedRequestsV1IpInfoBlockedRequestsGetResponse parses an HTTP response from a GetBlockedRequestsV1IpInfoBlockedRequestsGetWithResponse call
func ParseGetBlockedRequestsV1IpInfoBlockedRequestsGetResponse(rsp *http.Response) (*GetBlockedRequestsV1IpInfoBlockedRequestsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBlockedRequestsV1IpInfoBlockedRequestsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RuleBlockedRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetCountsV1IpInfoCountsGetResponse parses an HTTP response from a GetCountsV1IpInfoCountsGetWithResponse call
func ParseGetCountsV1IpInfoCountsGetResponse(rsp *http.Response) (*GetCountsV1IpInfoCountsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCountsV1IpInfoCountsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IpInfoCounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetIpDdosInfoV1IpInfoDdosGetResponse parses an HTTP response from a GetIpDdosInfoV1IpInfoDdosGetWithResponse call
func ParseGetIpDdosInfoV1IpInfoDdosGetResponse(rsp *http.Response) (*GetIpDdosInfoV1IpInfoDdosGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIpDdosInfoV1IpInfoDdosGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IpDdosInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetIpInfoV1IpInfoIpInfoGetResponse parses an HTTP response from a GetIpInfoV1IpInfoIpInfoGetWithResponse call
func ParseGetIpInfoV1IpInfoIpInfoGetResponse(rsp *http.Response) (*GetIpInfoV1IpInfoIpInfoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIpInfoV1IpInfoIpInfoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IpInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetTopSessionsV1IpInfoTopSessionsGetResponse parses an HTTP response from a GetTopSessionsV1IpInfoTopSessionsGetWithResponse call
func ParseGetTopSessionsV1IpInfoTopSessionsGetResponse(rsp *http.Response) (*GetTopSessionsV1IpInfoTopSessionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopSessionsV1IpInfoTopSessionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TopSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetTopUrlsV1IpInfoTopUrlsGetResponse parses an HTTP response from a GetTopUrlsV1IpInfoTopUrlsGetWithResponse call
func ParseGetTopUrlsV1IpInfoTopUrlsGetResponse(rsp *http.Response) (*GetTopUrlsV1IpInfoTopUrlsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopUrlsV1IpInfoTopUrlsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TopUrl
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetTopUserAgentsV1IpInfoTopUserAgentsGetResponse parses an HTTP response from a GetTopUserAgentsV1IpInfoTopUserAgentsGetWithResponse call
func ParseGetTopUserAgentsV1IpInfoTopUserAgentsGetResponse(rsp *http.Response) (*GetTopUserAgentsV1IpInfoTopUserAgentsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopUserAgentsV1IpInfoTopUserAgentsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TopUserAgent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsV1OrganizationsGetResponse parses an HTTP response from a GetOrganizationsV1OrganizationsGetWithResponse call
func ParseGetOrganizationsV1OrganizationsGetResponse(rsp *http.Response) (*GetOrganizationsV1OrganizationsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsV1OrganizationsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseOrganization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParsePreviewCustomPageV1PreviewCustomPagePostResponse parses an HTTP response from a PreviewCustomPageV1PreviewCustomPagePostWithResponse call
func ParsePreviewCustomPageV1PreviewCustomPagePostResponse(rsp *http.Response) (*PreviewCustomPageV1PreviewCustomPagePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PreviewCustomPageV1PreviewCustomPagePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomPagePreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetInsightTypesV1SecurityInsightsTypesGetResponse parses an HTTP response from a GetInsightTypesV1SecurityInsightsTypesGetWithResponse call
func ParseGetInsightTypesV1SecurityInsightsTypesGetResponse(rsp *http.Response) (*GetInsightTypesV1SecurityInsightsTypesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInsightTypesV1SecurityInsightsTypesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseInsightType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetStatisticsSeriesV1StatisticsSeriesGetResponse parses an HTTP response from a GetStatisticsSeriesV1StatisticsSeriesGetWithResponse call
func ParseGetStatisticsSeriesV1StatisticsSeriesGetResponse(rsp *http.Response) (*GetStatisticsSeriesV1StatisticsSeriesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatisticsSeriesV1StatisticsSeriesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatisticsSeries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseGetTagsV1TagsGetResponse parses an HTTP response from a GetTagsV1TagsGetWithResponse call
func ParseGetTagsV1TagsGetResponse(rsp *http.Response) (*GetTagsV1TagsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsV1TagsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedResponseTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest APICompositeError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lcmm0+nZE+fp2cmXT1/+CgAA//9LitaqZ7UEAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
